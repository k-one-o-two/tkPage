/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/_app";
exports.ids = ["pages/_app"];
exports.modules = {

/***/ "./components/layout.js":
/*!******************************!*\
  !*** ./components/layout.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Layout\": () => (/* binding */ Layout)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var primeicons_primeicons_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! primeicons/primeicons.css */ \"./node_modules/primeicons/primeicons.css\");\n/* harmony import */ var primeicons_primeicons_css__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(primeicons_primeicons_css__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var primeflex_primeflex_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! primeflex/primeflex.css */ \"./node_modules/primeflex/primeflex.css\");\n/* harmony import */ var primeflex_primeflex_css__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(primeflex_primeflex_css__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var primereact_image__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! primereact/image */ \"primereact/image\");\n/* harmony import */ var primereact_image__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(primereact_image__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! next/router */ \"next/router\");\n/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(next_router__WEBPACK_IMPORTED_MODULE_5__);\n// import 'primereact/resources/primereact.css'; // core css\n\n // icons\n\n\n\n\nfunction Layout({ children , active  }) {\n    const [activeIndex, setActiveIndex] = (0,react__WEBPACK_IMPORTED_MODULE_4__.useState)(active);\n    const router = (0,next_router__WEBPACK_IMPORTED_MODULE_5__.useRouter)();\n    const model = [\n        {\n            label: \"_about\",\n            icon: \"pi-user\",\n            url: \"/\"\n        },\n        {\n            label: \"_photos\",\n            icon: \"pi-camera\",\n            url: \"/photo\"\n        }\n    ];\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"flex justify-content-center flex-wrap header\",\n                style: {\n                    display: \"flex\",\n                    gap: \"10px\"\n                },\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(primereact_image__WEBPACK_IMPORTED_MODULE_3__.Image, {\n                        src: \"k102.svg\",\n                        height: \"40\"\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\k102\\\\Documents\\\\workspace\\\\tkPage\\\\components\\\\layout.js\",\n                        lineNumber: 33,\n                        columnNumber: 9\n                    }, this),\n                    model.map((item)=>{\n                        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"button\",\n                            severity: \"secondary\",\n                            onClick: ()=>{\n                                router.push(item.url);\n                            },\n                            children: item.label\n                        }, item.label, false, {\n                            fileName: \"C:\\\\Users\\\\k102\\\\Documents\\\\workspace\\\\tkPage\\\\components\\\\layout.js\",\n                            lineNumber: 36,\n                            columnNumber: 13\n                        }, this);\n                    })\n                ]\n            }, void 0, true, {\n                fileName: \"C:\\\\Users\\\\k102\\\\Documents\\\\workspace\\\\tkPage\\\\components\\\\layout.js\",\n                lineNumber: 29,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"paper\",\n                children: children\n            }, void 0, false, {\n                fileName: \"C:\\\\Users\\\\k102\\\\Documents\\\\workspace\\\\tkPage\\\\components\\\\layout.js\",\n                lineNumber: 49,\n                columnNumber: 7\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"C:\\\\Users\\\\k102\\\\Documents\\\\workspace\\\\tkPage\\\\components\\\\layout.js\",\n        lineNumber: 28,\n        columnNumber: 5\n    }, this);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jb21wb25lbnRzL2xheW91dC5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsNERBQTREOztBQUN6QixDQUFDLFFBQVE7QUFDWDtBQUVRO0FBRVI7QUFDTztBQUVqQyxTQUFTRyxPQUFPLEVBQUVDLFNBQVEsRUFBRUMsT0FBTSxFQUFFLEVBQUU7SUFDM0MsTUFBTSxDQUFDQyxhQUFhQyxlQUFlLEdBQUdOLCtDQUFRQSxDQUFDSTtJQUMvQyxNQUFNRyxTQUFTTixzREFBU0E7SUFFeEIsTUFBTU8sUUFBUTtRQUNaO1lBQ0VDLE9BQU87WUFDUEMsTUFBTTtZQUNOQyxLQUFLO1FBQ1A7UUFDQTtZQUNFRixPQUFPO1lBQ1BDLE1BQU07WUFDTkMsS0FBSztRQUNQO0tBQ0Q7SUFFRCxxQkFDRSw4REFBQ0M7OzBCQUNDLDhEQUFDQTtnQkFDQ0MsV0FBVTtnQkFDVkMsT0FBTztvQkFBRUMsU0FBUztvQkFBUUMsS0FBSztnQkFBTzs7a0NBRXRDLDhEQUFDakIsbURBQUtBO3dCQUFDa0IsS0FBSTt3QkFBV0MsUUFBTzs7Ozs7O29CQUM1QlYsTUFBTVcsR0FBRyxDQUFDLENBQUNDLE9BQVM7d0JBQ25CLHFCQUNFLDhEQUFDUjs0QkFDQ0MsV0FBVTs0QkFFVlEsVUFBUzs0QkFDVEMsU0FBUyxJQUFNO2dDQUNiZixPQUFPZ0IsSUFBSSxDQUFDSCxLQUFLVCxHQUFHOzRCQUN0QjtzQ0FFQ1MsS0FBS1gsS0FBSzsyQkFOTlcsS0FBS1gsS0FBSzs7Ozs7b0JBU3JCOzs7Ozs7OzBCQUVGLDhEQUFDRztnQkFBSUMsV0FBVTswQkFBU1Y7Ozs7Ozs7Ozs7OztBQUc5QixDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGtwYWdlLy4vY29tcG9uZW50cy9sYXlvdXQuanM/MjlhNyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBpbXBvcnQgJ3ByaW1lcmVhY3QvcmVzb3VyY2VzL3ByaW1lcmVhY3QuY3NzJzsgLy8gY29yZSBjc3NcclxuaW1wb3J0ICdwcmltZWljb25zL3ByaW1laWNvbnMuY3NzJzsgLy8gaWNvbnNcclxuaW1wb3J0ICdwcmltZWZsZXgvcHJpbWVmbGV4LmNzcyc7XHJcblxyXG5pbXBvcnQgeyBJbWFnZSB9IGZyb20gJ3ByaW1lcmVhY3QvaW1hZ2UnO1xyXG5cclxuaW1wb3J0IHsgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IHVzZVJvdXRlciB9IGZyb20gJ25leHQvcm91dGVyJztcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBMYXlvdXQoeyBjaGlsZHJlbiwgYWN0aXZlIH0pIHtcclxuICBjb25zdCBbYWN0aXZlSW5kZXgsIHNldEFjdGl2ZUluZGV4XSA9IHVzZVN0YXRlKGFjdGl2ZSk7XHJcbiAgY29uc3Qgcm91dGVyID0gdXNlUm91dGVyKCk7XHJcblxyXG4gIGNvbnN0IG1vZGVsID0gW1xyXG4gICAge1xyXG4gICAgICBsYWJlbDogJ19hYm91dCcsXHJcbiAgICAgIGljb246ICdwaS11c2VyJyxcclxuICAgICAgdXJsOiAnLycsXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBsYWJlbDogJ19waG90b3MnLFxyXG4gICAgICBpY29uOiAncGktY2FtZXJhJyxcclxuICAgICAgdXJsOiAnL3Bob3RvJyxcclxuICAgIH0sXHJcbiAgXTtcclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDxkaXY+XHJcbiAgICAgIDxkaXZcclxuICAgICAgICBjbGFzc05hbWU9XCJmbGV4IGp1c3RpZnktY29udGVudC1jZW50ZXIgZmxleC13cmFwIGhlYWRlclwiXHJcbiAgICAgICAgc3R5bGU9e3sgZGlzcGxheTogJ2ZsZXgnLCBnYXA6ICcxMHB4JyB9fVxyXG4gICAgICA+XHJcbiAgICAgICAgPEltYWdlIHNyYz1cImsxMDIuc3ZnXCIgaGVpZ2h0PVwiNDBcIj48L0ltYWdlPlxyXG4gICAgICAgIHttb2RlbC5tYXAoKGl0ZW0pID0+IHtcclxuICAgICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgICBjbGFzc05hbWU9XCJidXR0b25cIlxyXG4gICAgICAgICAgICAgIGtleT17aXRlbS5sYWJlbH1cclxuICAgICAgICAgICAgICBzZXZlcml0eT1cInNlY29uZGFyeVwiXHJcbiAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcm91dGVyLnB1c2goaXRlbS51cmwpO1xyXG4gICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICB7aXRlbS5sYWJlbH1cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICApO1xyXG4gICAgICAgIH0pfVxyXG4gICAgICA8L2Rpdj5cclxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJwYXBlclwiPntjaGlsZHJlbn08L2Rpdj5cclxuICAgIDwvZGl2PlxyXG4gICk7XHJcbn1cclxuIl0sIm5hbWVzIjpbIkltYWdlIiwidXNlU3RhdGUiLCJ1c2VSb3V0ZXIiLCJMYXlvdXQiLCJjaGlsZHJlbiIsImFjdGl2ZSIsImFjdGl2ZUluZGV4Iiwic2V0QWN0aXZlSW5kZXgiLCJyb3V0ZXIiLCJtb2RlbCIsImxhYmVsIiwiaWNvbiIsInVybCIsImRpdiIsImNsYXNzTmFtZSIsInN0eWxlIiwiZGlzcGxheSIsImdhcCIsInNyYyIsImhlaWdodCIsIm1hcCIsIml0ZW0iLCJzZXZlcml0eSIsIm9uQ2xpY2siLCJwdXNoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./components/layout.js\n");

/***/ }),

/***/ "./pages/_app.js":
/*!***********************!*\
  !*** ./pages/_app.js ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ App)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _style_main_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../style/main.scss */ \"./style/main.scss\");\n/* harmony import */ var _style_main_scss__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_style_main_scss__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _style_prism_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../style/prism.css */ \"./style/prism.css\");\n/* harmony import */ var _style_prism_css__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_style_prism_css__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _components_layout__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../components/layout */ \"./components/layout.js\");\n/* harmony import */ var next_head__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! next/head */ \"next/head\");\n/* harmony import */ var next_head__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(next_head__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _style_prism__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../style/prism */ \"./style/prism.js\");\n/* harmony import */ var _style_prism__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_style_prism__WEBPACK_IMPORTED_MODULE_5__);\n\n\n\n\n\n\nfunction App({ Component , pageProps  }) {\n    // prism();\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_layout__WEBPACK_IMPORTED_MODULE_3__.Layout, {\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)((next_head__WEBPACK_IMPORTED_MODULE_4___default()), {\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"link\", {\n                    rel: \"icon\",\n                    href: \"/k102.svg\",\n                    type: \"image/svg+xml\"\n                }, void 0, false, {\n                    fileName: \"C:\\\\Users\\\\k102\\\\Documents\\\\workspace\\\\tkPage\\\\pages\\\\_app.js\",\n                    lineNumber: 11,\n                    columnNumber: 9\n                }, this)\n            }, void 0, false, {\n                fileName: \"C:\\\\Users\\\\k102\\\\Documents\\\\workspace\\\\tkPage\\\\pages\\\\_app.js\",\n                lineNumber: 10,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(Component, {\n                ...pageProps\n            }, void 0, false, {\n                fileName: \"C:\\\\Users\\\\k102\\\\Documents\\\\workspace\\\\tkPage\\\\pages\\\\_app.js\",\n                lineNumber: 13,\n                columnNumber: 7\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"C:\\\\Users\\\\k102\\\\Documents\\\\workspace\\\\tkPage\\\\pages\\\\_app.js\",\n        lineNumber: 9,\n        columnNumber: 5\n    }, this);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9wYWdlcy9fYXBwLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBNEI7QUFDQTtBQUNrQjtBQUNqQjtBQUNNO0FBQ3BCLFNBQVNHLElBQUksRUFBRUMsVUFBUyxFQUFFQyxVQUFTLEVBQUUsRUFBRTtJQUNwRCxXQUFXO0lBQ1gscUJBQ0UsOERBQUNMLHNEQUFNQTs7MEJBQ0wsOERBQUNDLGtEQUFJQTswQkFDSCw0RUFBQ0s7b0JBQUtDLEtBQUk7b0JBQU9DLE1BQUs7b0JBQVlDLE1BQUs7Ozs7Ozs7Ozs7OzBCQUV6Qyw4REFBQ0w7Z0JBQVcsR0FBR0MsU0FBUzs7Ozs7Ozs7Ozs7O0FBSTlCLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90a3BhZ2UvLi9wYWdlcy9fYXBwLmpzP2UwYWQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICcuLi9zdHlsZS9tYWluLnNjc3MnO1xyXG5pbXBvcnQgJy4uL3N0eWxlL3ByaXNtLmNzcyc7XHJcbmltcG9ydCB7IExheW91dCB9IGZyb20gJy4uL2NvbXBvbmVudHMvbGF5b3V0JztcclxuaW1wb3J0IEhlYWQgZnJvbSAnbmV4dC9oZWFkJztcclxuaW1wb3J0IHByaXNtIGZyb20gJy4uL3N0eWxlL3ByaXNtJztcclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gQXBwKHsgQ29tcG9uZW50LCBwYWdlUHJvcHMgfSkge1xyXG4gIC8vIHByaXNtKCk7XHJcbiAgcmV0dXJuIChcclxuICAgIDxMYXlvdXQ+XHJcbiAgICAgIDxIZWFkPlxyXG4gICAgICAgIDxsaW5rIHJlbD1cImljb25cIiBocmVmPVwiL2sxMDIuc3ZnXCIgdHlwZT1cImltYWdlL3N2Zyt4bWxcIj48L2xpbms+XHJcbiAgICAgIDwvSGVhZD5cclxuICAgICAgPENvbXBvbmVudCB7Li4ucGFnZVByb3BzfSAvPlxyXG4gICAgICB7LyogPHNjcmlwdCBzcmM9XCIuLi9zdHlsZS9wcmlzbS5qc1wiPjwvc2NyaXB0PiAqL31cclxuICAgIDwvTGF5b3V0PlxyXG4gICk7XHJcbn1cclxuIl0sIm5hbWVzIjpbIkxheW91dCIsIkhlYWQiLCJwcmlzbSIsIkFwcCIsIkNvbXBvbmVudCIsInBhZ2VQcm9wcyIsImxpbmsiLCJyZWwiLCJocmVmIiwidHlwZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./pages/_app.js\n");

/***/ }),

/***/ "./style/prism.js":
/*!************************!*\
  !*** ./style/prism.js ***!
  \************************/
/***/ ((module) => {

"use strict";
eval("/* PrismJS 1.29.0\nhttps://prismjs.com/download.html#themes=prism&languages=markup+css+clike+javascript+abap+abnf+actionscript+ada+agda+al+antlr4+apacheconf+apex+apl+applescript+aql+arduino+arff+armasm+arturo+asciidoc+aspnet+asm6502+asmatmel+autohotkey+autoit+avisynth+avro-idl+awk+bash+basic+batch+bbcode+bbj+bicep+birb+bison+bnf+bqn+brainfuck+brightscript+bro+bsl+c+csharp+cpp+cfscript+chaiscript+cil+cilkc+cilkcpp+clojure+cmake+cobol+coffeescript+concurnas+csp+cooklang+coq+crystal+css-extras+csv+cue+cypher+d+dart+dataweave+dax+dhall+diff+django+dns-zone-file+docker+dot+ebnf+editorconfig+eiffel+ejs+elixir+elm+etlua+erb+erlang+excel-formula+fsharp+factor+false+firestore-security-rules+flow+fortran+ftl+gml+gap+gcode+gdscript+gedcom+gettext+gherkin+git+glsl+gn+linker-script+go+go-module+gradle+graphql+groovy+haml+handlebars+haskell+haxe+hcl+hlsl+hoon+http+hpkp+hsts+ichigojam+icon+icu-message-format+idris+ignore+inform7+ini+io+j+java+javadoc+javadoclike+javastacktrace+jexl+jolie+jq+jsdoc+js-extras+json+json5+jsonp+jsstacktrace+js-templates+julia+keepalived+keyman+kotlin+kumir+kusto+latex+latte+less+lilypond+liquid+lisp+livescript+llvm+log+lolcode+lua+magma+makefile+markdown+markup-templating+mata+matlab+maxscript+mel+mermaid+metafont+mizar+mongodb+monkey+moonscript+n1ql+n4js+nand2tetris-hdl+naniscript+nasm+neon+nevod+nginx+nim+nix+nsis+objectivec+ocaml+odin+opencl+openqasm+oz+parigp+parser+pascal+pascaligo+psl+pcaxis+peoplecode+perl+php+phpdoc+php-extras+plant-uml+plsql+powerquery+powershell+processing+prolog+promql+properties+protobuf+pug+puppet+pure+purebasic+purescript+python+qsharp+q+qml+qore+r+racket+cshtml+jsx+tsx+reason+regex+rego+renpy+rescript+rest+rip+roboconf+robotframework+ruby+rust+sas+sass+scss+scala+scheme+shell-session+smali+smalltalk+smarty+sml+solidity+solution-file+soy+sparql+splunk-spl+sqf+sql+squirrel+stan+stata+iecst+stylus+supercollider+swift+systemd+t4-templating+t4-cs+t4-vb+tap+tcl+tt2+textile+toml+tremor+turtle+twig+typescript+typoscript+unrealscript+uorazor+uri+v+vala+vbnet+velocity+verilog+vhdl+vim+visual-basic+warpscript+wasm+web-idl+wgsl+wiki+wolfram+wren+xeora+xml-doc+xojo+xquery+yaml+yang+zig */ \nvar _self =  false ? 0 : \"undefined\" != typeof WorkerGlobalScope && self instanceof WorkerGlobalScope ? self : {}, Prism = function(e) {\n    var n = /(?:^|\\s)lang(?:uage)?-([\\w-]+)(?=\\s|$)/i, t = 0, r = {}, a = {\n        manual: e.Prism && e.Prism.manual,\n        disableWorkerMessageHandler: e.Prism && e.Prism.disableWorkerMessageHandler,\n        util: {\n            encode: function e(n) {\n                return n instanceof i ? new i(n.type, e(n.content), n.alias) : Array.isArray(n) ? n.map(e) : n.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/\\u00a0/g, \" \");\n            },\n            type: function(e) {\n                return Object.prototype.toString.call(e).slice(8, -1);\n            },\n            objId: function(e) {\n                return e.__id || Object.defineProperty(e, \"__id\", {\n                    value: ++t\n                }), e.__id;\n            },\n            clone: function e(n, t) {\n                var r, i;\n                switch(t = t || {}, a.util.type(n)){\n                    case \"Object\":\n                        if (i = a.util.objId(n), t[i]) return t[i];\n                        for(var l in r = {}, t[i] = r, n)n.hasOwnProperty(l) && (r[l] = e(n[l], t));\n                        return r;\n                    case \"Array\":\n                        return i = a.util.objId(n), t[i] ? t[i] : (r = [], t[i] = r, n.forEach(function(n, a) {\n                            r[a] = e(n, t);\n                        }), r);\n                    default:\n                        return n;\n                }\n            },\n            getLanguage: function(e) {\n                for(; e;){\n                    var t = n.exec(e.className);\n                    if (t) return t[1].toLowerCase();\n                    e = e.parentElement;\n                }\n                return \"none\";\n            },\n            setLanguage: function(e, t) {\n                e.className = e.className.replace(RegExp(n, \"gi\"), \"\"), e.classList.add(\"language-\" + t);\n            },\n            currentScript: function() {\n                if (\"undefined\" == typeof document) return null;\n                if (\"currentScript\" in document) return document.currentScript;\n                try {\n                    throw new Error();\n                } catch (r) {\n                    var e = (/at [^(\\r\\n]*\\((.*):[^:]+:[^:]+\\)$/i.exec(r.stack) || [])[1];\n                    if (e) {\n                        var n = document.getElementsByTagName(\"script\");\n                        for(var t in n)if (n[t].src == e) return n[t];\n                    }\n                    return null;\n                }\n            },\n            active_state: function(e, n, t) {\n                for(var r = \"no-\" + n; e;){\n                    var a = e.classList;\n                    if (a.contains(n)) return !0;\n                    if (a.contains(r)) return !1;\n                    e = e.parentElement;\n                }\n                return !!t;\n            }\n        },\n        languages: {\n            plain: r,\n            plaintext: r,\n            text: r,\n            txt: r,\n            extend: function(e, n) {\n                var t = a.util.clone(a.languages[e]);\n                for(var r in n)t[r] = n[r];\n                return t;\n            },\n            insertBefore: function(e, n, t, r) {\n                var i = (r = r || a.languages)[e], l = {};\n                for(var o in i)if (i.hasOwnProperty(o)) {\n                    if (o == n) for(var s in t)t.hasOwnProperty(s) && (l[s] = t[s]);\n                    t.hasOwnProperty(o) || (l[o] = i[o]);\n                }\n                var u = r[e];\n                return r[e] = l, a.languages.DFS(a.languages, function(n, t) {\n                    t === u && n != e && (this[n] = l);\n                }), l;\n            },\n            DFS: function e(n, t, r, i) {\n                i = i || {};\n                var l = a.util.objId;\n                for(var o in n)if (n.hasOwnProperty(o)) {\n                    t.call(n, o, n[o], r || o);\n                    var s = n[o], u = a.util.type(s);\n                    \"Object\" !== u || i[l(s)] ? \"Array\" !== u || i[l(s)] || (i[l(s)] = !0, e(s, t, o, i)) : (i[l(s)] = !0, e(s, t, null, i));\n                }\n            }\n        },\n        plugins: {},\n        highlightAll: function(e, n) {\n            a.highlightAllUnder(document, e, n);\n        },\n        highlightAllUnder: function(e, n, t) {\n            var r = {\n                callback: t,\n                container: e,\n                selector: 'code[class*=\"language-\"], [class*=\"language-\"] code, code[class*=\"lang-\"], [class*=\"lang-\"] code'\n            };\n            a.hooks.run(\"before-highlightall\", r), r.elements = Array.prototype.slice.apply(r.container.querySelectorAll(r.selector)), a.hooks.run(\"before-all-elements-highlight\", r);\n            for(var i, l = 0; i = r.elements[l++];)a.highlightElement(i, !0 === n, r.callback);\n        },\n        highlightElement: function(n, t, r) {\n            var i = a.util.getLanguage(n), l = a.languages[i];\n            a.util.setLanguage(n, i);\n            var o = n.parentElement;\n            o && \"pre\" === o.nodeName.toLowerCase() && a.util.setLanguage(o, i);\n            var s = {\n                element: n,\n                language: i,\n                grammar: l,\n                code: n.textContent\n            };\n            function u(e) {\n                s.highlightedCode = e, a.hooks.run(\"before-insert\", s), s.element.innerHTML = s.highlightedCode, a.hooks.run(\"after-highlight\", s), a.hooks.run(\"complete\", s), r && r.call(s.element);\n            }\n            if (a.hooks.run(\"before-sanity-check\", s), (o = s.element.parentElement) && \"pre\" === o.nodeName.toLowerCase() && !o.hasAttribute(\"tabindex\") && o.setAttribute(\"tabindex\", \"0\"), !s.code) return a.hooks.run(\"complete\", s), void (r && r.call(s.element));\n            if (a.hooks.run(\"before-highlight\", s), s.grammar) if (t && e.Worker) {\n                var c = new Worker(a.filename);\n                c.onmessage = function(e) {\n                    u(e.data);\n                }, c.postMessage(JSON.stringify({\n                    language: s.language,\n                    code: s.code,\n                    immediateClose: !0\n                }));\n            } else u(a.highlight(s.code, s.grammar, s.language));\n            else u(a.util.encode(s.code));\n        },\n        highlight: function(e, n, t) {\n            var r = {\n                code: e,\n                grammar: n,\n                language: t\n            };\n            if (a.hooks.run(\"before-tokenize\", r), !r.grammar) throw new Error('The language \"' + r.language + '\" has no grammar.');\n            return r.tokens = a.tokenize(r.code, r.grammar), a.hooks.run(\"after-tokenize\", r), i.stringify(a.util.encode(r.tokens), r.language);\n        },\n        tokenize: function(e, n) {\n            var t = n.rest;\n            if (t) {\n                for(var r in t)n[r] = t[r];\n                delete n.rest;\n            }\n            var a = new s();\n            return u(a, a.head, e), o(e, a, n, a.head, 0), function(e) {\n                for(var n = [], t = e.head.next; t !== e.tail;)n.push(t.value), t = t.next;\n                return n;\n            }(a);\n        },\n        hooks: {\n            all: {},\n            add: function(e, n) {\n                var t = a.hooks.all;\n                t[e] = t[e] || [], t[e].push(n);\n            },\n            run: function(e, n) {\n                var t = a.hooks.all[e];\n                if (t && t.length) for(var r, i = 0; r = t[i++];)r(n);\n            }\n        },\n        Token: i\n    };\n    function i(e, n, t, r) {\n        this.type = e, this.content = n, this.alias = t, this.length = 0 | (r || \"\").length;\n    }\n    function l(e, n, t, r) {\n        e.lastIndex = n;\n        var a = e.exec(t);\n        if (a && r && a[1]) {\n            var i = a[1].length;\n            a.index += i, a[0] = a[0].slice(i);\n        }\n        return a;\n    }\n    function o(e, n, t, r, s, g) {\n        for(var f in t)if (t.hasOwnProperty(f) && t[f]) {\n            var h = t[f];\n            h = Array.isArray(h) ? h : [\n                h\n            ];\n            for(var d = 0; d < h.length; ++d){\n                if (g && g.cause == f + \",\" + d) return;\n                var v = h[d], p = v.inside, m = !!v.lookbehind, y = !!v.greedy, k = v.alias;\n                if (y && !v.pattern.global) {\n                    var x = v.pattern.toString().match(/[imsuy]*$/)[0];\n                    v.pattern = RegExp(v.pattern.source, x + \"g\");\n                }\n                for(var b = v.pattern || v, w = r.next, A = s; w !== n.tail && !(g && A >= g.reach); A += w.value.length, w = w.next){\n                    var E = w.value;\n                    if (n.length > e.length) return;\n                    if (!(E instanceof i)) {\n                        var P, L = 1;\n                        if (y) {\n                            if (!(P = l(b, A, e, m)) || P.index >= e.length) break;\n                            var S = P.index, O = P.index + P[0].length, j = A;\n                            for(j += w.value.length; S >= j;)j += (w = w.next).value.length;\n                            if (A = j -= w.value.length, w.value instanceof i) continue;\n                            for(var C = w; C !== n.tail && (j < O || \"string\" == typeof C.value); C = C.next)L++, j += C.value.length;\n                            L--, E = e.slice(A, j), P.index -= A;\n                        } else if (!(P = l(b, 0, E, m))) continue;\n                        S = P.index;\n                        var N = P[0], _ = E.slice(0, S), M = E.slice(S + N.length), W = A + E.length;\n                        g && W > g.reach && (g.reach = W);\n                        var z = w.prev;\n                        if (_ && (z = u(n, z, _), A += _.length), c(n, z, L), w = u(n, z, new i(f, p ? a.tokenize(N, p) : N, k, N)), M && u(n, w, M), L > 1) {\n                            var I = {\n                                cause: f + \",\" + d,\n                                reach: W\n                            };\n                            o(e, n, t, w.prev, A, I), g && I.reach > g.reach && (g.reach = I.reach);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    function s() {\n        var e = {\n            value: null,\n            prev: null,\n            next: null\n        }, n = {\n            value: null,\n            prev: e,\n            next: null\n        };\n        e.next = n, this.head = e, this.tail = n, this.length = 0;\n    }\n    function u(e, n, t) {\n        var r = n.next, a = {\n            value: t,\n            prev: n,\n            next: r\n        };\n        return n.next = a, r.prev = a, e.length++, a;\n    }\n    function c(e, n, t) {\n        for(var r = n.next, a = 0; a < t && r !== e.tail; a++)r = r.next;\n        n.next = r, r.prev = n, e.length -= a;\n    }\n    if (e.Prism = a, i.stringify = function e(n, t) {\n        if (\"string\" == typeof n) return n;\n        if (Array.isArray(n)) {\n            var r = \"\";\n            return n.forEach(function(n) {\n                r += e(n, t);\n            }), r;\n        }\n        var i = {\n            type: n.type,\n            content: e(n.content, t),\n            tag: \"span\",\n            classes: [\n                \"token\",\n                n.type\n            ],\n            attributes: {},\n            language: t\n        }, l = n.alias;\n        l && (Array.isArray(l) ? Array.prototype.push.apply(i.classes, l) : i.classes.push(l)), a.hooks.run(\"wrap\", i);\n        var o = \"\";\n        for(var s in i.attributes)o += \" \" + s + '=\"' + (i.attributes[s] || \"\").replace(/\"/g, \"&quot;\") + '\"';\n        return \"<\" + i.tag + ' class=\"' + i.classes.join(\" \") + '\"' + o + \">\" + i.content + \"</\" + i.tag + \">\";\n    }, !e.document) return e.addEventListener ? (a.disableWorkerMessageHandler || e.addEventListener(\"message\", function(n) {\n        var t = JSON.parse(n.data), r = t.language, i = t.code, l = t.immediateClose;\n        e.postMessage(a.highlight(i, a.languages[r], r)), l && e.close();\n    }, !1), a) : a;\n    var g = a.util.currentScript();\n    function f() {\n        a.manual || a.highlightAll();\n    }\n    if (g && (a.filename = g.src, g.hasAttribute(\"data-manual\") && (a.manual = !0)), !a.manual) {\n        var h = document.readyState;\n        \"loading\" === h || \"interactive\" === h && g && g.defer ? document.addEventListener(\"DOMContentLoaded\", f) : window.requestAnimationFrame ? window.requestAnimationFrame(f) : window.setTimeout(f, 16);\n    }\n    return a;\n}(_self);\n true && module.exports && (module.exports = Prism), \"undefined\" != typeof global && (global.Prism = Prism);\nPrism.languages.markup = {\n    comment: {\n        pattern: /<!--(?:(?!<!--)[\\s\\S])*?-->/,\n        greedy: !0\n    },\n    prolog: {\n        pattern: /<\\?[\\s\\S]+?\\?>/,\n        greedy: !0\n    },\n    doctype: {\n        pattern: /<!DOCTYPE(?:[^>\"'[\\]]|\"[^\"]*\"|'[^']*')+(?:\\[(?:[^<\"'\\]]|\"[^\"]*\"|'[^']*'|<(?!!--)|<!--(?:[^-]|-(?!->))*-->)*\\]\\s*)?>/i,\n        greedy: !0,\n        inside: {\n            \"internal-subset\": {\n                pattern: /(^[^\\[]*\\[)[\\s\\S]+(?=\\]>$)/,\n                lookbehind: !0,\n                greedy: !0,\n                inside: null\n            },\n            string: {\n                pattern: /\"[^\"]*\"|'[^']*'/,\n                greedy: !0\n            },\n            punctuation: /^<!|>$|[[\\]]/,\n            \"doctype-tag\": /^DOCTYPE/i,\n            name: /[^\\s<>'\"]+/\n        }\n    },\n    cdata: {\n        pattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\n        greedy: !0\n    },\n    tag: {\n        pattern: /<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s(?:\\s*[^\\s>\\/=]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))|(?=[\\s/>])))+)?\\s*\\/?>/,\n        greedy: !0,\n        inside: {\n            tag: {\n                pattern: /^<\\/?[^\\s>\\/]+/,\n                inside: {\n                    punctuation: /^<\\/?/,\n                    namespace: /^[^\\s>\\/:]+:/\n                }\n            },\n            \"special-attr\": [],\n            \"attr-value\": {\n                pattern: /=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+)/,\n                inside: {\n                    punctuation: [\n                        {\n                            pattern: /^=/,\n                            alias: \"attr-equals\"\n                        },\n                        {\n                            pattern: /^(\\s*)[\"']|[\"']$/,\n                            lookbehind: !0\n                        }\n                    ]\n                }\n            },\n            punctuation: /\\/?>/,\n            \"attr-name\": {\n                pattern: /[^\\s>\\/]+/,\n                inside: {\n                    namespace: /^[^\\s>\\/:]+:/\n                }\n            }\n        }\n    },\n    entity: [\n        {\n            pattern: /&[\\da-z]{1,8};/i,\n            alias: \"named-entity\"\n        },\n        /&#x?[\\da-f]{1,8};/i\n    ]\n}, Prism.languages.markup.tag.inside[\"attr-value\"].inside.entity = Prism.languages.markup.entity, Prism.languages.markup.doctype.inside[\"internal-subset\"].inside = Prism.languages.markup, Prism.hooks.add(\"wrap\", function(a) {\n    \"entity\" === a.type && (a.attributes.title = a.content.replace(/&amp;/, \"&\"));\n}), Object.defineProperty(Prism.languages.markup.tag, \"addInlined\", {\n    value: function(a, e) {\n        var s = {};\n        s[\"language-\" + e] = {\n            pattern: /(^<!\\[CDATA\\[)[\\s\\S]+?(?=\\]\\]>$)/i,\n            lookbehind: !0,\n            inside: Prism.languages[e]\n        }, s.cdata = /^<!\\[CDATA\\[|\\]\\]>$/i;\n        var t = {\n            \"included-cdata\": {\n                pattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\n                inside: s\n            }\n        };\n        t[\"language-\" + e] = {\n            pattern: /[\\s\\S]+/,\n            inside: Prism.languages[e]\n        };\n        var n = {};\n        n[a] = {\n            pattern: RegExp(\"(<__[^>]*>)(?:<!\\\\[CDATA\\\\[(?:[^\\\\]]|\\\\](?!\\\\]>))*\\\\]\\\\]>|(?!<!\\\\[CDATA\\\\[)[^])*?(?=</__>)\".replace(/__/g, function() {\n                return a;\n            }), \"i\"),\n            lookbehind: !0,\n            greedy: !0,\n            inside: t\n        }, Prism.languages.insertBefore(\"markup\", \"cdata\", n);\n    }\n}), Object.defineProperty(Prism.languages.markup.tag, \"addAttribute\", {\n    value: function(a, e) {\n        Prism.languages.markup.tag.inside[\"special-attr\"].push({\n            pattern: RegExp(\"(^|[\\\"'\\\\s])(?:\" + a + \")\\\\s*=\\\\s*(?:\\\"[^\\\"]*\\\"|'[^']*'|[^\\\\s'\\\">=]+(?=[\\\\s>]))\", \"i\"),\n            lookbehind: !0,\n            inside: {\n                \"attr-name\": /^[^\\s=]+/,\n                \"attr-value\": {\n                    pattern: /=[\\s\\S]+/,\n                    inside: {\n                        value: {\n                            pattern: /(^=\\s*([\"']|(?![\"'])))\\S[\\s\\S]*(?=\\2$)/,\n                            lookbehind: !0,\n                            alias: [\n                                e,\n                                \"language-\" + e\n                            ],\n                            inside: Prism.languages[e]\n                        },\n                        punctuation: [\n                            {\n                                pattern: /^=/,\n                                alias: \"attr-equals\"\n                            },\n                            /\"|'/\n                        ]\n                    }\n                }\n            }\n        });\n    }\n}), Prism.languages.html = Prism.languages.markup, Prism.languages.mathml = Prism.languages.markup, Prism.languages.svg = Prism.languages.markup, Prism.languages.xml = Prism.languages.extend(\"markup\", {}), Prism.languages.ssml = Prism.languages.xml, Prism.languages.atom = Prism.languages.xml, Prism.languages.rss = Prism.languages.xml;\n!function(s) {\n    var e = /(?:\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"|'(?:\\\\(?:\\r\\n|[\\s\\S])|[^'\\\\\\r\\n])*')/;\n    s.languages.css = {\n        comment: /\\/\\*[\\s\\S]*?\\*\\//,\n        atrule: {\n            pattern: RegExp(\"@[\\\\w-](?:[^;{\\\\s\\\"']|\\\\s+(?!\\\\s)|\" + e.source + \")*?(?:;|(?=\\\\s*\\\\{))\"),\n            inside: {\n                rule: /^@[\\w-]+/,\n                \"selector-function-argument\": {\n                    pattern: /(\\bselector\\s*\\(\\s*(?![\\s)]))(?:[^()\\s]|\\s+(?![\\s)])|\\((?:[^()]|\\([^()]*\\))*\\))+(?=\\s*\\))/,\n                    lookbehind: !0,\n                    alias: \"selector\"\n                },\n                keyword: {\n                    pattern: /(^|[^\\w-])(?:and|not|only|or)(?![\\w-])/,\n                    lookbehind: !0\n                }\n            }\n        },\n        url: {\n            pattern: RegExp(\"\\\\burl\\\\((?:\" + e.source + \"|(?:[^\\\\\\\\\\r\\n()\\\"']|\\\\\\\\[^])*)\\\\)\", \"i\"),\n            greedy: !0,\n            inside: {\n                function: /^url/i,\n                punctuation: /^\\(|\\)$/,\n                string: {\n                    pattern: RegExp(\"^\" + e.source + \"$\"),\n                    alias: \"url\"\n                }\n            }\n        },\n        selector: {\n            pattern: RegExp(\"(^|[{}\\\\s])[^{}\\\\s](?:[^{};\\\"'\\\\s]|\\\\s+(?![\\\\s{])|\" + e.source + \")*(?=\\\\s*\\\\{)\"),\n            lookbehind: !0\n        },\n        string: {\n            pattern: e,\n            greedy: !0\n        },\n        property: {\n            pattern: /(^|[^-\\w\\xA0-\\uFFFF])(?!\\s)[-_a-z\\xA0-\\uFFFF](?:(?!\\s)[-\\w\\xA0-\\uFFFF])*(?=\\s*:)/i,\n            lookbehind: !0\n        },\n        important: /!important\\b/i,\n        function: {\n            pattern: /(^|[^-a-z0-9])[-a-z0-9]+(?=\\()/i,\n            lookbehind: !0\n        },\n        punctuation: /[(){};:,]/\n    }, s.languages.css.atrule.inside.rest = s.languages.css;\n    var t = s.languages.markup;\n    t && (t.tag.addInlined(\"style\", \"css\"), t.tag.addAttribute(\"style\", \"css\"));\n}(Prism);\nPrism.languages.clike = {\n    comment: [\n        {\n            pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n            lookbehind: !0,\n            greedy: !0\n        },\n        {\n            pattern: /(^|[^\\\\:])\\/\\/.*/,\n            lookbehind: !0,\n            greedy: !0\n        }\n    ],\n    string: {\n        pattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n        greedy: !0\n    },\n    \"class-name\": {\n        pattern: /(\\b(?:class|extends|implements|instanceof|interface|new|trait)\\s+|\\bcatch\\s+\\()[\\w.\\\\]+/i,\n        lookbehind: !0,\n        inside: {\n            punctuation: /[.\\\\]/\n        }\n    },\n    keyword: /\\b(?:break|catch|continue|do|else|finally|for|function|if|in|instanceof|new|null|return|throw|try|while)\\b/,\n    boolean: /\\b(?:false|true)\\b/,\n    function: /\\b\\w+(?=\\()/,\n    number: /\\b0x[\\da-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,\n    operator: /[<>]=?|[!=]=?=?|--?|\\+\\+?|&&?|\\|\\|?|[?*/~^%]/,\n    punctuation: /[{}[\\];(),.:]/\n};\nPrism.languages.javascript = Prism.languages.extend(\"clike\", {\n    \"class-name\": [\n        Prism.languages.clike[\"class-name\"],\n        {\n            pattern: /(^|[^$\\w\\xA0-\\uFFFF])(?!\\s)[_$A-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\.(?:constructor|prototype))/,\n            lookbehind: !0\n        }\n    ],\n    keyword: [\n        {\n            pattern: /((?:^|\\})\\s*)catch\\b/,\n            lookbehind: !0\n        },\n        {\n            pattern: /(^|[^.]|\\.\\.\\.\\s*)\\b(?:as|assert(?=\\s*\\{)|async(?=\\s*(?:function\\b|\\(|[$\\w\\xA0-\\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally(?=\\s*(?:\\{|$))|for|from(?=\\s*(?:['\"]|$))|function|(?:get|set)(?=\\s*(?:[#\\[$\\w\\xA0-\\uFFFF]|$))|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\\b/,\n            lookbehind: !0\n        }\n    ],\n    function: /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*(?:\\.\\s*(?:apply|bind|call)\\s*)?\\()/,\n    number: {\n        pattern: RegExp(\"(^|[^\\\\w$])(?:NaN|Infinity|0[bB][01]+(?:_[01]+)*n?|0[oO][0-7]+(?:_[0-7]+)*n?|0[xX][\\\\dA-Fa-f]+(?:_[\\\\dA-Fa-f]+)*n?|\\\\d+(?:_\\\\d+)*n|(?:\\\\d+(?:_\\\\d+)*(?:\\\\.(?:\\\\d+(?:_\\\\d+)*)?)?|\\\\.\\\\d+(?:_\\\\d+)*)(?:[Ee][+-]?\\\\d+(?:_\\\\d+)*)?)(?![\\\\w$])\"),\n        lookbehind: !0\n    },\n    operator: /--|\\+\\+|\\*\\*=?|=>|&&=?|\\|\\|=?|[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\\.{3}|\\?\\?=?|\\?\\.?|[~:]/\n}), Prism.languages.javascript[\"class-name\"][0].pattern = /(\\b(?:class|extends|implements|instanceof|interface|new)\\s+)[\\w.\\\\]+/, Prism.languages.insertBefore(\"javascript\", \"keyword\", {\n    regex: {\n        pattern: RegExp(\"((?:^|[^$\\\\w\\\\xA0-\\\\uFFFF.\\\"'\\\\])\\\\s]|\\\\b(?:return|yield))\\\\s*)/(?:(?:\\\\[(?:[^\\\\]\\\\\\\\\\r\\n]|\\\\\\\\.)*\\\\]|\\\\\\\\.|[^/\\\\\\\\\\\\[\\r\\n])+/[dgimyus]{0,7}|(?:\\\\[(?:[^[\\\\]\\\\\\\\\\r\\n]|\\\\\\\\.|\\\\[(?:[^[\\\\]\\\\\\\\\\r\\n]|\\\\\\\\.|\\\\[(?:[^[\\\\]\\\\\\\\\\r\\n]|\\\\\\\\.)*\\\\])*\\\\])*\\\\]|\\\\\\\\.|[^/\\\\\\\\\\\\[\\r\\n])+/[dgimyus]{0,7}v[dgimyus]{0,7})(?=(?:\\\\s|/\\\\*(?:[^*]|\\\\*(?!/))*\\\\*/)*(?:$|[\\r\\n,.;:})\\\\]]|//))\"),\n        lookbehind: !0,\n        greedy: !0,\n        inside: {\n            \"regex-source\": {\n                pattern: /^(\\/)[\\s\\S]+(?=\\/[a-z]*$)/,\n                lookbehind: !0,\n                alias: \"language-regex\",\n                inside: Prism.languages.regex\n            },\n            \"regex-delimiter\": /^\\/|\\/$/,\n            \"regex-flags\": /^[a-z]+$/\n        }\n    },\n    \"function-variable\": {\n        pattern: /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*[=:]\\s*(?:async\\s*)?(?:\\bfunction\\b|(?:\\((?:[^()]|\\([^()]*\\))*\\)|(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)\\s*=>))/,\n        alias: \"function\"\n    },\n    parameter: [\n        {\n            pattern: /(function(?:\\s+(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)?\\s*\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\))/,\n            lookbehind: !0,\n            inside: Prism.languages.javascript\n        },\n        {\n            pattern: /(^|[^$\\w\\xA0-\\uFFFF])(?!\\s)[_$a-z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*=>)/i,\n            lookbehind: !0,\n            inside: Prism.languages.javascript\n        },\n        {\n            pattern: /(\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\)\\s*=>)/,\n            lookbehind: !0,\n            inside: Prism.languages.javascript\n        },\n        {\n            pattern: /((?:\\b|\\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\\w\\xA0-\\uFFFF]))(?:(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*)\\(\\s*|\\]\\s*\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\)\\s*\\{)/,\n            lookbehind: !0,\n            inside: Prism.languages.javascript\n        }\n    ],\n    constant: /\\b[A-Z](?:[A-Z_]|\\dx?)*\\b/\n}), Prism.languages.insertBefore(\"javascript\", \"string\", {\n    hashbang: {\n        pattern: /^#!.*/,\n        greedy: !0,\n        alias: \"comment\"\n    },\n    \"template-string\": {\n        pattern: /`(?:\\\\[\\s\\S]|\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}|(?!\\$\\{)[^\\\\`])*`/,\n        greedy: !0,\n        inside: {\n            \"template-punctuation\": {\n                pattern: /^`|`$/,\n                alias: \"string\"\n            },\n            interpolation: {\n                pattern: /((?:^|[^\\\\])(?:\\\\{2})*)\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}/,\n                lookbehind: !0,\n                inside: {\n                    \"interpolation-punctuation\": {\n                        pattern: /^\\$\\{|\\}$/,\n                        alias: \"punctuation\"\n                    },\n                    rest: Prism.languages.javascript\n                }\n            },\n            string: /[\\s\\S]+/\n        }\n    },\n    \"string-property\": {\n        pattern: /((?:^|[,{])[ \\t]*)([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\2)[^\\\\\\r\\n])*\\2(?=\\s*:)/m,\n        lookbehind: !0,\n        greedy: !0,\n        alias: \"property\"\n    }\n}), Prism.languages.insertBefore(\"javascript\", \"operator\", {\n    \"literal-property\": {\n        pattern: /((?:^|[,{])[ \\t]*)(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*:)/m,\n        lookbehind: !0,\n        alias: \"property\"\n    }\n}), Prism.languages.markup && (Prism.languages.markup.tag.addInlined(\"script\", \"javascript\"), Prism.languages.markup.tag.addAttribute(\"on(?:abort|blur|change|click|composition(?:end|start|update)|dblclick|error|focus(?:in|out)?|key(?:down|up)|load|mouse(?:down|enter|leave|move|out|over|up)|reset|resize|scroll|select|slotchange|submit|unload|wheel)\", \"javascript\")), Prism.languages.js = Prism.languages.javascript;\nPrism.languages.abap = {\n    comment: /^\\*.*/m,\n    string: /(`|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    \"string-template\": {\n        pattern: /([|}])(?:\\\\.|[^\\\\|{\\r\\n])*(?=[|{])/,\n        lookbehind: !0,\n        alias: \"string\"\n    },\n    \"eol-comment\": {\n        pattern: /(^|\\s)\".*/m,\n        lookbehind: !0,\n        alias: \"comment\"\n    },\n    keyword: {\n        pattern: /(\\s|\\.|^)(?:\\*-INPUT|\\?TO|ABAP-SOURCE|ABBREVIATED|ABS|ABSTRACT|ACCEPT|ACCEPTING|ACCESSPOLICY|ACCORDING|ACOS|ACTIVATION|ACTUAL|ADD|ADD-CORRESPONDING|ADJACENT|AFTER|ALIAS|ALIASES|ALIGN|ALL|ALLOCATE|ALPHA|ANALYSIS|ANALYZER|AND|ANY|APPEND|APPENDAGE|APPENDING|APPLICATION|ARCHIVE|AREA|ARITHMETIC|AS|ASCENDING|ASIN|ASPECT|ASSERT|ASSIGN|ASSIGNED|ASSIGNING|ASSOCIATION|ASYNCHRONOUS|AT|ATAN|ATTRIBUTES|AUTHORITY|AUTHORITY-CHECK|AVG|BACK|BACKGROUND|BACKUP|BACKWARD|BADI|BASE|BEFORE|BEGIN|BETWEEN|BIG|BINARY|BINDING|BIT|BIT-AND|BIT-NOT|BIT-OR|BIT-XOR|BLACK|BLANK|BLANKS|BLOB|BLOCK|BLOCKS|BLUE|BOUND|BOUNDARIES|BOUNDS|BOXED|BREAK-POINT|BT|BUFFER|BY|BYPASSING|BYTE|BYTE-CA|BYTE-CN|BYTE-CO|BYTE-CS|BYTE-NA|BYTE-NS|BYTE-ORDER|C|CA|CALL|CALLING|CASE|CAST|CASTING|CATCH|CEIL|CENTER|CENTERED|CHAIN|CHAIN-INPUT|CHAIN-REQUEST|CHANGE|CHANGING|CHANNELS|CHAR-TO-HEX|CHARACTER|CHARLEN|CHECK|CHECKBOX|CIRCULAR|CI_|CLASS|CLASS-CODING|CLASS-DATA|CLASS-EVENTS|CLASS-METHODS|CLASS-POOL|CLEANUP|CLEAR|CLIENT|CLOB|CLOCK|CLOSE|CN|CNT|CO|COALESCE|CODE|CODING|COLLECT|COLOR|COLUMN|COLUMNS|COL_BACKGROUND|COL_GROUP|COL_HEADING|COL_KEY|COL_NEGATIVE|COL_NORMAL|COL_POSITIVE|COL_TOTAL|COMMENT|COMMENTS|COMMIT|COMMON|COMMUNICATION|COMPARING|COMPONENT|COMPONENTS|COMPRESSION|COMPUTE|CONCAT|CONCATENATE|COND|CONDENSE|CONDITION|CONNECT|CONNECTION|CONSTANTS|CONTEXT|CONTEXTS|CONTINUE|CONTROL|CONTROLS|CONV|CONVERSION|CONVERT|COPIES|COPY|CORRESPONDING|COS|COSH|COUNT|COUNTRY|COVER|CP|CPI|CREATE|CREATING|CRITICAL|CS|CURRENCY|CURRENCY_CONVERSION|CURRENT|CURSOR|CURSOR-SELECTION|CUSTOMER|CUSTOMER-FUNCTION|DANGEROUS|DATA|DATABASE|DATAINFO|DATASET|DATE|DAYLIGHT|DBMAXLEN|DD\\/MM\\/YY|DD\\/MM\\/YYYY|DDMMYY|DEALLOCATE|DECIMALS|DECIMAL_SHIFT|DECLARATIONS|DEEP|DEFAULT|DEFERRED|DEFINE|DEFINING|DEFINITION|DELETE|DELETING|DEMAND|DEPARTMENT|DESCENDING|DESCRIBE|DESTINATION|DETAIL|DIALOG|DIRECTORY|DISCONNECT|DISPLAY|DISPLAY-MODE|DISTANCE|DISTINCT|DIV|DIVIDE|DIVIDE-CORRESPONDING|DIVISION|DO|DUMMY|DUPLICATE|DUPLICATES|DURATION|DURING|DYNAMIC|DYNPRO|E|EACH|EDIT|EDITOR-CALL|ELSE|ELSEIF|EMPTY|ENABLED|ENABLING|ENCODING|END|END-ENHANCEMENT-SECTION|END-LINES|END-OF-DEFINITION|END-OF-FILE|END-OF-PAGE|END-OF-SELECTION|ENDAT|ENDCASE|ENDCATCH|ENDCHAIN|ENDCLASS|ENDDO|ENDENHANCEMENT|ENDEXEC|ENDFOR|ENDFORM|ENDFUNCTION|ENDIAN|ENDIF|ENDING|ENDINTERFACE|ENDLOOP|ENDMETHOD|ENDMODULE|ENDON|ENDPROVIDE|ENDSELECT|ENDTRY|ENDWHILE|ENGINEERING|ENHANCEMENT|ENHANCEMENT-POINT|ENHANCEMENT-SECTION|ENHANCEMENTS|ENTRIES|ENTRY|ENVIRONMENT|EQ|EQUAL|EQUIV|ERRORMESSAGE|ERRORS|ESCAPE|ESCAPING|EVENT|EVENTS|EXACT|EXCEPT|EXCEPTION|EXCEPTION-TABLE|EXCEPTIONS|EXCLUDE|EXCLUDING|EXEC|EXECUTE|EXISTS|EXIT|EXIT-COMMAND|EXP|EXPAND|EXPANDING|EXPIRATION|EXPLICIT|EXPONENT|EXPORT|EXPORTING|EXTEND|EXTENDED|EXTENSION|EXTRACT|FAIL|FETCH|FIELD|FIELD-GROUPS|FIELD-SYMBOL|FIELD-SYMBOLS|FIELDS|FILE|FILTER|FILTER-TABLE|FILTERS|FINAL|FIND|FIRST|FIRST-LINE|FIXED-POINT|FKEQ|FKGE|FLOOR|FLUSH|FONT|FOR|FORM|FORMAT|FORWARD|FOUND|FRAC|FRAME|FRAMES|FREE|FRIENDS|FROM|FUNCTION|FUNCTION-POOL|FUNCTIONALITY|FURTHER|GAPS|GE|GENERATE|GET|GIVING|GKEQ|GKGE|GLOBAL|GRANT|GREATER|GREEN|GROUP|GROUPS|GT|HANDLE|HANDLER|HARMLESS|HASHED|HAVING|HDB|HEAD-LINES|HEADER|HEADERS|HEADING|HELP-ID|HELP-REQUEST|HIDE|HIGH|HINT|HOLD|HOTSPOT|I|ICON|ID|IDENTIFICATION|IDENTIFIER|IDS|IF|IGNORE|IGNORING|IMMEDIATELY|IMPLEMENTATION|IMPLEMENTATIONS|IMPLEMENTED|IMPLICIT|IMPORT|IMPORTING|IN|INACTIVE|INCL|INCLUDE|INCLUDES|INCLUDING|INCREMENT|INDEX|INDEX-LINE|INFOTYPES|INHERITING|INIT|INITIAL|INITIALIZATION|INNER|INOUT|INPUT|INSERT|INSTANCES|INTENSIFIED|INTERFACE|INTERFACE-POOL|INTERFACES|INTERNAL|INTERVALS|INTO|INVERSE|INVERTED-DATE|IS|ISO|ITERATOR|ITNO|JOB|JOIN|KEEP|KEEPING|KERNEL|KEY|KEYS|KEYWORDS|KIND|LANGUAGE|LAST|LATE|LAYOUT|LE|LEADING|LEAVE|LEFT|LEFT-JUSTIFIED|LEFTPLUS|LEFTSPACE|LEGACY|LENGTH|LESS|LET|LEVEL|LEVELS|LIKE|LINE|LINE-COUNT|LINE-SELECTION|LINE-SIZE|LINEFEED|LINES|LIST|LIST-PROCESSING|LISTBOX|LITTLE|LLANG|LOAD|LOAD-OF-PROGRAM|LOB|LOCAL|LOCALE|LOCATOR|LOG|LOG-POINT|LOG10|LOGFILE|LOGICAL|LONG|LOOP|LOW|LOWER|LPAD|LPI|LT|M|MAIL|MAIN|MAJOR-ID|MAPPING|MARGIN|MARK|MASK|MATCH|MATCHCODE|MAX|MAXIMUM|MEDIUM|MEMBERS|MEMORY|MESH|MESSAGE|MESSAGE-ID|MESSAGES|MESSAGING|METHOD|METHODS|MIN|MINIMUM|MINOR-ID|MM\\/DD\\/YY|MM\\/DD\\/YYYY|MMDDYY|MOD|MODE|MODIF|MODIFIER|MODIFY|MODULE|MOVE|MOVE-CORRESPONDING|MULTIPLY|MULTIPLY-CORRESPONDING|NA|NAME|NAMETAB|NATIVE|NB|NE|NESTED|NESTING|NEW|NEW-LINE|NEW-PAGE|NEW-SECTION|NEXT|NO|NO-DISPLAY|NO-EXTENSION|NO-GAP|NO-GAPS|NO-GROUPING|NO-HEADING|NO-SCROLLING|NO-SIGN|NO-TITLE|NO-TOPOFPAGE|NO-ZERO|NODE|NODES|NON-UNICODE|NON-UNIQUE|NOT|NP|NS|NULL|NUMBER|NUMOFCHAR|O|OBJECT|OBJECTS|OBLIGATORY|OCCURRENCE|OCCURRENCES|OCCURS|OF|OFF|OFFSET|OLE|ON|ONLY|OPEN|OPTION|OPTIONAL|OPTIONS|OR|ORDER|OTHER|OTHERS|OUT|OUTER|OUTPUT|OUTPUT-LENGTH|OVERFLOW|OVERLAY|PACK|PACKAGE|PAD|PADDING|PAGE|PAGES|PARAMETER|PARAMETER-TABLE|PARAMETERS|PART|PARTIALLY|PATTERN|PERCENTAGE|PERFORM|PERFORMING|PERSON|PF|PF-STATUS|PINK|PLACES|POOL|POSITION|POS_HIGH|POS_LOW|PRAGMAS|PRECOMPILED|PREFERRED|PRESERVING|PRIMARY|PRINT|PRINT-CONTROL|PRIORITY|PRIVATE|PROCEDURE|PROCESS|PROGRAM|PROPERTY|PROTECTED|PROVIDE|PUBLIC|PUSHBUTTON|PUT|QUEUE-ONLY|QUICKINFO|RADIOBUTTON|RAISE|RAISING|RANGE|RANGES|RAW|READ|READ-ONLY|READER|RECEIVE|RECEIVED|RECEIVER|RECEIVING|RED|REDEFINITION|REDUCE|REDUCED|REF|REFERENCE|REFRESH|REGEX|REJECT|REMOTE|RENAMING|REPLACE|REPLACEMENT|REPLACING|REPORT|REQUEST|REQUESTED|RESERVE|RESET|RESOLUTION|RESPECTING|RESPONSIBLE|RESULT|RESULTS|RESUMABLE|RESUME|RETRY|RETURN|RETURNCODE|RETURNING|RIGHT|RIGHT-JUSTIFIED|RIGHTPLUS|RIGHTSPACE|RISK|RMC_COMMUNICATION_FAILURE|RMC_INVALID_STATUS|RMC_SYSTEM_FAILURE|ROLE|ROLLBACK|ROUND|ROWS|RTTI|RUN|SAP|SAP-SPOOL|SAVING|SCALE_PRESERVING|SCALE_PRESERVING_SCIENTIFIC|SCAN|SCIENTIFIC|SCIENTIFIC_WITH_LEADING_ZERO|SCREEN|SCROLL|SCROLL-BOUNDARY|SCROLLING|SEARCH|SECONDARY|SECONDS|SECTION|SELECT|SELECT-OPTIONS|SELECTION|SELECTION-SCREEN|SELECTION-SET|SELECTION-SETS|SELECTION-TABLE|SELECTIONS|SELECTOR|SEND|SEPARATE|SEPARATED|SET|SHARED|SHIFT|SHORT|SHORTDUMP-ID|SIGN|SIGN_AS_POSTFIX|SIMPLE|SIN|SINGLE|SINH|SIZE|SKIP|SKIPPING|SMART|SOME|SORT|SORTABLE|SORTED|SOURCE|SPACE|SPECIFIED|SPLIT|SPOOL|SPOTS|SQL|SQLSCRIPT|SQRT|STABLE|STAMP|STANDARD|START-OF-SELECTION|STARTING|STATE|STATEMENT|STATEMENTS|STATIC|STATICS|STATUSINFO|STEP-LOOP|STOP|STRLEN|STRUCTURE|STRUCTURES|STYLE|SUBKEY|SUBMATCHES|SUBMIT|SUBROUTINE|SUBSCREEN|SUBSTRING|SUBTRACT|SUBTRACT-CORRESPONDING|SUFFIX|SUM|SUMMARY|SUMMING|SUPPLIED|SUPPLY|SUPPRESS|SWITCH|SWITCHSTATES|SYMBOL|SYNCPOINTS|SYNTAX|SYNTAX-CHECK|SYNTAX-TRACE|SYSTEM-CALL|SYSTEM-EXCEPTIONS|SYSTEM-EXIT|TAB|TABBED|TABLE|TABLES|TABLEVIEW|TABSTRIP|TAN|TANH|TARGET|TASK|TASKS|TEST|TESTING|TEXT|TEXTPOOL|THEN|THROW|TIME|TIMES|TIMESTAMP|TIMEZONE|TITLE|TITLE-LINES|TITLEBAR|TO|TOKENIZATION|TOKENS|TOP-LINES|TOP-OF-PAGE|TRACE-FILE|TRACE-TABLE|TRAILING|TRANSACTION|TRANSFER|TRANSFORMATION|TRANSLATE|TRANSPORTING|TRMAC|TRUNC|TRUNCATE|TRUNCATION|TRY|TYPE|TYPE-POOL|TYPE-POOLS|TYPES|ULINE|UNASSIGN|UNDER|UNICODE|UNION|UNIQUE|UNIT|UNIT_CONVERSION|UNIX|UNPACK|UNTIL|UNWIND|UP|UPDATE|UPPER|USER|USER-COMMAND|USING|UTF-8|VALID|VALUE|VALUE-REQUEST|VALUES|VARY|VARYING|VERIFICATION-MESSAGE|VERSION|VIA|VIEW|VISIBLE|WAIT|WARNING|WHEN|WHENEVER|WHERE|WHILE|WIDTH|WINDOW|WINDOWS|WITH|WITH-HEADING|WITH-TITLE|WITHOUT|WORD|WORK|WRITE|WRITER|X|XML|XOR|XSD|XSTRLEN|YELLOW|YES|YYMMDD|Z|ZERO|ZONE)(?![\\w-])/i,\n        lookbehind: !0\n    },\n    number: /\\b\\d+\\b/,\n    operator: {\n        pattern: /(\\s)(?:\\*\\*?|<[=>]?|>=?|\\?=|[-+\\/=])(?=\\s)/,\n        lookbehind: !0\n    },\n    \"string-operator\": {\n        pattern: /(\\s)&&?(?=\\s)/,\n        lookbehind: !0,\n        alias: \"keyword\"\n    },\n    \"token-operator\": [\n        {\n            pattern: /(\\w)(?:->?|=>|[~|{}])(?=\\w)/,\n            lookbehind: !0,\n            alias: \"punctuation\"\n        },\n        {\n            pattern: /[|{}]/,\n            alias: \"punctuation\"\n        }\n    ],\n    punctuation: /[,.:()]/\n};\n!function(n) {\n    var i = \"(?:ALPHA|BIT|CHAR|CR|CRLF|CTL|DIGIT|DQUOTE|HEXDIG|HTAB|LF|LWSP|OCTET|SP|VCHAR|WSP)\";\n    n.languages.abnf = {\n        comment: /;.*/,\n        string: {\n            pattern: /(?:%[is])?\"[^\"\\n\\r]*\"/,\n            greedy: !0,\n            inside: {\n                punctuation: /^%[is]/\n            }\n        },\n        range: {\n            pattern: /%(?:b[01]+-[01]+|d\\d+-\\d+|x[A-F\\d]+-[A-F\\d]+)/i,\n            alias: \"number\"\n        },\n        terminal: {\n            pattern: /%(?:b[01]+(?:\\.[01]+)*|d\\d+(?:\\.\\d+)*|x[A-F\\d]+(?:\\.[A-F\\d]+)*)/i,\n            alias: \"number\"\n        },\n        repetition: {\n            pattern: /(^|[^\\w-])(?:\\d*\\*\\d*|\\d+)/,\n            lookbehind: !0,\n            alias: \"operator\"\n        },\n        definition: {\n            pattern: /(^[ \\t]*)(?:[a-z][\\w-]*|<[^<>\\r\\n]*>)(?=\\s*=)/m,\n            lookbehind: !0,\n            alias: \"keyword\",\n            inside: {\n                punctuation: /<|>/\n            }\n        },\n        \"core-rule\": {\n            pattern: RegExp(\"(?:(^|[^<\\\\w-])\" + i + \"|<\" + i + \">)(?![\\\\w-])\", \"i\"),\n            lookbehind: !0,\n            alias: [\n                \"rule\",\n                \"constant\"\n            ],\n            inside: {\n                punctuation: /<|>/\n            }\n        },\n        rule: {\n            pattern: /(^|[^<\\w-])[a-z][\\w-]*|<[^<>\\r\\n]*>/i,\n            lookbehind: !0,\n            inside: {\n                punctuation: /<|>/\n            }\n        },\n        operator: /=\\/?|\\//,\n        punctuation: /[()\\[\\]]/\n    };\n}(Prism);\nPrism.languages.actionscript = Prism.languages.extend(\"javascript\", {\n    keyword: /\\b(?:as|break|case|catch|class|const|default|delete|do|dynamic|each|else|extends|final|finally|for|function|get|if|implements|import|in|include|instanceof|interface|internal|is|namespace|native|new|null|override|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|use|var|void|while|with)\\b/,\n    operator: /\\+\\+|--|(?:[+\\-*\\/%^]|&&?|\\|\\|?|<<?|>>?>?|[!=]=?)=?|[~?@]/\n}), Prism.languages.actionscript[\"class-name\"].alias = \"function\", delete Prism.languages.actionscript.parameter, delete Prism.languages.actionscript[\"literal-property\"], Prism.languages.markup && Prism.languages.insertBefore(\"actionscript\", \"string\", {\n    xml: {\n        pattern: /(^|[^.])<\\/?\\w+(?:\\s+[^\\s>\\/=]+=(\"|')(?:\\\\[\\s\\S]|(?!\\2)[^\\\\])*\\2)*\\s*\\/?>/,\n        lookbehind: !0,\n        inside: Prism.languages.markup\n    }\n});\nPrism.languages.ada = {\n    comment: /--.*/,\n    string: /\"(?:\"\"|[^\"\\r\\f\\n])*\"/,\n    number: [\n        {\n            pattern: /\\b\\d(?:_?\\d)*#[\\dA-F](?:_?[\\dA-F])*(?:\\.[\\dA-F](?:_?[\\dA-F])*)?#(?:E[+-]?\\d(?:_?\\d)*)?/i\n        },\n        {\n            pattern: /\\b\\d(?:_?\\d)*(?:\\.\\d(?:_?\\d)*)?(?:E[+-]?\\d(?:_?\\d)*)?\\b/i\n        }\n    ],\n    attribute: {\n        pattern: /\\b'\\w+/,\n        alias: \"attr-name\"\n    },\n    keyword: /\\b(?:abort|abs|abstract|accept|access|aliased|all|and|array|at|begin|body|case|constant|declare|delay|delta|digits|do|else|elsif|end|entry|exception|exit|for|function|generic|goto|if|in|interface|is|limited|loop|mod|new|not|null|of|or|others|out|overriding|package|pragma|private|procedure|protected|raise|range|record|rem|renames|requeue|return|reverse|select|separate|some|subtype|synchronized|tagged|task|terminate|then|type|until|use|when|while|with|xor)\\b/i,\n    boolean: /\\b(?:false|true)\\b/i,\n    operator: /<[=>]?|>=?|=>?|:=|\\/=?|\\*\\*?|[&+-]/,\n    punctuation: /\\.\\.?|[,;():]/,\n    char: /'.'/,\n    variable: /\\b[a-z](?:\\w)*\\b/i\n};\n!function(t) {\n    t.languages.agda = {\n        comment: /\\{-[\\s\\S]*?(?:-\\}|$)|--.*/,\n        string: {\n            pattern: /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n\"])*\"/,\n            greedy: !0\n        },\n        punctuation: /[(){}⦃⦄.;@]/,\n        \"class-name\": {\n            pattern: /((?:data|record) +)\\S+/,\n            lookbehind: !0\n        },\n        function: {\n            pattern: /(^[ \\t]*)(?!\\s)[^:\\r\\n]+(?=:)/m,\n            lookbehind: !0\n        },\n        operator: {\n            pattern: /(^\\s*|\\s)(?:[=|:∀→λ\\\\?_]|->)(?=\\s)/,\n            lookbehind: !0\n        },\n        keyword: /\\b(?:Set|abstract|constructor|data|eta-equality|field|forall|hiding|import|in|inductive|infix|infixl|infixr|instance|let|macro|module|mutual|no-eta-equality|open|overlap|pattern|postulate|primitive|private|public|quote|quoteContext|quoteGoal|quoteTerm|record|renaming|rewrite|syntax|tactic|unquote|unquoteDecl|unquoteDef|using|variable|where|with)\\b/\n    };\n}(Prism);\nPrism.languages.al = {\n    comment: /\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\//,\n    string: {\n        pattern: /'(?:''|[^'\\r\\n])*'(?!')|\"(?:\"\"|[^\"\\r\\n])*\"(?!\")/,\n        greedy: !0\n    },\n    function: {\n        pattern: /(\\b(?:event|procedure|trigger)\\s+|(?:^|[^.])\\.\\s*)[a-z_]\\w*(?=\\s*\\()/i,\n        lookbehind: !0\n    },\n    keyword: [\n        /\\b(?:array|asserterror|begin|break|case|do|downto|else|end|event|exit|for|foreach|function|if|implements|in|indataset|interface|internal|local|of|procedure|program|protected|repeat|runonclient|securityfiltering|suppressdispose|temporary|then|to|trigger|until|var|while|with|withevents)\\b/i,\n        /\\b(?:action|actions|addafter|addbefore|addfirst|addlast|area|assembly|chartpart|codeunit|column|controladdin|cuegroup|customizes|dataitem|dataset|dotnet|elements|enum|enumextension|extends|field|fieldattribute|fieldelement|fieldgroup|fieldgroups|fields|filter|fixed|grid|group|key|keys|label|labels|layout|modify|moveafter|movebefore|movefirst|movelast|page|pagecustomization|pageextension|part|profile|query|repeater|report|requestpage|schema|separator|systempart|table|tableelement|tableextension|textattribute|textelement|type|usercontrol|value|xmlport)\\b/i\n    ],\n    number: /\\b(?:0x[\\da-f]+|(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?)(?:F|LL?|U(?:LL?)?)?\\b/i,\n    boolean: /\\b(?:false|true)\\b/i,\n    variable: /\\b(?:Curr(?:FieldNo|Page|Report)|x?Rec|RequestOptionsPage)\\b/,\n    \"class-name\": /\\b(?:automation|biginteger|bigtext|blob|boolean|byte|char|clienttype|code|completiontriggererrorlevel|connectiontype|database|dataclassification|datascope|date|dateformula|datetime|decimal|defaultlayout|dialog|dictionary|dotnetassembly|dotnettypedeclaration|duration|errorinfo|errortype|executioncontext|executionmode|fieldclass|fieldref|fieldtype|file|filterpagebuilder|guid|httpclient|httpcontent|httpheaders|httprequestmessage|httpresponsemessage|instream|integer|joker|jsonarray|jsonobject|jsontoken|jsonvalue|keyref|list|moduledependencyinfo|moduleinfo|none|notification|notificationscope|objecttype|option|outstream|pageresult|record|recordid|recordref|reportformat|securityfilter|sessionsettings|tableconnectiontype|tablefilter|testaction|testfield|testfilterfield|testpage|testpermissions|testrequestpage|text|textbuilder|textconst|textencoding|time|transactionmodel|transactiontype|variant|verbosity|version|view|views|webserviceactioncontext|webserviceactionresultcode|xmlattribute|xmlattributecollection|xmlcdata|xmlcomment|xmldeclaration|xmldocument|xmldocumenttype|xmlelement|xmlnamespacemanager|xmlnametable|xmlnode|xmlnodelist|xmlprocessinginstruction|xmlreadoptions|xmltext|xmlwriteoptions)\\b/i,\n    operator: /\\.\\.|:[=:]|[-+*/]=?|<>|[<>]=?|=|\\b(?:and|div|mod|not|or|xor)\\b/i,\n    punctuation: /[()\\[\\]{}:.;,]/\n};\nPrism.languages.antlr4 = {\n    comment: /\\/\\/.*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n    string: {\n        pattern: /'(?:\\\\.|[^\\\\'\\r\\n])*'/,\n        greedy: !0\n    },\n    \"character-class\": {\n        pattern: /\\[(?:\\\\.|[^\\\\\\]\\r\\n])*\\]/,\n        greedy: !0,\n        alias: \"regex\",\n        inside: {\n            range: {\n                pattern: /([^[]|(?:^|[^\\\\])(?:\\\\\\\\)*\\\\\\[)-(?!\\])/,\n                lookbehind: !0,\n                alias: \"punctuation\"\n            },\n            escape: /\\\\(?:u(?:[a-fA-F\\d]{4}|\\{[a-fA-F\\d]+\\})|[pP]\\{[=\\w-]+\\}|[^\\r\\nupP])/,\n            punctuation: /[\\[\\]]/\n        }\n    },\n    action: {\n        pattern: /\\{(?:[^{}]|\\{(?:[^{}]|\\{(?:[^{}]|\\{[^{}]*\\})*\\})*\\})*\\}/,\n        greedy: !0,\n        inside: {\n            content: {\n                pattern: /(\\{)[\\s\\S]+(?=\\})/,\n                lookbehind: !0\n            },\n            punctuation: /[{}]/\n        }\n    },\n    command: {\n        pattern: /(->\\s*(?!\\s))(?:\\s*(?:,\\s*)?\\b[a-z]\\w*(?:\\s*\\([^()\\r\\n]*\\))?)+(?=\\s*;)/i,\n        lookbehind: !0,\n        inside: {\n            function: /\\b\\w+(?=\\s*(?:[,(]|$))/,\n            punctuation: /[,()]/\n        }\n    },\n    annotation: {\n        pattern: /@\\w+(?:::\\w+)*/,\n        alias: \"keyword\"\n    },\n    label: {\n        pattern: /#[ \\t]*\\w+/,\n        alias: \"punctuation\"\n    },\n    keyword: /\\b(?:catch|channels|finally|fragment|grammar|import|lexer|locals|mode|options|parser|returns|throws|tokens)\\b/,\n    definition: [\n        {\n            pattern: /\\b[a-z]\\w*(?=\\s*:)/,\n            alias: [\n                \"rule\",\n                \"class-name\"\n            ]\n        },\n        {\n            pattern: /\\b[A-Z]\\w*(?=\\s*:)/,\n            alias: [\n                \"token\",\n                \"constant\"\n            ]\n        }\n    ],\n    constant: /\\b[A-Z][A-Z_]*\\b/,\n    operator: /\\.\\.|->|[|~]|[*+?]\\??/,\n    punctuation: /[;:()=]/\n}, Prism.languages.g4 = Prism.languages.antlr4;\nPrism.languages.apacheconf = {\n    comment: /#.*/,\n    \"directive-inline\": {\n        pattern: /(^[\\t ]*)\\b(?:AcceptFilter|AcceptPathInfo|AccessFileName|Action|Add(?:Alt|AltByEncoding|AltByType|Charset|DefaultCharset|Description|Encoding|Handler|Icon|IconByEncoding|IconByType|InputFilter|Language|ModuleInfo|OutputFilter|OutputFilterByType|Type)|Alias|AliasMatch|Allow(?:CONNECT|EncodedSlashes|Methods|Override|OverrideList)?|Anonymous(?:_LogEmail|_MustGiveEmail|_NoUserID|_VerifyEmail)?|AsyncRequestWorkerFactor|Auth(?:BasicAuthoritative|BasicFake|BasicProvider|BasicUseDigestAlgorithm|DBDUserPWQuery|DBDUserRealmQuery|DBMGroupFile|DBMType|DBMUserFile|Digest(?:Algorithm|Domain|NonceLifetime|Provider|Qop|ShmemSize)|Form(?:Authoritative|Body|DisableNoStore|FakeBasicAuth|Location|LoginRequiredLocation|LoginSuccessLocation|LogoutLocation|Method|Mimetype|Password|Provider|SitePassphrase|Size|Username)|GroupFile|LDAP(?:AuthorizePrefix|BindAuthoritative|BindDN|BindPassword|CharsetConfig|CompareAsUser|CompareDNOnServer|DereferenceAliases|GroupAttribute|GroupAttributeIsDN|InitialBindAsUser|InitialBindPattern|MaxSubGroupDepth|RemoteUserAttribute|RemoteUserIsDN|SearchAsUser|SubGroupAttribute|SubGroupClass|Url)|Merging|Name|nCache(?:Context|Enable|ProvideFor|SOCache|Timeout)|nzFcgiCheckAuthnProvider|nzFcgiDefineProvider|Type|UserFile|zDBDLoginToReferer|zDBDQuery|zDBDRedirectQuery|zDBMType|zSendForbiddenOnFailure)|BalancerGrowth|BalancerInherit|BalancerMember|BalancerPersist|BrowserMatch|BrowserMatchNoCase|BufferedLogs|BufferSize|Cache(?:DefaultExpire|DetailHeader|DirLength|DirLevels|Disable|Enable|File|Header|IgnoreCacheControl|IgnoreHeaders|IgnoreNoLastMod|IgnoreQueryString|IgnoreURLSessionIdentifiers|KeyBaseURL|LastModifiedFactor|Lock|LockMaxAge|LockPath|MaxExpire|MaxFileSize|MinExpire|MinFileSize|NegotiatedDocs|QuickHandler|ReadSize|ReadTime|Root|Socache(?:MaxSize|MaxTime|MinTime|ReadSize|ReadTime)?|StaleOnError|StoreExpired|StoreNoStore|StorePrivate)|CGIDScriptTimeout|CGIMapExtension|CharsetDefault|CharsetOptions|CharsetSourceEnc|CheckCaseOnly|CheckSpelling|ChrootDir|ContentDigest|CookieDomain|CookieExpires|CookieName|CookieStyle|CookieTracking|CoreDumpDirectory|CustomLog|Dav|DavDepthInfinity|DavGenericLockDB|DavLockDB|DavMinTimeout|DBDExptime|DBDInitSQL|DBDKeep|DBDMax|DBDMin|DBDParams|DBDPersist|DBDPrepareSQL|DBDriver|DefaultIcon|DefaultLanguage|DefaultRuntimeDir|DefaultType|Define|Deflate(?:BufferSize|CompressionLevel|FilterNote|InflateLimitRequestBody|InflateRatio(?:Burst|Limit)|MemLevel|WindowSize)|Deny|DirectoryCheckHandler|DirectoryIndex|DirectoryIndexRedirect|DirectorySlash|DocumentRoot|DTracePrivileges|DumpIOInput|DumpIOOutput|EnableExceptionHook|EnableMMAP|EnableSendfile|Error|ErrorDocument|ErrorLog|ErrorLogFormat|Example|ExpiresActive|ExpiresByType|ExpiresDefault|ExtendedStatus|ExtFilterDefine|ExtFilterOptions|FallbackResource|FileETag|FilterChain|FilterDeclare|FilterProtocol|FilterProvider|FilterTrace|ForceLanguagePriority|ForceType|ForensicLog|GprofDir|GracefulShutdownTimeout|Group|Header|HeaderName|Heartbeat(?:Address|Listen|MaxServers|Storage)|HostnameLookups|IdentityCheck|IdentityCheckTimeout|ImapBase|ImapDefault|ImapMenu|Include|IncludeOptional|Index(?:HeadInsert|Ignore|IgnoreReset|Options|OrderDefault|StyleSheet)|InputSed|ISAPI(?:AppendLogToErrors|AppendLogToQuery|CacheFile|FakeAsync|LogNotSupported|ReadAheadBuffer)|KeepAlive|KeepAliveTimeout|KeptBodySize|LanguagePriority|LDAP(?:CacheEntries|CacheTTL|ConnectionPoolTTL|ConnectionTimeout|LibraryDebug|OpCacheEntries|OpCacheTTL|ReferralHopLimit|Referrals|Retries|RetryDelay|SharedCacheFile|SharedCacheSize|Timeout|TrustedClientCert|TrustedGlobalCert|TrustedMode|VerifyServerCert)|Limit(?:InternalRecursion|Request(?:Body|Fields|FieldSize|Line)|XMLRequestBody)|Listen|ListenBackLog|LoadFile|LoadModule|LogFormat|LogLevel|LogMessage|LuaAuthzProvider|LuaCodeCache|Lua(?:Hook(?:AccessChecker|AuthChecker|CheckUserID|Fixups|InsertFilter|Log|MapToStorage|TranslateName|TypeChecker)|Inherit|InputFilter|MapHandler|OutputFilter|PackageCPath|PackagePath|QuickHandler|Root|Scope)|Max(?:ConnectionsPerChild|KeepAliveRequests|MemFree|RangeOverlaps|RangeReversals|Ranges|RequestWorkers|SpareServers|SpareThreads|Threads)|MergeTrailers|MetaDir|MetaFiles|MetaSuffix|MimeMagicFile|MinSpareServers|MinSpareThreads|MMapFile|ModemStandard|ModMimeUsePathInfo|MultiviewsMatch|Mutex|NameVirtualHost|NoProxy|NWSSLTrustedCerts|NWSSLUpgradeable|Options|Order|OutputSed|PassEnv|PidFile|PrivilegesMode|Protocol|ProtocolEcho|Proxy(?:AddHeaders|BadHeader|Block|Domain|ErrorOverride|ExpressDBMFile|ExpressDBMType|ExpressEnable|FtpDirCharset|FtpEscapeWildcards|FtpListOnWildcard|HTML(?:BufSize|CharsetOut|DocType|Enable|Events|Extended|Fixups|Interp|Links|Meta|StripComments|URLMap)|IOBufferSize|MaxForwards|Pass(?:Inherit|InterpolateEnv|Match|Reverse|ReverseCookieDomain|ReverseCookiePath)?|PreserveHost|ReceiveBufferSize|Remote|RemoteMatch|Requests|SCGIInternalRedirect|SCGISendfile|Set|SourceAddress|Status|Timeout|Via)|ReadmeName|ReceiveBufferSize|Redirect|RedirectMatch|RedirectPermanent|RedirectTemp|ReflectorHeader|RemoteIP(?:Header|InternalProxy|InternalProxyList|ProxiesHeader|TrustedProxy|TrustedProxyList)|RemoveCharset|RemoveEncoding|RemoveHandler|RemoveInputFilter|RemoveLanguage|RemoveOutputFilter|RemoveType|RequestHeader|RequestReadTimeout|Require|Rewrite(?:Base|Cond|Engine|Map|Options|Rule)|RLimitCPU|RLimitMEM|RLimitNPROC|Satisfy|ScoreBoardFile|Script(?:Alias|AliasMatch|InterpreterSource|Log|LogBuffer|LogLength|Sock)?|SecureListen|SeeRequestTail|SendBufferSize|Server(?:Admin|Alias|Limit|Name|Path|Root|Signature|Tokens)|Session(?:Cookie(?:Name|Name2|Remove)|Crypto(?:Cipher|Driver|Passphrase|PassphraseFile)|DBD(?:CookieName|CookieName2|CookieRemove|DeleteLabel|InsertLabel|PerUser|SelectLabel|UpdateLabel)|Env|Exclude|Header|Include|MaxAge)?|SetEnv|SetEnvIf|SetEnvIfExpr|SetEnvIfNoCase|SetHandler|SetInputFilter|SetOutputFilter|SSIEndTag|SSIErrorMsg|SSIETag|SSILastModified|SSILegacyExprParser|SSIStartTag|SSITimeFormat|SSIUndefinedEcho|SSL(?:CACertificateFile|CACertificatePath|CADNRequestFile|CADNRequestPath|CARevocationCheck|CARevocationFile|CARevocationPath|CertificateChainFile|CertificateFile|CertificateKeyFile|CipherSuite|Compression|CryptoDevice|Engine|FIPS|HonorCipherOrder|InsecureRenegotiation|OCSP(?:DefaultResponder|Enable|OverrideResponder|ResponderTimeout|ResponseMaxAge|ResponseTimeSkew|UseRequestNonce)|OpenSSLConfCmd|Options|PassPhraseDialog|Protocol|Proxy(?:CACertificateFile|CACertificatePath|CARevocation(?:Check|File|Path)|CheckPeer(?:CN|Expire|Name)|CipherSuite|Engine|MachineCertificate(?:ChainFile|File|Path)|Protocol|Verify|VerifyDepth)|RandomSeed|RenegBufferSize|Require|RequireSSL|Session(?:Cache|CacheTimeout|TicketKeyFile|Tickets)|SRPUnknownUserSeed|SRPVerifierFile|Stapling(?:Cache|ErrorCacheTimeout|FakeTryLater|ForceURL|ResponderTimeout|ResponseMaxAge|ResponseTimeSkew|ReturnResponderErrors|StandardCacheTimeout)|StrictSNIVHostCheck|UserName|UseStapling|VerifyClient|VerifyDepth)|StartServers|StartThreads|Substitute|Suexec|SuexecUserGroup|ThreadLimit|ThreadsPerChild|ThreadStackSize|TimeOut|TraceEnable|TransferLog|TypesConfig|UnDefine|UndefMacro|UnsetEnv|Use|UseCanonicalName|UseCanonicalPhysicalPort|User|UserDir|VHostCGIMode|VHostCGIPrivs|VHostGroup|VHostPrivs|VHostSecure|VHostUser|Virtual(?:DocumentRoot|ScriptAlias)(?:IP)?|WatchdogInterval|XBitHack|xml2EncAlias|xml2EncDefault|xml2StartParse)\\b/im,\n        lookbehind: !0,\n        alias: \"property\"\n    },\n    \"directive-block\": {\n        pattern: /<\\/?\\b(?:Auth[nz]ProviderAlias|Directory|DirectoryMatch|Else|ElseIf|Files|FilesMatch|If|IfDefine|IfModule|IfVersion|Limit|LimitExcept|Location|LocationMatch|Macro|Proxy|Require(?:All|Any|None)|VirtualHost)\\b.*>/i,\n        inside: {\n            \"directive-block\": {\n                pattern: /^<\\/?\\w+/,\n                inside: {\n                    punctuation: /^<\\/?/\n                },\n                alias: \"tag\"\n            },\n            \"directive-block-parameter\": {\n                pattern: /.*[^>]/,\n                inside: {\n                    punctuation: /:/,\n                    string: {\n                        pattern: /(\"|').*\\1/,\n                        inside: {\n                            variable: /[$%]\\{?(?:\\w\\.?[-+:]?)+\\}?/\n                        }\n                    }\n                },\n                alias: \"attr-value\"\n            },\n            punctuation: />/\n        },\n        alias: \"tag\"\n    },\n    \"directive-flags\": {\n        pattern: /\\[(?:[\\w=],?)+\\]/,\n        alias: \"keyword\"\n    },\n    string: {\n        pattern: /(\"|').*\\1/,\n        inside: {\n            variable: /[$%]\\{?(?:\\w\\.?[-+:]?)+\\}?/\n        }\n    },\n    variable: /[$%]\\{?(?:\\w\\.?[-+:]?)+\\}?/,\n    regex: /\\^?.*\\$|\\^.*\\$?/\n};\nPrism.languages.sql = {\n    comment: {\n        pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|(?:--|\\/\\/|#).*)/,\n        lookbehind: !0\n    },\n    variable: [\n        {\n            pattern: /@([\"'`])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1/,\n            greedy: !0\n        },\n        /@[\\w.$]+/\n    ],\n    string: {\n        pattern: /(^|[^@\\\\])(\"|')(?:\\\\[\\s\\S]|(?!\\2)[^\\\\]|\\2\\2)*\\2/,\n        greedy: !0,\n        lookbehind: !0\n    },\n    identifier: {\n        pattern: /(^|[^@\\\\])`(?:\\\\[\\s\\S]|[^`\\\\]|``)*`/,\n        greedy: !0,\n        lookbehind: !0,\n        inside: {\n            punctuation: /^`|`$/\n        }\n    },\n    function: /\\b(?:AVG|COUNT|FIRST|FORMAT|LAST|LCASE|LEN|MAX|MID|MIN|MOD|NOW|ROUND|SUM|UCASE)(?=\\s*\\()/i,\n    keyword: /\\b(?:ACTION|ADD|AFTER|ALGORITHM|ALL|ALTER|ANALYZE|ANY|APPLY|AS|ASC|AUTHORIZATION|AUTO_INCREMENT|BACKUP|BDB|BEGIN|BERKELEYDB|BIGINT|BINARY|BIT|BLOB|BOOL|BOOLEAN|BREAK|BROWSE|BTREE|BULK|BY|CALL|CASCADED?|CASE|CHAIN|CHAR(?:ACTER|SET)?|CHECK(?:POINT)?|CLOSE|CLUSTERED|COALESCE|COLLATE|COLUMNS?|COMMENT|COMMIT(?:TED)?|COMPUTE|CONNECT|CONSISTENT|CONSTRAINT|CONTAINS(?:TABLE)?|CONTINUE|CONVERT|CREATE|CROSS|CURRENT(?:_DATE|_TIME|_TIMESTAMP|_USER)?|CURSOR|CYCLE|DATA(?:BASES?)?|DATE(?:TIME)?|DAY|DBCC|DEALLOCATE|DEC|DECIMAL|DECLARE|DEFAULT|DEFINER|DELAYED|DELETE|DELIMITERS?|DENY|DESC|DESCRIBE|DETERMINISTIC|DISABLE|DISCARD|DISK|DISTINCT|DISTINCTROW|DISTRIBUTED|DO|DOUBLE|DROP|DUMMY|DUMP(?:FILE)?|DUPLICATE|ELSE(?:IF)?|ENABLE|ENCLOSED|END|ENGINE|ENUM|ERRLVL|ERRORS|ESCAPED?|EXCEPT|EXEC(?:UTE)?|EXISTS|EXIT|EXPLAIN|EXTENDED|FETCH|FIELDS|FILE|FILLFACTOR|FIRST|FIXED|FLOAT|FOLLOWING|FOR(?: EACH ROW)?|FORCE|FOREIGN|FREETEXT(?:TABLE)?|FROM|FULL|FUNCTION|GEOMETRY(?:COLLECTION)?|GLOBAL|GOTO|GRANT|GROUP|HANDLER|HASH|HAVING|HOLDLOCK|HOUR|IDENTITY(?:COL|_INSERT)?|IF|IGNORE|IMPORT|INDEX|INFILE|INNER|INNODB|INOUT|INSERT|INT|INTEGER|INTERSECT|INTERVAL|INTO|INVOKER|ISOLATION|ITERATE|JOIN|KEYS?|KILL|LANGUAGE|LAST|LEAVE|LEFT|LEVEL|LIMIT|LINENO|LINES|LINESTRING|LOAD|LOCAL|LOCK|LONG(?:BLOB|TEXT)|LOOP|MATCH(?:ED)?|MEDIUM(?:BLOB|INT|TEXT)|MERGE|MIDDLEINT|MINUTE|MODE|MODIFIES|MODIFY|MONTH|MULTI(?:LINESTRING|POINT|POLYGON)|NATIONAL|NATURAL|NCHAR|NEXT|NO|NONCLUSTERED|NULLIF|NUMERIC|OFF?|OFFSETS?|ON|OPEN(?:DATASOURCE|QUERY|ROWSET)?|OPTIMIZE|OPTION(?:ALLY)?|ORDER|OUT(?:ER|FILE)?|OVER|PARTIAL|PARTITION|PERCENT|PIVOT|PLAN|POINT|POLYGON|PRECEDING|PRECISION|PREPARE|PREV|PRIMARY|PRINT|PRIVILEGES|PROC(?:EDURE)?|PUBLIC|PURGE|QUICK|RAISERROR|READS?|REAL|RECONFIGURE|REFERENCES|RELEASE|RENAME|REPEAT(?:ABLE)?|REPLACE|REPLICATION|REQUIRE|RESIGNAL|RESTORE|RESTRICT|RETURN(?:ING|S)?|REVOKE|RIGHT|ROLLBACK|ROUTINE|ROW(?:COUNT|GUIDCOL|S)?|RTREE|RULE|SAVE(?:POINT)?|SCHEMA|SECOND|SELECT|SERIAL(?:IZABLE)?|SESSION(?:_USER)?|SET(?:USER)?|SHARE|SHOW|SHUTDOWN|SIMPLE|SMALLINT|SNAPSHOT|SOME|SONAME|SQL|START(?:ING)?|STATISTICS|STATUS|STRIPED|SYSTEM_USER|TABLES?|TABLESPACE|TEMP(?:ORARY|TABLE)?|TERMINATED|TEXT(?:SIZE)?|THEN|TIME(?:STAMP)?|TINY(?:BLOB|INT|TEXT)|TOP?|TRAN(?:SACTIONS?)?|TRIGGER|TRUNCATE|TSEQUAL|TYPES?|UNBOUNDED|UNCOMMITTED|UNDEFINED|UNION|UNIQUE|UNLOCK|UNPIVOT|UNSIGNED|UPDATE(?:TEXT)?|USAGE|USE|USER|USING|VALUES?|VAR(?:BINARY|CHAR|CHARACTER|YING)|VIEW|WAITFOR|WARNINGS|WHEN|WHERE|WHILE|WITH(?: ROLLUP|IN)?|WORK|WRITE(?:TEXT)?|YEAR)\\b/i,\n    boolean: /\\b(?:FALSE|NULL|TRUE)\\b/i,\n    number: /\\b0x[\\da-f]+\\b|\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+\\b/i,\n    operator: /[-+*\\/=%^~]|&&?|\\|\\|?|!=?|<(?:=>?|<|>)?|>[>=]?|\\b(?:AND|BETWEEN|DIV|ILIKE|IN|IS|LIKE|NOT|OR|REGEXP|RLIKE|SOUNDS LIKE|XOR)\\b/i,\n    punctuation: /[;[\\]()`,.]/\n};\n!function(e) {\n    var t = /\\b(?:(?:after|before)(?=\\s+[a-z])|abstract|activate|and|any|array|as|asc|autonomous|begin|bigdecimal|blob|boolean|break|bulk|by|byte|case|cast|catch|char|class|collect|commit|const|continue|currency|date|datetime|decimal|default|delete|desc|do|double|else|end|enum|exception|exit|export|extends|final|finally|float|for|from|get(?=\\s*[{};])|global|goto|group|having|hint|if|implements|import|in|inner|insert|instanceof|int|integer|interface|into|join|like|limit|list|long|loop|map|merge|new|not|null|nulls|number|object|of|on|or|outer|override|package|parallel|pragma|private|protected|public|retrieve|return|rollback|select|set|short|sObject|sort|static|string|super|switch|synchronized|system|testmethod|then|this|throw|time|transaction|transient|trigger|try|undelete|update|upsert|using|virtual|void|webservice|when|where|while|(?:inherited|with|without)\\s+sharing)\\b/i, n = \"\\\\b(?:(?=[a-z_]\\\\w*\\\\s*[<\\\\[])|(?!<keyword>))[A-Z_]\\\\w*(?:\\\\s*\\\\.\\\\s*[A-Z_]\\\\w*)*\\\\b(?:\\\\s*(?:\\\\[\\\\s*\\\\]|<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>))*\".replace(/<keyword>/g, function() {\n        return t.source;\n    });\n    function i(e) {\n        return RegExp(e.replace(/<CLASS-NAME>/g, function() {\n            return n;\n        }), \"i\");\n    }\n    var a = {\n        keyword: t,\n        punctuation: /[()\\[\\]{};,:.<>]/\n    };\n    e.languages.apex = {\n        comment: e.languages.clike.comment,\n        string: e.languages.clike.string,\n        sql: {\n            pattern: /((?:[=,({:]|\\breturn)\\s*)\\[[^\\[\\]]*\\]/i,\n            lookbehind: !0,\n            greedy: !0,\n            alias: \"language-sql\",\n            inside: e.languages.sql\n        },\n        annotation: {\n            pattern: /@\\w+\\b/,\n            alias: \"punctuation\"\n        },\n        \"class-name\": [\n            {\n                pattern: i(\"(\\\\b(?:class|enum|extends|implements|instanceof|interface|new|trigger\\\\s+\\\\w+\\\\s+on)\\\\s+)<CLASS-NAME>\"),\n                lookbehind: !0,\n                inside: a\n            },\n            {\n                pattern: i(\"(\\\\(\\\\s*)<CLASS-NAME>(?=\\\\s*\\\\)\\\\s*[\\\\w(])\"),\n                lookbehind: !0,\n                inside: a\n            },\n            {\n                pattern: i(\"<CLASS-NAME>(?=\\\\s*\\\\w+\\\\s*[;=,(){:])\"),\n                inside: a\n            }\n        ],\n        trigger: {\n            pattern: /(\\btrigger\\s+)\\w+\\b/i,\n            lookbehind: !0,\n            alias: \"class-name\"\n        },\n        keyword: t,\n        function: /\\b[a-z_]\\w*(?=\\s*\\()/i,\n        boolean: /\\b(?:false|true)\\b/i,\n        number: /(?:\\B\\.\\d+|\\b\\d+(?:\\.\\d+|L)?)\\b/i,\n        operator: /[!=](?:==?)?|\\?\\.?|&&|\\|\\||--|\\+\\+|[-+*/^&|]=?|:|<<?=?|>{1,3}=?/,\n        punctuation: /[()\\[\\]{};,.]/\n    };\n}(Prism);\nPrism.languages.apl = {\n    comment: /(?:⍝|#[! ]).*$/m,\n    string: {\n        pattern: /'(?:[^'\\r\\n]|'')*'/,\n        greedy: !0\n    },\n    number: /¯?(?:\\d*\\.?\\b\\d+(?:e[+¯]?\\d+)?|¯|∞)(?:j¯?(?:(?:\\d+(?:\\.\\d+)?|\\.\\d+)(?:e[+¯]?\\d+)?|¯|∞))?/i,\n    statement: /:[A-Z][a-z][A-Za-z]*\\b/,\n    \"system-function\": {\n        pattern: /⎕[A-Z]+/i,\n        alias: \"function\"\n    },\n    constant: /[⍬⌾#⎕⍞]/,\n    function: /[-+×÷⌈⌊∣|⍳⍸?*⍟○!⌹<≤=>≥≠≡≢∊⍷∪∩~∨∧⍱⍲⍴,⍪⌽⊖⍉↑↓⊂⊃⊆⊇⌷⍋⍒⊤⊥⍕⍎⊣⊢⍁⍂≈⍯↗¤→]/,\n    \"monadic-operator\": {\n        pattern: /[\\\\\\/⌿⍀¨⍨⌶&∥]/,\n        alias: \"operator\"\n    },\n    \"dyadic-operator\": {\n        pattern: /[.⍣⍠⍤∘⌸@⌺⍥]/,\n        alias: \"operator\"\n    },\n    assignment: {\n        pattern: /←/,\n        alias: \"keyword\"\n    },\n    punctuation: /[\\[;\\]()◇⋄]/,\n    dfn: {\n        pattern: /[{}⍺⍵⍶⍹∇⍫:]/,\n        alias: \"builtin\"\n    }\n};\nPrism.languages.applescript = {\n    comment: [\n        /\\(\\*(?:\\(\\*(?:[^*]|\\*(?!\\)))*\\*\\)|(?!\\(\\*)[\\s\\S])*?\\*\\)/,\n        /--.+/,\n        /#.+/\n    ],\n    string: /\"(?:\\\\.|[^\"\\\\\\r\\n])*\"/,\n    number: /(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e-?\\d+)?\\b/i,\n    operator: [\n        /[&=≠≤≥*+\\-\\/÷^]|[<>]=?/,\n        /\\b(?:(?:begin|end|start)s? with|(?:contains?|(?:does not|doesn't) contain)|(?:is|isn't|is not) (?:contained by|in)|(?:(?:is|isn't|is not) )?(?:greater|less) than(?: or equal)?(?: to)?|(?:comes|(?:does not|doesn't) come) (?:after|before)|(?:is|isn't|is not) equal(?: to)?|(?:(?:does not|doesn't) equal|equal to|equals|is not|isn't)|(?:a )?(?:ref(?: to)?|reference to)|(?:and|as|div|mod|not|or))\\b/\n    ],\n    keyword: /\\b(?:about|above|after|against|apart from|around|aside from|at|back|before|beginning|behind|below|beneath|beside|between|but|by|considering|continue|copy|does|eighth|else|end|equal|error|every|exit|false|fifth|first|for|fourth|from|front|get|given|global|if|ignoring|in|instead of|into|is|it|its|last|local|me|middle|my|ninth|of|on|onto|out of|over|prop|property|put|repeat|return|returning|second|set|seventh|since|sixth|some|tell|tenth|that|the|then|third|through|thru|timeout|times|to|transaction|true|try|until|where|while|whose|with|without)\\b/,\n    \"class-name\": /\\b(?:POSIX file|RGB color|alias|application|boolean|centimeters|centimetres|class|constant|cubic centimeters|cubic centimetres|cubic feet|cubic inches|cubic meters|cubic metres|cubic yards|date|degrees Celsius|degrees Fahrenheit|degrees Kelvin|feet|file|gallons|grams|inches|integer|kilograms|kilometers|kilometres|list|liters|litres|meters|metres|miles|number|ounces|pounds|quarts|real|record|reference|script|square feet|square kilometers|square kilometres|square meters|square metres|square miles|square yards|text|yards)\\b/,\n    punctuation: /[{}():,¬«»《》]/\n};\nPrism.languages.aql = {\n    comment: /\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\//,\n    property: {\n        pattern: /([{,]\\s*)(?:(?!\\d)\\w+|([\"'´`])(?:(?!\\2)[^\\\\\\r\\n]|\\\\.)*\\2)(?=\\s*:)/,\n        lookbehind: !0,\n        greedy: !0\n    },\n    string: {\n        pattern: /([\"'])(?:(?!\\1)[^\\\\\\r\\n]|\\\\.)*\\1/,\n        greedy: !0\n    },\n    identifier: {\n        pattern: /([´`])(?:(?!\\1)[^\\\\\\r\\n]|\\\\.)*\\1/,\n        greedy: !0\n    },\n    variable: /@@?\\w+/,\n    keyword: [\n        {\n            pattern: /(\\bWITH\\s+)COUNT(?=\\s+INTO\\b)/i,\n            lookbehind: !0\n        },\n        /\\b(?:AGGREGATE|ALL|AND|ANY|ASC|COLLECT|DESC|DISTINCT|FILTER|FOR|GRAPH|IN|INBOUND|INSERT|INTO|K_PATHS|K_SHORTEST_PATHS|LET|LIKE|LIMIT|NONE|NOT|NULL|OR|OUTBOUND|REMOVE|REPLACE|RETURN|SHORTEST_PATH|SORT|UPDATE|UPSERT|WINDOW|WITH)\\b/i,\n        {\n            pattern: /(^|[^\\w.[])(?:KEEP|PRUNE|SEARCH|TO)\\b/i,\n            lookbehind: !0\n        },\n        {\n            pattern: /(^|[^\\w.[])(?:CURRENT|NEW|OLD)\\b/,\n            lookbehind: !0\n        },\n        {\n            pattern: /\\bOPTIONS(?=\\s*\\{)/i\n        }\n    ],\n    function: /\\b(?!\\d)\\w+(?=\\s*\\()/,\n    boolean: /\\b(?:false|true)\\b/i,\n    range: {\n        pattern: /\\.\\./,\n        alias: \"operator\"\n    },\n    number: [\n        /\\b0b[01]+/i,\n        /\\b0x[0-9a-f]+/i,\n        /(?:\\B\\.\\d+|\\b(?:0|[1-9]\\d*)(?:\\.\\d+)?)(?:e[+-]?\\d+)?/i\n    ],\n    operator: /\\*{2,}|[=!]~|[!=<>]=?|&&|\\|\\||[-+*/%]/,\n    punctuation: /::|[?.:,;()[\\]{}]/\n};\nPrism.languages.c = Prism.languages.extend(\"clike\", {\n    comment: {\n        pattern: /\\/\\/(?:[^\\r\\n\\\\]|\\\\(?:\\r\\n?|\\n|(?![\\r\\n])))*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n        greedy: !0\n    },\n    string: {\n        pattern: /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"/,\n        greedy: !0\n    },\n    \"class-name\": {\n        pattern: /(\\b(?:enum|struct)\\s+(?:__attribute__\\s*\\(\\([\\s\\S]*?\\)\\)\\s*)?)\\w+|\\b[a-z]\\w*_t\\b/,\n        lookbehind: !0\n    },\n    keyword: /\\b(?:_Alignas|_Alignof|_Atomic|_Bool|_Complex|_Generic|_Imaginary|_Noreturn|_Static_assert|_Thread_local|__attribute__|asm|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|inline|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|typeof|union|unsigned|void|volatile|while)\\b/,\n    function: /\\b[a-z_]\\w*(?=\\s*\\()/i,\n    number: /(?:\\b0x(?:[\\da-f]+(?:\\.[\\da-f]*)?|\\.[\\da-f]+)(?:p[+-]?\\d+)?|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?)[ful]{0,4}/i,\n    operator: />>=?|<<=?|->|([-+&|:])\\1|[?:~]|[-+*/%&|^!=<>]=?/\n}), Prism.languages.insertBefore(\"c\", \"string\", {\n    char: {\n        pattern: /'(?:\\\\(?:\\r\\n|[\\s\\S])|[^'\\\\\\r\\n]){0,32}'/,\n        greedy: !0\n    }\n}), Prism.languages.insertBefore(\"c\", \"string\", {\n    macro: {\n        pattern: /(^[\\t ]*)#\\s*[a-z](?:[^\\r\\n\\\\/]|\\/(?!\\*)|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/|\\\\(?:\\r\\n|[\\s\\S]))*/im,\n        lookbehind: !0,\n        greedy: !0,\n        alias: \"property\",\n        inside: {\n            string: [\n                {\n                    pattern: /^(#\\s*include\\s*)<[^>]+>/,\n                    lookbehind: !0\n                },\n                Prism.languages.c.string\n            ],\n            char: Prism.languages.c.char,\n            comment: Prism.languages.c.comment,\n            \"macro-name\": [\n                {\n                    pattern: /(^#\\s*define\\s+)\\w+\\b(?!\\()/i,\n                    lookbehind: !0\n                },\n                {\n                    pattern: /(^#\\s*define\\s+)\\w+\\b(?=\\()/i,\n                    lookbehind: !0,\n                    alias: \"function\"\n                }\n            ],\n            directive: {\n                pattern: /^(#\\s*)[a-z]+/,\n                lookbehind: !0,\n                alias: \"keyword\"\n            },\n            \"directive-hash\": /^#/,\n            punctuation: /##|\\\\(?=[\\r\\n])/,\n            expression: {\n                pattern: /\\S[\\s\\S]*/,\n                inside: Prism.languages.c\n            }\n        }\n    }\n}), Prism.languages.insertBefore(\"c\", \"function\", {\n    constant: /\\b(?:EOF|NULL|SEEK_CUR|SEEK_END|SEEK_SET|__DATE__|__FILE__|__LINE__|__TIMESTAMP__|__TIME__|__func__|stderr|stdin|stdout)\\b/\n}), delete Prism.languages.c.boolean;\n!function(e) {\n    var t = /\\b(?:alignas|alignof|asm|auto|bool|break|case|catch|char|char16_t|char32_t|char8_t|class|co_await|co_return|co_yield|compl|concept|const|const_cast|consteval|constexpr|constinit|continue|decltype|default|delete|do|double|dynamic_cast|else|enum|explicit|export|extern|final|float|for|friend|goto|if|import|inline|int|int16_t|int32_t|int64_t|int8_t|long|module|mutable|namespace|new|noexcept|nullptr|operator|override|private|protected|public|register|reinterpret_cast|requires|return|short|signed|sizeof|static|static_assert|static_cast|struct|switch|template|this|thread_local|throw|try|typedef|typeid|typename|uint16_t|uint32_t|uint64_t|uint8_t|union|unsigned|using|virtual|void|volatile|wchar_t|while)\\b/, n = \"\\\\b(?!<keyword>)\\\\w+(?:\\\\s*\\\\.\\\\s*\\\\w+)*\\\\b\".replace(/<keyword>/g, function() {\n        return t.source;\n    });\n    e.languages.cpp = e.languages.extend(\"c\", {\n        \"class-name\": [\n            {\n                pattern: RegExp(\"(\\\\b(?:class|concept|enum|struct|typename)\\\\s+)(?!<keyword>)\\\\w+\".replace(/<keyword>/g, function() {\n                    return t.source;\n                })),\n                lookbehind: !0\n            },\n            /\\b[A-Z]\\w*(?=\\s*::\\s*\\w+\\s*\\()/,\n            /\\b[A-Z_]\\w*(?=\\s*::\\s*~\\w+\\s*\\()/i,\n            /\\b\\w+(?=\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>\\s*::\\s*\\w+\\s*\\()/\n        ],\n        keyword: t,\n        number: {\n            pattern: /(?:\\b0b[01']+|\\b0x(?:[\\da-f']+(?:\\.[\\da-f']*)?|\\.[\\da-f']+)(?:p[+-]?[\\d']+)?|(?:\\b[\\d']+(?:\\.[\\d']*)?|\\B\\.[\\d']+)(?:e[+-]?[\\d']+)?)[ful]{0,4}/i,\n            greedy: !0\n        },\n        operator: />>=?|<<=?|->|--|\\+\\+|&&|\\|\\||[?:~]|<=>|[-+*/%&|^!=<>]=?|\\b(?:and|and_eq|bitand|bitor|not|not_eq|or|or_eq|xor|xor_eq)\\b/,\n        boolean: /\\b(?:false|true)\\b/\n    }), e.languages.insertBefore(\"cpp\", \"string\", {\n        module: {\n            pattern: RegExp('(\\\\b(?:import|module)\\\\s+)(?:\"(?:\\\\\\\\(?:\\r\\n|[^])|[^\"\\\\\\\\\\r\\n])*\"|<[^<>\\r\\n]*>|' + \"<mod-name>(?:\\\\s*:\\\\s*<mod-name>)?|:\\\\s*<mod-name>\".replace(/<mod-name>/g, function() {\n                return n;\n            }) + \")\"),\n            lookbehind: !0,\n            greedy: !0,\n            inside: {\n                string: /^[<\"][\\s\\S]+/,\n                operator: /:/,\n                punctuation: /\\./\n            }\n        },\n        \"raw-string\": {\n            pattern: /R\"([^()\\\\ ]{0,16})\\([\\s\\S]*?\\)\\1\"/,\n            alias: \"string\",\n            greedy: !0\n        }\n    }), e.languages.insertBefore(\"cpp\", \"keyword\", {\n        \"generic-function\": {\n            pattern: /\\b(?!operator\\b)[a-z_]\\w*\\s*<(?:[^<>]|<[^<>]*>)*>(?=\\s*\\()/i,\n            inside: {\n                function: /^\\w+/,\n                generic: {\n                    pattern: /<[\\s\\S]+/,\n                    alias: \"class-name\",\n                    inside: e.languages.cpp\n                }\n            }\n        }\n    }), e.languages.insertBefore(\"cpp\", \"operator\", {\n        \"double-colon\": {\n            pattern: /::/,\n            alias: \"punctuation\"\n        }\n    }), e.languages.insertBefore(\"cpp\", \"class-name\", {\n        \"base-clause\": {\n            pattern: /(\\b(?:class|struct)\\s+\\w+\\s*:\\s*)[^;{}\"'\\s]+(?:\\s+[^;{}\"'\\s]+)*(?=\\s*[;{])/,\n            lookbehind: !0,\n            greedy: !0,\n            inside: e.languages.extend(\"cpp\", {})\n        }\n    }), e.languages.insertBefore(\"inside\", \"double-colon\", {\n        \"class-name\": /\\b[a-z_]\\w*\\b(?!\\s*::)/i\n    }, e.languages.cpp[\"base-clause\"]);\n}(Prism);\nPrism.languages.arduino = Prism.languages.extend(\"cpp\", {\n    keyword: /\\b(?:String|array|bool|boolean|break|byte|case|catch|continue|default|do|double|else|finally|for|function|goto|if|in|instanceof|int|integer|long|loop|new|null|return|setup|string|switch|throw|try|void|while|word)\\b/,\n    constant: /\\b(?:ANALOG_MESSAGE|DEFAULT|DIGITAL_MESSAGE|EXTERNAL|FIRMATA_STRING|HIGH|INPUT|INPUT_PULLUP|INTERNAL|INTERNAL1V1|INTERNAL2V56|LED_BUILTIN|LOW|OUTPUT|REPORT_ANALOG|REPORT_DIGITAL|SET_PIN_MODE|SYSEX_START|SYSTEM_RESET)\\b/,\n    builtin: /\\b(?:Audio|BSSID|Bridge|Client|Console|EEPROM|Esplora|EsploraTFT|Ethernet|EthernetClient|EthernetServer|EthernetUDP|File|FileIO|FileSystem|Firmata|GPRS|GSM|GSMBand|GSMClient|GSMModem|GSMPIN|GSMScanner|GSMServer|GSMVoiceCall|GSM_SMS|HttpClient|IPAddress|IRread|Keyboard|KeyboardController|LiquidCrystal|LiquidCrystal_I2C|Mailbox|Mouse|MouseController|PImage|Process|RSSI|RobotControl|RobotMotor|SD|SPI|SSID|Scheduler|Serial|Server|Servo|SoftwareSerial|Stepper|Stream|TFT|Task|USBHost|WiFi|WiFiClient|WiFiServer|WiFiUDP|Wire|YunClient|YunServer|abs|addParameter|analogRead|analogReadResolution|analogReference|analogWrite|analogWriteResolution|answerCall|attach|attachGPRS|attachInterrupt|attached|autoscroll|available|background|beep|begin|beginPacket|beginSD|beginSMS|beginSpeaker|beginTFT|beginTransmission|beginWrite|bit|bitClear|bitRead|bitSet|bitWrite|blink|blinkVersion|buffer|changePIN|checkPIN|checkPUK|checkReg|circle|cityNameRead|cityNameWrite|clear|clearScreen|click|close|compassRead|config|connect|connected|constrain|cos|countryNameRead|countryNameWrite|createChar|cursor|debugPrint|delay|delayMicroseconds|detach|detachInterrupt|digitalRead|digitalWrite|disconnect|display|displayLogos|drawBMP|drawCompass|encryptionType|end|endPacket|endSMS|endTransmission|endWrite|exists|exitValue|fill|find|findUntil|flush|gatewayIP|get|getAsynchronously|getBand|getButton|getCurrentCarrier|getIMEI|getKey|getModifiers|getOemKey|getPINUsed|getResult|getSignalStrength|getSocket|getVoiceCallStatus|getXChange|getYChange|hangCall|height|highByte|home|image|interrupts|isActionDone|isDirectory|isListening|isPIN|isPressed|isValid|keyPressed|keyReleased|keyboardRead|knobRead|leftToRight|line|lineFollowConfig|listen|listenOnLocalhost|loadImage|localIP|lowByte|macAddress|maintain|map|max|messageAvailable|micros|millis|min|mkdir|motorsStop|motorsWrite|mouseDragged|mouseMoved|mousePressed|mouseReleased|move|noAutoscroll|noBlink|noBuffer|noCursor|noDisplay|noFill|noInterrupts|noListenOnLocalhost|noStroke|noTone|onReceive|onRequest|open|openNextFile|overflow|parseCommand|parseFloat|parseInt|parsePacket|pauseMode|peek|pinMode|playFile|playMelody|point|pointTo|position|pow|prepare|press|print|printFirmwareVersion|printVersion|println|process|processInput|pulseIn|put|random|randomSeed|read|readAccelerometer|readBlue|readButton|readBytes|readBytesUntil|readGreen|readJoystickButton|readJoystickSwitch|readJoystickX|readJoystickY|readLightSensor|readMessage|readMicrophone|readNetworks|readRed|readSlider|readString|readStringUntil|readTemperature|ready|rect|release|releaseAll|remoteIP|remoteNumber|remotePort|remove|requestFrom|retrieveCallingNumber|rewindDirectory|rightToLeft|rmdir|robotNameRead|robotNameWrite|run|runAsynchronously|runShellCommand|runShellCommandAsynchronously|running|scanNetworks|scrollDisplayLeft|scrollDisplayRight|seek|sendAnalog|sendDigitalPortPair|sendDigitalPorts|sendString|sendSysex|serialEvent|setBand|setBitOrder|setClockDivider|setCursor|setDNS|setDataMode|setFirmwareVersion|setMode|setPINUsed|setSpeed|setTextSize|setTimeout|shiftIn|shiftOut|shutdown|sin|size|sqrt|startLoop|step|stop|stroke|subnetMask|switchPIN|tan|tempoWrite|text|tone|transfer|tuneWrite|turn|updateIR|userNameRead|userNameWrite|voiceCall|waitContinue|width|write|writeBlue|writeGreen|writeJSON|writeMessage|writeMicroseconds|writeRGB|writeRed|yield)\\b/\n}), Prism.languages.ino = Prism.languages.arduino;\nPrism.languages.arff = {\n    comment: /%.*/,\n    string: {\n        pattern: /([\"'])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n        greedy: !0\n    },\n    keyword: /@(?:attribute|data|end|relation)\\b/i,\n    number: /\\b\\d+(?:\\.\\d+)?\\b/,\n    punctuation: /[{},]/\n};\nPrism.languages.armasm = {\n    comment: {\n        pattern: /;.*/,\n        greedy: !0\n    },\n    string: {\n        pattern: /\"(?:[^\"\\r\\n]|\"\")*\"/,\n        greedy: !0,\n        inside: {\n            variable: {\n                pattern: /((?:^|[^$])(?:\\${2})*)\\$\\w+/,\n                lookbehind: !0\n            }\n        }\n    },\n    char: {\n        pattern: /'(?:[^'\\r\\n]{0,4}|'')'/,\n        greedy: !0\n    },\n    \"version-symbol\": {\n        pattern: /\\|[\\w@]+\\|/,\n        greedy: !0,\n        alias: \"property\"\n    },\n    boolean: /\\b(?:FALSE|TRUE)\\b/,\n    directive: {\n        pattern: /\\b(?:ALIAS|ALIGN|AREA|ARM|ASSERT|ATTR|CN|CODE|CODE16|CODE32|COMMON|CP|DATA|DCB|DCD|DCDO|DCDU|DCFD|DCFDU|DCI|DCQ|DCQU|DCW|DCWU|DN|ELIF|ELSE|END|ENDFUNC|ENDIF|ENDP|ENTRY|EQU|EXPORT|EXPORTAS|EXTERN|FIELD|FILL|FN|FUNCTION|GBLA|GBLL|GBLS|GET|GLOBAL|IF|IMPORT|INCBIN|INCLUDE|INFO|KEEP|LCLA|LCLL|LCLS|LTORG|MACRO|MAP|MEND|MEXIT|NOFP|OPT|PRESERVE8|PROC|QN|READONLY|RELOC|REQUIRE|REQUIRE8|RLIST|ROUT|SETA|SETL|SETS|SN|SPACE|SUBT|THUMB|THUMBX|TTL|WEND|WHILE)\\b/,\n        alias: \"property\"\n    },\n    instruction: {\n        pattern: /((?:^|(?:^|[^\\\\])(?:\\r\\n?|\\n))[ \\t]*(?:(?:[A-Z][A-Z0-9_]*[a-z]\\w*|[a-z]\\w*|\\d+)[ \\t]+)?)\\b[A-Z.]+\\b/,\n        lookbehind: !0,\n        alias: \"keyword\"\n    },\n    variable: /\\$\\w+/,\n    number: /(?:\\b[2-9]_\\d+|(?:\\b\\d+(?:\\.\\d+)?|\\B\\.\\d+)(?:e-?\\d+)?|\\b0(?:[fd]_|x)[0-9a-f]+|&[0-9a-f]+)\\b/i,\n    register: {\n        pattern: /\\b(?:r\\d|lr)\\b/,\n        alias: \"symbol\"\n    },\n    operator: /<>|<<|>>|&&|\\|\\||[=!<>/]=?|[+\\-*%#?&|^]|:[A-Z]+:/,\n    punctuation: /[()[\\],]/\n}, Prism.languages[\"arm-asm\"] = Prism.languages.armasm;\n!function(e) {\n    var a = function(a, t) {\n        return {\n            pattern: RegExp(\"\\\\{!(?:\" + (t || a) + \")$[^]*\\\\}\", \"m\"),\n            greedy: !0,\n            inside: {\n                embedded: {\n                    pattern: /(^\\{!\\w+\\b)[\\s\\S]+(?=\\}$)/,\n                    lookbehind: !0,\n                    alias: \"language-\" + a,\n                    inside: e.languages[a]\n                },\n                string: /[\\s\\S]+/\n            }\n        };\n    };\n    e.languages.arturo = {\n        comment: {\n            pattern: /;.*/,\n            greedy: !0\n        },\n        character: {\n            pattern: /`.`/,\n            alias: \"char\",\n            greedy: !0\n        },\n        number: {\n            pattern: /\\b\\d+(?:\\.\\d+(?:\\.\\d+(?:-[\\w+-]+)?)?)?\\b/\n        },\n        string: {\n            pattern: /\"(?:[^\"\\\\\\r\\n]|\\\\.)*\"/,\n            greedy: !0\n        },\n        regex: {\n            pattern: /\\{\\/.*?\\/\\}/,\n            greedy: !0\n        },\n        \"html-string\": a(\"html\"),\n        \"css-string\": a(\"css\"),\n        \"js-string\": a(\"js\"),\n        \"md-string\": a(\"md\"),\n        \"sql-string\": a(\"sql\"),\n        \"sh-string\": a(\"shell\", \"sh\"),\n        multistring: {\n            pattern: /».*|\\{:[\\s\\S]*?:\\}|\\{[\\s\\S]*?\\}|^-{6}$[\\s\\S]*/m,\n            alias: \"string\",\n            greedy: !0\n        },\n        label: {\n            pattern: /\\w+\\b\\??:/,\n            alias: \"property\"\n        },\n        literal: {\n            pattern: /'(?:\\w+\\b\\??:?)/,\n            alias: \"constant\"\n        },\n        type: {\n            pattern: /:(?:\\w+\\b\\??:?)/,\n            alias: \"class-name\"\n        },\n        color: /#\\w+/,\n        predicate: {\n            pattern: /\\b(?:all|and|any|ascii|attr|attribute|attributeLabel|binary|block|char|contains|database|date|dictionary|empty|equal|even|every|exists|false|floating|function|greater|greaterOrEqual|if|in|inline|integer|is|key|label|leap|less|lessOrEqual|literal|logical|lower|nand|negative|nor|not|notEqual|null|numeric|odd|or|path|pathLabel|positive|prefix|prime|regex|same|set|some|sorted|standalone|string|subset|suffix|superset|symbol|symbolLiteral|true|try|type|unless|upper|when|whitespace|word|xnor|xor|zero)\\?/,\n            alias: \"keyword\"\n        },\n        \"builtin-function\": {\n            pattern: /\\b(?:abs|acos|acosh|acsec|acsech|actan|actanh|add|after|alert|alias|and|angle|append|arg|args|arity|array|as|asec|asech|asin|asinh|atan|atan2|atanh|attr|attrs|average|before|benchmark|blend|break|call|capitalize|case|ceil|chop|clear|clip|close|color|combine|conj|continue|copy|cos|cosh|crc|csec|csech|ctan|ctanh|cursor|darken|dec|decode|define|delete|desaturate|deviation|dialog|dictionary|difference|digest|digits|div|do|download|drop|dup|e|else|empty|encode|ensure|env|escape|execute|exit|exp|extend|extract|factors|fdiv|filter|first|flatten|floor|fold|from|function|gamma|gcd|get|goto|hash|hypot|if|inc|indent|index|infinity|info|input|insert|inspect|intersection|invert|jaro|join|keys|kurtosis|last|let|levenshtein|lighten|list|ln|log|loop|lower|mail|map|match|max|median|min|mod|module|mul|nand|neg|new|nor|normalize|not|now|null|open|or|outdent|pad|palette|panic|path|pause|permissions|permutate|pi|pop|popup|pow|powerset|powmod|prefix|print|prints|process|product|query|random|range|read|relative|remove|rename|render|repeat|replace|request|return|reverse|round|sample|saturate|script|sec|sech|select|serve|set|shl|shr|shuffle|sin|sinh|size|skewness|slice|sort|spin|split|sqrt|squeeze|stack|strip|sub|suffix|sum|switch|symbols|symlink|sys|take|tan|tanh|terminal|terminate|to|truncate|try|type|unclip|union|unique|unless|until|unzip|upper|values|var|variance|volume|webview|while|with|wordwrap|write|xnor|xor|zip)\\b/,\n            alias: \"keyword\"\n        },\n        sugar: {\n            pattern: /->|=>|\\||::/,\n            alias: \"operator\"\n        },\n        punctuation: /[()[\\],]/,\n        symbol: {\n            pattern: /<:|-:|ø|@|#|\\+|\\||\\*|\\$|---|-|%|\\/|\\.\\.|\\^|~|=|<|>|\\\\/\n        },\n        boolean: {\n            pattern: /\\b(?:false|maybe|true)\\b/\n        }\n    }, e.languages.art = e.languages.arturo;\n}(Prism);\n!function(t) {\n    var n = {\n        pattern: /(^[ \\t]*)\\[(?!\\[)(?:([\"'$`])(?:(?!\\2)[^\\\\]|\\\\.)*\\2|\\[(?:[^\\[\\]\\\\]|\\\\.)*\\]|[^\\[\\]\\\\\"'$`]|\\\\.)*\\]/m,\n        lookbehind: !0,\n        inside: {\n            quoted: {\n                pattern: /([$`])(?:(?!\\1)[^\\\\]|\\\\.)*\\1/,\n                inside: {\n                    punctuation: /^[$`]|[$`]$/\n                }\n            },\n            interpreted: {\n                pattern: /'(?:[^'\\\\]|\\\\.)*'/,\n                inside: {\n                    punctuation: /^'|'$/\n                }\n            },\n            string: /\"(?:[^\"\\\\]|\\\\.)*\"/,\n            variable: /\\w+(?==)/,\n            punctuation: /^\\[|\\]$|,/,\n            operator: /=/,\n            \"attr-value\": /(?!^\\s+$).+/\n        }\n    }, i = t.languages.asciidoc = {\n        \"comment-block\": {\n            pattern: /^(\\/{4,})$[\\s\\S]*?^\\1/m,\n            alias: \"comment\"\n        },\n        table: {\n            pattern: /^\\|={3,}(?:(?:\\r?\\n|\\r(?!\\n)).*)*?(?:\\r?\\n|\\r)\\|={3,}$/m,\n            inside: {\n                specifiers: {\n                    pattern: /(?:(?:(?:\\d+(?:\\.\\d+)?|\\.\\d+)[+*](?:[<^>](?:\\.[<^>])?|\\.[<^>])?|[<^>](?:\\.[<^>])?|\\.[<^>])[a-z]*|[a-z]+)(?=\\|)/,\n                    alias: \"attr-value\"\n                },\n                punctuation: {\n                    pattern: /(^|[^\\\\])[|!]=*/,\n                    lookbehind: !0\n                }\n            }\n        },\n        \"passthrough-block\": {\n            pattern: /^(\\+{4,})$[\\s\\S]*?^\\1$/m,\n            inside: {\n                punctuation: /^\\++|\\++$/\n            }\n        },\n        \"literal-block\": {\n            pattern: /^(-{4,}|\\.{4,})$[\\s\\S]*?^\\1$/m,\n            inside: {\n                punctuation: /^(?:-+|\\.+)|(?:-+|\\.+)$/\n            }\n        },\n        \"other-block\": {\n            pattern: /^(--|\\*{4,}|_{4,}|={4,})$[\\s\\S]*?^\\1$/m,\n            inside: {\n                punctuation: /^(?:-+|\\*+|_+|=+)|(?:-+|\\*+|_+|=+)$/\n            }\n        },\n        \"list-punctuation\": {\n            pattern: /(^[ \\t]*)(?:-|\\*{1,5}|\\.{1,5}|(?:[a-z]|\\d+)\\.|[xvi]+\\))(?= )/im,\n            lookbehind: !0,\n            alias: \"punctuation\"\n        },\n        \"list-label\": {\n            pattern: /(^[ \\t]*)[a-z\\d].+(?::{2,4}|;;)(?=\\s)/im,\n            lookbehind: !0,\n            alias: \"symbol\"\n        },\n        \"indented-block\": {\n            pattern: /((\\r?\\n|\\r)\\2)([ \\t]+)\\S.*(?:(?:\\r?\\n|\\r)\\3.+)*(?=\\2{2}|$)/,\n            lookbehind: !0\n        },\n        comment: /^\\/\\/.*/m,\n        title: {\n            pattern: /^.+(?:\\r?\\n|\\r)(?:={3,}|-{3,}|~{3,}|\\^{3,}|\\+{3,})$|^={1,5} .+|^\\.(?![\\s.]).*/m,\n            alias: \"important\",\n            inside: {\n                punctuation: /^(?:\\.|=+)|(?:=+|-+|~+|\\^+|\\++)$/\n            }\n        },\n        \"attribute-entry\": {\n            pattern: /^:[^:\\r\\n]+:(?: .*?(?: \\+(?:\\r?\\n|\\r).*?)*)?$/m,\n            alias: \"tag\"\n        },\n        attributes: n,\n        hr: {\n            pattern: /^'{3,}$/m,\n            alias: \"punctuation\"\n        },\n        \"page-break\": {\n            pattern: /^<{3,}$/m,\n            alias: \"punctuation\"\n        },\n        admonition: {\n            pattern: /^(?:CAUTION|IMPORTANT|NOTE|TIP|WARNING):/m,\n            alias: \"keyword\"\n        },\n        callout: [\n            {\n                pattern: /(^[ \\t]*)<?\\d*>/m,\n                lookbehind: !0,\n                alias: \"symbol\"\n            },\n            {\n                pattern: /<\\d+>/,\n                alias: \"symbol\"\n            }\n        ],\n        macro: {\n            pattern: /\\b[a-z\\d][a-z\\d-]*::?(?:[^\\s\\[\\]]*\\[(?:[^\\]\\\\\"']|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*\\1|\\\\.)*\\])/,\n            inside: {\n                function: /^[a-z\\d-]+(?=:)/,\n                punctuation: /^::?/,\n                attributes: {\n                    pattern: /(?:\\[(?:[^\\]\\\\\"']|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*\\1|\\\\.)*\\])/,\n                    inside: n.inside\n                }\n            }\n        },\n        inline: {\n            pattern: /(^|[^\\\\])(?:(?:\\B\\[(?:[^\\]\\\\\"']|([\"'])(?:(?!\\2)[^\\\\]|\\\\.)*\\2|\\\\.)*\\])?(?:\\b_(?!\\s)(?: _|[^_\\\\\\r\\n]|\\\\.)+(?:(?:\\r?\\n|\\r)(?: _|[^_\\\\\\r\\n]|\\\\.)+)*_\\b|\\B``(?!\\s).+?(?:(?:\\r?\\n|\\r).+?)*''\\B|\\B`(?!\\s)(?:[^`'\\s]|\\s+\\S)+['`]\\B|\\B(['*+#])(?!\\s)(?: \\3|(?!\\3)[^\\\\\\r\\n]|\\\\.)+(?:(?:\\r?\\n|\\r)(?: \\3|(?!\\3)[^\\\\\\r\\n]|\\\\.)+)*\\3\\B)|(?:\\[(?:[^\\]\\\\\"']|([\"'])(?:(?!\\4)[^\\\\]|\\\\.)*\\4|\\\\.)*\\])?(?:(__|\\*\\*|\\+\\+\\+?|##|\\$\\$|[~^]).+?(?:(?:\\r?\\n|\\r).+?)*\\5|\\{[^}\\r\\n]+\\}|\\[\\[\\[?.+?(?:(?:\\r?\\n|\\r).+?)*\\]?\\]\\]|<<.+?(?:(?:\\r?\\n|\\r).+?)*>>|\\(\\(\\(?.+?(?:(?:\\r?\\n|\\r).+?)*\\)?\\)\\)))/m,\n            lookbehind: !0,\n            inside: {\n                attributes: n,\n                url: {\n                    pattern: /^(?:\\[\\[\\[?.+?\\]?\\]\\]|<<.+?>>)$/,\n                    inside: {\n                        punctuation: /^(?:\\[\\[\\[?|<<)|(?:\\]\\]\\]?|>>)$/\n                    }\n                },\n                \"attribute-ref\": {\n                    pattern: /^\\{.+\\}$/,\n                    inside: {\n                        variable: {\n                            pattern: /(^\\{)[a-z\\d,+_-]+/,\n                            lookbehind: !0\n                        },\n                        operator: /^[=?!#%@$]|!(?=[:}])/,\n                        punctuation: /^\\{|\\}$|::?/\n                    }\n                },\n                italic: {\n                    pattern: /^(['_])[\\s\\S]+\\1$/,\n                    inside: {\n                        punctuation: /^(?:''?|__?)|(?:''?|__?)$/\n                    }\n                },\n                bold: {\n                    pattern: /^\\*[\\s\\S]+\\*$/,\n                    inside: {\n                        punctuation: /^\\*\\*?|\\*\\*?$/\n                    }\n                },\n                punctuation: /^(?:``?|\\+{1,3}|##?|\\$\\$|[~^]|\\(\\(\\(?)|(?:''?|\\+{1,3}|##?|\\$\\$|[~^`]|\\)?\\)\\))$/\n            }\n        },\n        replacement: {\n            pattern: /\\((?:C|R|TM)\\)/,\n            alias: \"builtin\"\n        },\n        entity: /&#?[\\da-z]{1,8};/i,\n        \"line-continuation\": {\n            pattern: /(^| )\\+$/m,\n            lookbehind: !0,\n            alias: \"punctuation\"\n        }\n    };\n    function e(t) {\n        for(var n = {}, e = 0, a = (t = t.split(\" \")).length; e < a; e++)n[t[e]] = i[t[e]];\n        return n;\n    }\n    n.inside.interpreted.inside.rest = e(\"macro inline replacement entity\"), i[\"passthrough-block\"].inside.rest = e(\"macro\"), i[\"literal-block\"].inside.rest = e(\"callout\"), i.table.inside.rest = e(\"comment-block passthrough-block literal-block other-block list-punctuation indented-block comment title attribute-entry attributes hr page-break admonition list-label callout macro inline replacement entity line-continuation\"), i[\"other-block\"].inside.rest = e(\"table list-punctuation indented-block comment attribute-entry attributes hr page-break admonition list-label macro inline replacement entity line-continuation\"), i.title.inside.rest = e(\"macro inline replacement entity\"), t.hooks.add(\"wrap\", function(t) {\n        \"entity\" === t.type && (t.attributes.title = t.content.replace(/&amp;/, \"&\"));\n    }), t.languages.adoc = t.languages.asciidoc;\n}(Prism);\n!function(e) {\n    function n(e, n) {\n        return e.replace(/<<(\\d+)>>/g, function(e, s) {\n            return \"(?:\" + n[+s] + \")\";\n        });\n    }\n    function s(e, s, a) {\n        return RegExp(n(e, s), a || \"\");\n    }\n    function a(e, n) {\n        for(var s = 0; s < n; s++)e = e.replace(/<<self>>/g, function() {\n            return \"(?:\" + e + \")\";\n        });\n        return e.replace(/<<self>>/g, \"[^\\\\s\\\\S]\");\n    }\n    var t = \"bool byte char decimal double dynamic float int long object sbyte short string uint ulong ushort var void\", r = \"class enum interface record struct\", i = \"add alias and ascending async await by descending from(?=\\\\s*(?:\\\\w|$)) get global group into init(?=\\\\s*;) join let nameof not notnull on or orderby partial remove select set unmanaged value when where with(?=\\\\s*{)\", o = \"abstract as base break case catch checked const continue default delegate do else event explicit extern finally fixed for foreach goto if implicit in internal is lock namespace new null operator out override params private protected public readonly ref return sealed sizeof stackalloc static switch this throw try typeof unchecked unsafe using virtual volatile while yield\";\n    function l(e) {\n        return \"\\\\b(?:\" + e.trim().replace(/ /g, \"|\") + \")\\\\b\";\n    }\n    var d = l(r), p = RegExp(l(t + \" \" + r + \" \" + i + \" \" + o)), c = l(r + \" \" + i + \" \" + o), u = l(t + \" \" + r + \" \" + o), g = a(\"<(?:[^<>;=+\\\\-*/%&|^]|<<self>>)*>\", 2), b = a(\"\\\\((?:[^()]|<<self>>)*\\\\)\", 2), h = \"@?\\\\b[A-Za-z_]\\\\w*\\\\b\", f = n(\"<<0>>(?:\\\\s*<<1>>)?\", [\n        h,\n        g\n    ]), m = n(\"(?!<<0>>)<<1>>(?:\\\\s*\\\\.\\\\s*<<1>>)*\", [\n        c,\n        f\n    ]), k = \"\\\\[\\\\s*(?:,\\\\s*)*\\\\]\", y = n(\"<<0>>(?:\\\\s*(?:\\\\?\\\\s*)?<<1>>)*(?:\\\\s*\\\\?)?\", [\n        m,\n        k\n    ]), w = n(\"[^,()<>[\\\\];=+\\\\-*/%&|^]|<<0>>|<<1>>|<<2>>\", [\n        g,\n        b,\n        k\n    ]), v = n(\"\\\\(<<0>>+(?:,<<0>>+)+\\\\)\", [\n        w\n    ]), x = n(\"(?:<<0>>|<<1>>)(?:\\\\s*(?:\\\\?\\\\s*)?<<2>>)*(?:\\\\s*\\\\?)?\", [\n        v,\n        m,\n        k\n    ]), $ = {\n        keyword: p,\n        punctuation: /[<>()?,.:[\\]]/\n    }, _ = \"'(?:[^\\r\\n'\\\\\\\\]|\\\\\\\\.|\\\\\\\\[Uux][\\\\da-fA-F]{1,8})'\", B = '\"(?:\\\\\\\\.|[^\\\\\\\\\"\\r\\n])*\"';\n    e.languages.csharp = e.languages.extend(\"clike\", {\n        string: [\n            {\n                pattern: s(\"(^|[^$\\\\\\\\])<<0>>\", [\n                    '@\"(?:\"\"|\\\\\\\\[^]|[^\\\\\\\\\"])*\"(?!\")'\n                ]),\n                lookbehind: !0,\n                greedy: !0\n            },\n            {\n                pattern: s(\"(^|[^@$\\\\\\\\])<<0>>\", [\n                    B\n                ]),\n                lookbehind: !0,\n                greedy: !0\n            }\n        ],\n        \"class-name\": [\n            {\n                pattern: s(\"(\\\\busing\\\\s+static\\\\s+)<<0>>(?=\\\\s*;)\", [\n                    m\n                ]),\n                lookbehind: !0,\n                inside: $\n            },\n            {\n                pattern: s(\"(\\\\busing\\\\s+<<0>>\\\\s*=\\\\s*)<<1>>(?=\\\\s*;)\", [\n                    h,\n                    x\n                ]),\n                lookbehind: !0,\n                inside: $\n            },\n            {\n                pattern: s(\"(\\\\busing\\\\s+)<<0>>(?=\\\\s*=)\", [\n                    h\n                ]),\n                lookbehind: !0\n            },\n            {\n                pattern: s(\"(\\\\b<<0>>\\\\s+)<<1>>\", [\n                    d,\n                    f\n                ]),\n                lookbehind: !0,\n                inside: $\n            },\n            {\n                pattern: s(\"(\\\\bcatch\\\\s*\\\\(\\\\s*)<<0>>\", [\n                    m\n                ]),\n                lookbehind: !0,\n                inside: $\n            },\n            {\n                pattern: s(\"(\\\\bwhere\\\\s+)<<0>>\", [\n                    h\n                ]),\n                lookbehind: !0\n            },\n            {\n                pattern: s(\"(\\\\b(?:is(?:\\\\s+not)?|as)\\\\s+)<<0>>\", [\n                    y\n                ]),\n                lookbehind: !0,\n                inside: $\n            },\n            {\n                pattern: s(\"\\\\b<<0>>(?=\\\\s+(?!<<1>>|with\\\\s*\\\\{)<<2>>(?:\\\\s*[=,;:{)\\\\]]|\\\\s+(?:in|when)\\\\b))\", [\n                    x,\n                    u,\n                    h\n                ]),\n                inside: $\n            }\n        ],\n        keyword: p,\n        number: /(?:\\b0(?:x[\\da-f_]*[\\da-f]|b[01_]*[01])|(?:\\B\\.\\d+(?:_+\\d+)*|\\b\\d+(?:_+\\d+)*(?:\\.\\d+(?:_+\\d+)*)?)(?:e[-+]?\\d+(?:_+\\d+)*)?)(?:[dflmu]|lu|ul)?\\b/i,\n        operator: />>=?|<<=?|[-=]>|([-+&|])\\1|~|\\?\\?=?|[-+*/%&|^!=<>]=?/,\n        punctuation: /\\?\\.?|::|[{}[\\];(),.:]/\n    }), e.languages.insertBefore(\"csharp\", \"number\", {\n        range: {\n            pattern: /\\.\\./,\n            alias: \"operator\"\n        }\n    }), e.languages.insertBefore(\"csharp\", \"punctuation\", {\n        \"named-parameter\": {\n            pattern: s(\"([(,]\\\\s*)<<0>>(?=\\\\s*:)\", [\n                h\n            ]),\n            lookbehind: !0,\n            alias: \"punctuation\"\n        }\n    }), e.languages.insertBefore(\"csharp\", \"class-name\", {\n        namespace: {\n            pattern: s(\"(\\\\b(?:namespace|using)\\\\s+)<<0>>(?:\\\\s*\\\\.\\\\s*<<0>>)*(?=\\\\s*[;{])\", [\n                h\n            ]),\n            lookbehind: !0,\n            inside: {\n                punctuation: /\\./\n            }\n        },\n        \"type-expression\": {\n            pattern: s(\"(\\\\b(?:default|sizeof|typeof)\\\\s*\\\\(\\\\s*(?!\\\\s))(?:[^()\\\\s]|\\\\s(?!\\\\s)|<<0>>)*(?=\\\\s*\\\\))\", [\n                b\n            ]),\n            lookbehind: !0,\n            alias: \"class-name\",\n            inside: $\n        },\n        \"return-type\": {\n            pattern: s(\"<<0>>(?=\\\\s+(?:<<1>>\\\\s*(?:=>|[({]|\\\\.\\\\s*this\\\\s*\\\\[)|this\\\\s*\\\\[))\", [\n                x,\n                m\n            ]),\n            inside: $,\n            alias: \"class-name\"\n        },\n        \"constructor-invocation\": {\n            pattern: s(\"(\\\\bnew\\\\s+)<<0>>(?=\\\\s*[[({])\", [\n                x\n            ]),\n            lookbehind: !0,\n            inside: $,\n            alias: \"class-name\"\n        },\n        \"generic-method\": {\n            pattern: s(\"<<0>>\\\\s*<<1>>(?=\\\\s*\\\\()\", [\n                h,\n                g\n            ]),\n            inside: {\n                function: s(\"^<<0>>\", [\n                    h\n                ]),\n                generic: {\n                    pattern: RegExp(g),\n                    alias: \"class-name\",\n                    inside: $\n                }\n            }\n        },\n        \"type-list\": {\n            pattern: s(\"\\\\b((?:<<0>>\\\\s+<<1>>|record\\\\s+<<1>>\\\\s*<<5>>|where\\\\s+<<2>>)\\\\s*:\\\\s*)(?:<<3>>|<<4>>|<<1>>\\\\s*<<5>>|<<6>>)(?:\\\\s*,\\\\s*(?:<<3>>|<<4>>|<<6>>))*(?=\\\\s*(?:where|[{;]|=>|$))\", [\n                d,\n                f,\n                h,\n                x,\n                p.source,\n                b,\n                \"\\\\bnew\\\\s*\\\\(\\\\s*\\\\)\"\n            ]),\n            lookbehind: !0,\n            inside: {\n                \"record-arguments\": {\n                    pattern: s(\"(^(?!new\\\\s*\\\\()<<0>>\\\\s*)<<1>>\", [\n                        f,\n                        b\n                    ]),\n                    lookbehind: !0,\n                    greedy: !0,\n                    inside: e.languages.csharp\n                },\n                keyword: p,\n                \"class-name\": {\n                    pattern: RegExp(x),\n                    greedy: !0,\n                    inside: $\n                },\n                punctuation: /[,()]/\n            }\n        },\n        preprocessor: {\n            pattern: /(^[\\t ]*)#.*/m,\n            lookbehind: !0,\n            alias: \"property\",\n            inside: {\n                directive: {\n                    pattern: /(#)\\b(?:define|elif|else|endif|endregion|error|if|line|nullable|pragma|region|undef|warning)\\b/,\n                    lookbehind: !0,\n                    alias: \"keyword\"\n                }\n            }\n        }\n    });\n    var E = B + \"|\" + _, R = n(\"/(?![*/])|//[^\\r\\n]*[\\r\\n]|/\\\\*(?:[^*]|\\\\*(?!/))*\\\\*/|<<0>>\", [\n        E\n    ]), z = a(n(\"[^\\\"'/()]|<<0>>|\\\\(<<self>>*\\\\)\", [\n        R\n    ]), 2), S = \"\\\\b(?:assembly|event|field|method|module|param|property|return|type)\\\\b\", j = n(\"<<0>>(?:\\\\s*\\\\(<<1>>*\\\\))?\", [\n        m,\n        z\n    ]);\n    e.languages.insertBefore(\"csharp\", \"class-name\", {\n        attribute: {\n            pattern: s(\"((?:^|[^\\\\s\\\\w>)?])\\\\s*\\\\[\\\\s*)(?:<<0>>\\\\s*:\\\\s*)?<<1>>(?:\\\\s*,\\\\s*<<1>>)*(?=\\\\s*\\\\])\", [\n                S,\n                j\n            ]),\n            lookbehind: !0,\n            greedy: !0,\n            inside: {\n                target: {\n                    pattern: s(\"^<<0>>(?=\\\\s*:)\", [\n                        S\n                    ]),\n                    alias: \"keyword\"\n                },\n                \"attribute-arguments\": {\n                    pattern: s(\"\\\\(<<0>>*\\\\)\", [\n                        z\n                    ]),\n                    inside: e.languages.csharp\n                },\n                \"class-name\": {\n                    pattern: RegExp(m),\n                    inside: {\n                        punctuation: /\\./\n                    }\n                },\n                punctuation: /[:,]/\n            }\n        }\n    });\n    var A = \":[^}\\r\\n]+\", F = a(n(\"[^\\\"'/()]|<<0>>|\\\\(<<self>>*\\\\)\", [\n        R\n    ]), 2), P = n(\"\\\\{(?!\\\\{)(?:(?![}:])<<0>>)*<<1>>?\\\\}\", [\n        F,\n        A\n    ]), U = a(n(\"[^\\\"'/()]|/(?!\\\\*)|/\\\\*(?:[^*]|\\\\*(?!/))*\\\\*/|<<0>>|\\\\(<<self>>*\\\\)\", [\n        E\n    ]), 2), Z = n(\"\\\\{(?!\\\\{)(?:(?![}:])<<0>>)*<<1>>?\\\\}\", [\n        U,\n        A\n    ]);\n    function q(n, a) {\n        return {\n            interpolation: {\n                pattern: s(\"((?:^|[^{])(?:\\\\{\\\\{)*)<<0>>\", [\n                    n\n                ]),\n                lookbehind: !0,\n                inside: {\n                    \"format-string\": {\n                        pattern: s(\"(^\\\\{(?:(?![}:])<<0>>)*)<<1>>(?=\\\\}$)\", [\n                            a,\n                            A\n                        ]),\n                        lookbehind: !0,\n                        inside: {\n                            punctuation: /^:/\n                        }\n                    },\n                    punctuation: /^\\{|\\}$/,\n                    expression: {\n                        pattern: /[\\s\\S]+/,\n                        alias: \"language-csharp\",\n                        inside: e.languages.csharp\n                    }\n                }\n            },\n            string: /[\\s\\S]+/\n        };\n    }\n    e.languages.insertBefore(\"csharp\", \"string\", {\n        \"interpolation-string\": [\n            {\n                pattern: s('(^|[^\\\\\\\\])(?:\\\\$@|@\\\\$)\"(?:\"\"|\\\\\\\\[^]|\\\\{\\\\{|<<0>>|[^\\\\\\\\{\"])*\"', [\n                    P\n                ]),\n                lookbehind: !0,\n                greedy: !0,\n                inside: q(P, F)\n            },\n            {\n                pattern: s('(^|[^@\\\\\\\\])\\\\$\"(?:\\\\\\\\.|\\\\{\\\\{|<<0>>|[^\\\\\\\\\"{])*\"', [\n                    Z\n                ]),\n                lookbehind: !0,\n                greedy: !0,\n                inside: q(Z, U)\n            }\n        ],\n        char: {\n            pattern: RegExp(_),\n            greedy: !0\n        }\n    }), e.languages.dotnet = e.languages.cs = e.languages.csharp;\n}(Prism);\nPrism.languages.aspnet = Prism.languages.extend(\"markup\", {\n    \"page-directive\": {\n        pattern: /<%\\s*@.*%>/,\n        alias: \"tag\",\n        inside: {\n            \"page-directive\": {\n                pattern: /<%\\s*@\\s*(?:Assembly|Control|Implements|Import|Master(?:Type)?|OutputCache|Page|PreviousPageType|Reference|Register)?|%>/i,\n                alias: \"tag\"\n            },\n            rest: Prism.languages.markup.tag.inside\n        }\n    },\n    directive: {\n        pattern: /<%.*%>/,\n        alias: \"tag\",\n        inside: {\n            directive: {\n                pattern: /<%\\s*?[$=%#:]{0,2}|%>/,\n                alias: \"tag\"\n            },\n            rest: Prism.languages.csharp\n        }\n    }\n}), Prism.languages.aspnet.tag.pattern = /<(?!%)\\/?[^\\s>\\/]+(?:\\s+[^\\s>\\/=]+(?:=(?:(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|[^\\s'\">=]+))?)*\\s*\\/?>/, Prism.languages.insertBefore(\"inside\", \"punctuation\", {\n    directive: Prism.languages.aspnet.directive\n}, Prism.languages.aspnet.tag.inside[\"attr-value\"]), Prism.languages.insertBefore(\"aspnet\", \"comment\", {\n    \"asp-comment\": {\n        pattern: /<%--[\\s\\S]*?--%>/,\n        alias: [\n            \"asp\",\n            \"comment\"\n        ]\n    }\n}), Prism.languages.insertBefore(\"aspnet\", Prism.languages.javascript ? \"script\" : \"tag\", {\n    \"asp-script\": {\n        pattern: /(<script(?=.*runat=['\"]?server\\b)[^>]*>)[\\s\\S]*?(?=<\\/script>)/i,\n        lookbehind: !0,\n        alias: [\n            \"asp\",\n            \"script\"\n        ],\n        inside: Prism.languages.csharp || {}\n    }\n});\nPrism.languages.asm6502 = {\n    comment: /;.*/,\n    directive: {\n        pattern: /\\.\\w+(?= )/,\n        alias: \"property\"\n    },\n    string: /([\"'`])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    \"op-code\": {\n        pattern: /\\b(?:ADC|AND|ASL|BCC|BCS|BEQ|BIT|BMI|BNE|BPL|BRK|BVC|BVS|CLC|CLD|CLI|CLV|CMP|CPX|CPY|DEC|DEX|DEY|EOR|INC|INX|INY|JMP|JSR|LDA|LDX|LDY|LSR|NOP|ORA|PHA|PHP|PLA|PLP|ROL|ROR|RTI|RTS|SBC|SEC|SED|SEI|STA|STX|STY|TAX|TAY|TSX|TXA|TXS|TYA|adc|and|asl|bcc|bcs|beq|bit|bmi|bne|bpl|brk|bvc|bvs|clc|cld|cli|clv|cmp|cpx|cpy|dec|dex|dey|eor|inc|inx|iny|jmp|jsr|lda|ldx|ldy|lsr|nop|ora|pha|php|pla|plp|rol|ror|rti|rts|sbc|sec|sed|sei|sta|stx|sty|tax|tay|tsx|txa|txs|tya)\\b/,\n        alias: \"keyword\"\n    },\n    \"hex-number\": {\n        pattern: /#?\\$[\\da-f]{1,4}\\b/i,\n        alias: \"number\"\n    },\n    \"binary-number\": {\n        pattern: /#?%[01]+\\b/,\n        alias: \"number\"\n    },\n    \"decimal-number\": {\n        pattern: /#?\\b\\d+\\b/,\n        alias: \"number\"\n    },\n    register: {\n        pattern: /\\b[xya]\\b/i,\n        alias: \"variable\"\n    },\n    punctuation: /[(),:]/\n};\nPrism.languages.asmatmel = {\n    comment: {\n        pattern: /;.*/,\n        greedy: !0\n    },\n    string: {\n        pattern: /([\"'`])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n        greedy: !0\n    },\n    constant: /\\b(?:PORT[A-Z]|DDR[A-Z]|(?:DD|P)[A-Z](?:\\d|[0-2]\\d|3[01]))\\b/,\n    directive: {\n        pattern: /\\.\\w+(?= )/,\n        alias: \"property\"\n    },\n    \"r-register\": {\n        pattern: /\\br(?:\\d|[12]\\d|3[01])\\b/,\n        alias: \"variable\"\n    },\n    \"op-code\": {\n        pattern: /\\b(?:ADC|ADD|ADIW|AND|ANDI|ASR|BCLR|BLD|BRBC|BRBS|BRCC|BRCS|BREAK|BREQ|BRGE|BRHC|BRHS|BRID|BRIE|BRLO|BRLT|BRMI|BRNE|BRPL|BRSH|BRTC|BRTS|BRVC|BRVS|BSET|BST|CALL|CBI|CBR|CLC|CLH|CLI|CLN|CLR|CLS|CLT|CLV|CLZ|COM|CP|CPC|CPI|CPSE|DEC|DES|EICALL|EIJMP|ELPM|EOR|FMUL|FMULS|FMULSU|ICALL|IJMP|IN|INC|JMP|LAC|LAS|LAT|LD|LD[A-Za-z0-9]|LPM|LSL|LSR|MOV|MOVW|MUL|MULS|MULSU|NEG|NOP|OR|ORI|OUT|POP|PUSH|RCALL|RET|RETI|RJMP|ROL|ROR|SBC|SBCI|SBI|SBIC|SBIS|SBIW|SBR|SBRC|SBRS|SEC|SEH|SEI|SEN|SER|SES|SET|SEV|SEZ|SLEEP|SPM|ST|ST[A-Z0-9]|SUB|SUBI|SWAP|TST|WDR|XCH|adc|add|adiw|and|andi|asr|bclr|bld|brbc|brbs|brcc|brcs|break|breq|brge|brhc|brhs|brid|brie|brlo|brlt|brmi|brne|brpl|brsh|brtc|brts|brvc|brvs|bset|bst|call|cbi|cbr|clc|clh|cli|cln|clr|cls|clt|clv|clz|com|cp|cpc|cpi|cpse|dec|des|eicall|eijmp|elpm|eor|fmul|fmuls|fmulsu|icall|ijmp|in|inc|jmp|lac|las|lat|ld|ld[a-z0-9]|lpm|lsl|lsr|mov|movw|mul|muls|mulsu|neg|nop|or|ori|out|pop|push|rcall|ret|reti|rjmp|rol|ror|sbc|sbci|sbi|sbic|sbis|sbiw|sbr|sbrc|sbrs|sec|seh|sei|sen|ser|ses|set|sev|sez|sleep|spm|st|st[a-zA-Z0-9]|sub|subi|swap|tst|wdr|xch)\\b/,\n        alias: \"keyword\"\n    },\n    \"hex-number\": {\n        pattern: /#?\\$[\\da-f]{2,4}\\b/i,\n        alias: \"number\"\n    },\n    \"binary-number\": {\n        pattern: /#?%[01]+\\b/,\n        alias: \"number\"\n    },\n    \"decimal-number\": {\n        pattern: /#?\\b\\d+\\b/,\n        alias: \"number\"\n    },\n    register: {\n        pattern: /\\b[acznvshtixy]\\b/i,\n        alias: \"variable\"\n    },\n    operator: />>=?|<<=?|&[&=]?|\\|[\\|=]?|[-+*/%^!=<>?]=?/,\n    punctuation: /[(),:]/\n};\nPrism.languages.autohotkey = {\n    comment: [\n        {\n            pattern: /(^|\\s);.*/,\n            lookbehind: !0\n        },\n        {\n            pattern: /(^[\\t ]*)\\/\\*(?:[\\r\\n](?![ \\t]*\\*\\/)|[^\\r\\n])*(?:[\\r\\n][ \\t]*\\*\\/)?/m,\n            lookbehind: !0,\n            greedy: !0\n        }\n    ],\n    tag: {\n        pattern: /^([ \\t]*)[^\\s,`\":]+(?=:[ \\t]*$)/m,\n        lookbehind: !0\n    },\n    string: /\"(?:[^\"\\n\\r]|\"\")*\"/,\n    variable: /%\\w+%/,\n    number: /\\b0x[\\dA-Fa-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[Ee]-?\\d+)?/,\n    operator: /\\?|\\/\\/?=?|:=|\\|[=|]?|&[=&]?|\\+[=+]?|-[=-]?|\\*[=*]?|<(?:<=?|>|=)?|>>?=?|[.^!=~]=?|\\b(?:AND|NOT|OR)\\b/,\n    boolean: /\\b(?:false|true)\\b/,\n    command: {\n        pattern: /\\b(?:AutoTrim|BlockInput|Break|Click|ClipWait|Continue|Control|ControlClick|ControlFocus|ControlGet|ControlGetFocus|ControlGetPos|ControlGetText|ControlMove|ControlSend|ControlSendRaw|ControlSetText|CoordMode|Critical|DetectHiddenText|DetectHiddenWindows|Drive|DriveGet|DriveSpaceFree|EnvAdd|EnvDiv|EnvGet|EnvMult|EnvSet|EnvSub|EnvUpdate|Exit|ExitApp|FileAppend|FileCopy|FileCopyDir|FileCreateDir|FileCreateShortcut|FileDelete|FileEncoding|FileGetAttrib|FileGetShortcut|FileGetSize|FileGetTime|FileGetVersion|FileInstall|FileMove|FileMoveDir|FileRead|FileReadLine|FileRecycle|FileRecycleEmpty|FileRemoveDir|FileSelectFile|FileSelectFolder|FileSetAttrib|FileSetTime|FormatTime|GetKeyState|Gosub|Goto|GroupActivate|GroupAdd|GroupClose|GroupDeactivate|Gui|GuiControl|GuiControlGet|Hotkey|ImageSearch|IniDelete|IniRead|IniWrite|Input|InputBox|KeyWait|ListHotkeys|ListLines|ListVars|Loop|Menu|MouseClick|MouseClickDrag|MouseGetPos|MouseMove|MsgBox|OnExit|OutputDebug|Pause|PixelGetColor|PixelSearch|PostMessage|Process|Progress|Random|RegDelete|RegRead|RegWrite|Reload|Repeat|Return|Run|RunAs|RunWait|Send|SendEvent|SendInput|SendMessage|SendMode|SendPlay|SendRaw|SetBatchLines|SetCapslockState|SetControlDelay|SetDefaultMouseSpeed|SetEnv|SetFormat|SetKeyDelay|SetMouseDelay|SetNumlockState|SetRegView|SetScrollLockState|SetStoreCapslockMode|SetTimer|SetTitleMatchMode|SetWinDelay|SetWorkingDir|Shutdown|Sleep|Sort|SoundBeep|SoundGet|SoundGetWaveVolume|SoundPlay|SoundSet|SoundSetWaveVolume|SplashImage|SplashTextOff|SplashTextOn|SplitPath|StatusBarGetText|StatusBarWait|StringCaseSense|StringGetPos|StringLeft|StringLen|StringLower|StringMid|StringReplace|StringRight|StringSplit|StringTrimLeft|StringTrimRight|StringUpper|Suspend|SysGet|Thread|ToolTip|Transform|TrayTip|URLDownloadToFile|WinActivate|WinActivateBottom|WinClose|WinGet|WinGetActiveStats|WinGetActiveTitle|WinGetClass|WinGetPos|WinGetText|WinGetTitle|WinHide|WinKill|WinMaximize|WinMenuSelectItem|WinMinimize|WinMinimizeAll|WinMinimizeAllUndo|WinMove|WinRestore|WinSet|WinSetTitle|WinShow|WinWait|WinWaitActive|WinWaitClose|WinWaitNotActive)\\b/i,\n        alias: \"selector\"\n    },\n    constant: /\\b(?:a_ahkpath|a_ahkversion|a_appdata|a_appdatacommon|a_autotrim|a_batchlines|a_caretx|a_carety|a_computername|a_controldelay|a_cursor|a_dd|a_ddd|a_dddd|a_defaultmousespeed|a_desktop|a_desktopcommon|a_detecthiddentext|a_detecthiddenwindows|a_endchar|a_eventinfo|a_exitreason|a_fileencoding|a_formatfloat|a_formatinteger|a_gui|a_guicontrol|a_guicontrolevent|a_guievent|a_guiheight|a_guiwidth|a_guix|a_guiy|a_hour|a_iconfile|a_iconhidden|a_iconnumber|a_icontip|a_index|a_ipaddress1|a_ipaddress2|a_ipaddress3|a_ipaddress4|a_is64bitos|a_isadmin|a_iscompiled|a_iscritical|a_ispaused|a_issuspended|a_isunicode|a_keydelay|a_language|a_lasterror|a_linefile|a_linenumber|a_loopfield|a_loopfileattrib|a_loopfiledir|a_loopfileext|a_loopfilefullpath|a_loopfilelongpath|a_loopfilename|a_loopfileshortname|a_loopfileshortpath|a_loopfilesize|a_loopfilesizekb|a_loopfilesizemb|a_loopfiletimeaccessed|a_loopfiletimecreated|a_loopfiletimemodified|a_loopreadline|a_loopregkey|a_loopregname|a_loopregsubkey|a_loopregtimemodified|a_loopregtype|a_mday|a_min|a_mm|a_mmm|a_mmmm|a_mon|a_mousedelay|a_msec|a_mydocuments|a_now|a_nowutc|a_numbatchlines|a_ostype|a_osversion|a_priorhotkey|a_priorkey|a_programfiles|a_programs|a_programscommon|a_ptrsize|a_regview|a_screendpi|a_screenheight|a_screenwidth|a_scriptdir|a_scriptfullpath|a_scripthwnd|a_scriptname|a_sec|a_space|a_startmenu|a_startmenucommon|a_startup|a_startupcommon|a_stringcasesense|a_tab|a_temp|a_thisfunc|a_thishotkey|a_thislabel|a_thismenu|a_thismenuitem|a_thismenuitempos|a_tickcount|a_timeidle|a_timeidlephysical|a_timesincepriorhotkey|a_timesincethishotkey|a_titlematchmode|a_titlematchmodespeed|a_username|a_wday|a_windelay|a_windir|a_workingdir|a_yday|a_year|a_yweek|a_yyyy|clipboard|clipboardall|comspec|errorlevel|programfiles)\\b/i,\n    builtin: /\\b(?:abs|acos|asc|asin|atan|ceil|chr|class|comobjactive|comobjarray|comobjconnect|comobjcreate|comobjerror|comobjflags|comobjget|comobjquery|comobjtype|comobjvalue|cos|dllcall|exp|fileexist|Fileopen|floor|format|il_add|il_create|il_destroy|instr|isfunc|islabel|IsObject|ln|log|ltrim|lv_add|lv_delete|lv_deletecol|lv_getcount|lv_getnext|lv_gettext|lv_insert|lv_insertcol|lv_modify|lv_modifycol|lv_setimagelist|mod|numget|numput|onmessage|regexmatch|regexreplace|registercallback|round|rtrim|sb_seticon|sb_setparts|sb_settext|sin|sqrt|strlen|strreplace|strsplit|substr|tan|tv_add|tv_delete|tv_get|tv_getchild|tv_getcount|tv_getnext|tv_getparent|tv_getprev|tv_getselection|tv_gettext|tv_modify|varsetcapacity|winactive|winexist|__Call|__Get|__New|__Set)\\b/i,\n    symbol: /\\b(?:alt|altdown|altup|appskey|backspace|browser_back|browser_favorites|browser_forward|browser_home|browser_refresh|browser_search|browser_stop|bs|capslock|ctrl|ctrlbreak|ctrldown|ctrlup|del|delete|down|end|enter|esc|escape|f1|f10|f11|f12|f13|f14|f15|f16|f17|f18|f19|f2|f20|f21|f22|f23|f24|f3|f4|f5|f6|f7|f8|f9|home|ins|insert|joy1|joy10|joy11|joy12|joy13|joy14|joy15|joy16|joy17|joy18|joy19|joy2|joy20|joy21|joy22|joy23|joy24|joy25|joy26|joy27|joy28|joy29|joy3|joy30|joy31|joy32|joy4|joy5|joy6|joy7|joy8|joy9|joyaxes|joybuttons|joyinfo|joyname|joypov|joyr|joyu|joyv|joyx|joyy|joyz|lalt|launch_app1|launch_app2|launch_mail|launch_media|lbutton|lcontrol|lctrl|left|lshift|lwin|lwindown|lwinup|mbutton|media_next|media_play_pause|media_prev|media_stop|numlock|numpad0|numpad1|numpad2|numpad3|numpad4|numpad5|numpad6|numpad7|numpad8|numpad9|numpadadd|numpadclear|numpaddel|numpaddiv|numpaddot|numpaddown|numpadend|numpadenter|numpadhome|numpadins|numpadleft|numpadmult|numpadpgdn|numpadpgup|numpadright|numpadsub|numpadup|pgdn|pgup|printscreen|ralt|rbutton|rcontrol|rctrl|right|rshift|rwin|rwindown|rwinup|scrolllock|shift|shiftdown|shiftup|space|tab|up|volume_down|volume_mute|volume_up|wheeldown|wheelleft|wheelright|wheelup|xbutton1|xbutton2)\\b/i,\n    directive: {\n        pattern: /#[a-z]+\\b/i,\n        alias: \"important\"\n    },\n    keyword: /\\b(?:Abort|AboveNormal|Add|ahk_class|ahk_exe|ahk_group|ahk_id|ahk_pid|All|Alnum|Alpha|AltSubmit|AltTab|AltTabAndMenu|AltTabMenu|AltTabMenuDismiss|AlwaysOnTop|AutoSize|Background|BackgroundTrans|BelowNormal|between|BitAnd|BitNot|BitOr|BitShiftLeft|BitShiftRight|BitXOr|Bold|Border|Button|ByRef|Catch|Checkbox|Checked|CheckedGray|Choose|ChooseString|Close|Color|ComboBox|Contains|ControlList|Count|Date|DateTime|Days|DDL|Default|DeleteAll|Delimiter|Deref|Destroy|Digit|Disable|Disabled|DropDownList|Edit|Eject|Else|Enable|Enabled|Error|Exist|Expand|ExStyle|FileSystem|Finally|First|Flash|Float|FloatFast|Focus|Font|for|global|Grid|Group|GroupBox|GuiClose|GuiContextMenu|GuiDropFiles|GuiEscape|GuiSize|Hdr|Hidden|Hide|High|HKCC|HKCR|HKCU|HKEY_CLASSES_ROOT|HKEY_CURRENT_CONFIG|HKEY_CURRENT_USER|HKEY_LOCAL_MACHINE|HKEY_USERS|HKLM|HKU|Hours|HScroll|Icon|IconSmall|ID|IDLast|If|IfEqual|IfExist|IfGreater|IfGreaterOrEqual|IfInString|IfLess|IfLessOrEqual|IfMsgBox|IfNotEqual|IfNotExist|IfNotInString|IfWinActive|IfWinExist|IfWinNotActive|IfWinNotExist|Ignore|ImageList|in|Integer|IntegerFast|Interrupt|is|italic|Join|Label|LastFound|LastFoundExist|Limit|Lines|List|ListBox|ListView|local|Lock|Logoff|Low|Lower|Lowercase|MainWindow|Margin|Maximize|MaximizeBox|MaxSize|Minimize|MinimizeBox|MinMax|MinSize|Minutes|MonthCal|Mouse|Move|Multi|NA|No|NoActivate|NoDefault|NoHide|NoIcon|NoMainWindow|norm|Normal|NoSort|NoSortHdr|NoStandard|Not|NoTab|NoTimers|Number|Off|Ok|On|OwnDialogs|Owner|Parse|Password|Picture|Pixel|Pos|Pow|Priority|ProcessName|Radio|Range|Read|ReadOnly|Realtime|Redraw|Region|REG_BINARY|REG_DWORD|REG_EXPAND_SZ|REG_MULTI_SZ|REG_SZ|Relative|Rename|Report|Resize|Restore|Retry|RGB|Screen|Seconds|Section|Serial|SetLabel|ShiftAltTab|Show|Single|Slider|SortDesc|Standard|static|Status|StatusBar|StatusCD|strike|Style|Submit|SysMenu|Tab2|TabStop|Text|Theme|Throw|Tile|ToggleCheck|ToggleEnable|ToolWindow|Top|Topmost|TransColor|Transparent|Tray|TreeView|Try|TryAgain|Type|UnCheck|underline|Unicode|Unlock|Until|UpDown|Upper|Uppercase|UseErrorLevel|Vis|VisFirst|Visible|VScroll|Wait|WaitClose|WantCtrlA|WantF2|WantReturn|While|Wrap|Xdigit|xm|xp|xs|Yes|ym|yp|ys)\\b/i,\n    function: /[^(); \\t,\\n+*\\-=?>:\\\\\\/<&%\\[\\]]+(?=\\()/,\n    punctuation: /[{}[\\]():,]/\n};\nPrism.languages.autoit = {\n    comment: [\n        /;.*/,\n        {\n            pattern: /(^[\\t ]*)#(?:comments-start|cs)[\\s\\S]*?^[ \\t]*#(?:ce|comments-end)/m,\n            lookbehind: !0\n        }\n    ],\n    url: {\n        pattern: /(^[\\t ]*#include\\s+)(?:<[^\\r\\n>]+>|\"[^\\r\\n\"]+\")/m,\n        lookbehind: !0\n    },\n    string: {\n        pattern: /([\"'])(?:\\1\\1|(?!\\1)[^\\r\\n])*\\1/,\n        greedy: !0,\n        inside: {\n            variable: /([%$@])\\w+\\1/\n        }\n    },\n    directive: {\n        pattern: /(^[\\t ]*)#[\\w-]+/m,\n        lookbehind: !0,\n        alias: \"keyword\"\n    },\n    function: /\\b\\w+(?=\\()/,\n    variable: /[$@]\\w+/,\n    keyword: /\\b(?:Case|Const|Continue(?:Case|Loop)|Default|Dim|Do|Else(?:If)?|End(?:Func|If|Select|Switch|With)|Enum|Exit(?:Loop)?|For|Func|Global|If|In|Local|Next|Null|ReDim|Select|Static|Step|Switch|Then|To|Until|Volatile|WEnd|While|With)\\b/i,\n    number: /\\b(?:0x[\\da-f]+|\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?)\\b/i,\n    boolean: /\\b(?:False|True)\\b/i,\n    operator: /<[=>]?|[-+*\\/=&>]=?|[?^]|\\b(?:And|Not|Or)\\b/i,\n    punctuation: /[\\[\\]().,:]/\n};\n!function(e) {\n    function a(e, a, r) {\n        return RegExp(function(e, a) {\n            return e.replace(/<<(\\d+)>>/g, function(e, r) {\n                return a[+r];\n            });\n        }(e, a), r || \"\");\n    }\n    var r = \"bool|clip|float|int|string|val\", t = [\n        [\n            \"is(?:bool|clip|float|int|string)|defined|(?:(?:internal)?function|var)?exists?\",\n            \"apply|assert|default|eval|import|nop|select|undefined\",\n            \"opt_(?:allowfloataudio|avipadscanlines|dwchannelmask|enable_(?:b64a|planartopackedrgb|v210|y3_10_10|y3_10_16)|usewaveextensible|vdubplanarhack)|set(?:cachemode|maxcpu|memorymax|planarlegacyalignment|workingdir)\",\n            \"hex(?:value)?|value\",\n            \"abs|ceil|continued(?:denominator|numerator)?|exp|floor|fmod|frac|log(?:10)?|max|min|muldiv|pi|pow|rand|round|sign|spline|sqrt\",\n            \"a?sinh?|a?cosh?|a?tan[2h]?\",\n            \"(?:bit(?:and|not|x?or|[lr]?shift[aslu]?|sh[lr]|sa[lr]|[lr]rotatel?|ro[rl]|te?st|set(?:count)?|cl(?:ea)?r|ch(?:an)?ge?))\",\n            \"average(?:[bgr]|chroma[uv]|luma)|(?:[rgb]|chroma[uv]|luma|rgb|[yuv](?=difference(?:fromprevious|tonext)))difference(?:fromprevious|tonext)?|[yuvrgb]plane(?:median|min|max|minmaxdifference)\",\n            \"getprocessinfo|logmsg|script(?:dir(?:utf8)?|file(?:utf8)?|name(?:utf8)?)|setlogparams\",\n            \"chr|(?:fill|find|left|mid|replace|rev|right)str|format|[lu]case|ord|str(?:cmpi?|fromutf8|len|toutf8)|time|trim(?:all|left|right)\",\n            \"isversionorgreater|version(?:number|string)\",\n            \"buildpixeltype|colorspacenametopixeltype\",\n            \"addautoloaddir|on(?:cpu|cuda)|prefetch|setfiltermtmode\"\n        ].join(\"|\"),\n        [\n            \"has(?:audio|video)\",\n            \"height|width\",\n            \"frame(?:count|rate)|framerate(?:denominator|numerator)\",\n            \"getparity|is(?:field|frame)based\",\n            \"bitspercomponent|componentsize|hasalpha|is(?:planar(?:rgba?)?|interleaved|rgb(?:24|32|48|64)?|y(?:8|u(?:va?|y2))?|yv(?:12|16|24|411)|420|422|444|packedrgb)|numcomponents|pixeltype\",\n            \"audio(?:bits|channels|duration|length(?:[fs]|hi|lo)?|rate)|isaudio(?:float|int)\"\n        ].join(\"|\"),\n        [\n            \"avi(?:file)?source|directshowsource|image(?:reader|source|sourceanim)|opendmlsource|segmented(?:avisource|directshowsource)|wavsource\",\n            \"coloryuv|convertbacktoyuy2|convertto(?:RGB(?:24|32|48|64)|(?:planar)?RGBA?|Y8?|YV(?:12|16|24|411)|YUVA?(?:411|420|422|444)|YUY2)|fixluminance|gr[ae]yscale|invert|levels|limiter|mergea?rgb|merge(?:chroma|luma)|rgbadjust|show(?:alpha|blue|green|red)|swapuv|tweak|[uv]toy8?|ytouv\",\n            \"(?:colorkey|reset)mask|layer|mask(?:hs)?|merge|overlay|subtract\",\n            \"addborders|(?:bicubic|bilinear|blackman|gauss|lanczos4|lanczos|point|sinc|spline(?:16|36|64))resize|crop(?:bottom)?|flip(?:horizontal|vertical)|(?:horizontal|vertical)?reduceby2|letterbox|skewrows|turn(?:180|left|right)\",\n            \"blur|fixbrokenchromaupsampling|generalconvolution|(?:spatial|temporal)soften|sharpen\",\n            \"trim|(?:un)?alignedsplice|(?:assume|assumescaled|change|convert)FPS|(?:delete|duplicate)frame|dissolve|fade(?:in|io|out)[02]?|freezeframe|interleave|loop|reverse|select(?:even|odd|(?:range)?every)\",\n            \"assume[bt]ff|assume(?:field|frame)based|bob|complementparity|doubleweave|peculiarblend|pulldown|separate(?:columns|fields|rows)|swapfields|weave(?:columns|rows)?\",\n            \"amplify(?:db)?|assumesamplerate|audiodub(?:ex)?|audiotrim|convertaudioto(?:(?:8|16|24|32)bit|float)|converttomono|delayaudio|ensurevbrmp3sync|get(?:left|right)?channel|kill(?:audio|video)|mergechannels|mixaudio|monotostereo|normalize|resampleaudio|ssrc|supereq|timestretch\",\n            \"animate|applyrange|conditional(?:filter|reader|select)|frameevaluate|scriptclip|tcp(?:server|source)|writefile(?:end|if|start)?\",\n            \"imagewriter\",\n            \"blackness|blankclip|colorbars(?:hd)?|compare|dumpfiltergraph|echo|histogram|info|messageclip|preroll|setgraphanalysis|show(?:framenumber|smpte|time)|showfiveversions|stack(?:horizontal|vertical)|subtitle|tone|version\"\n        ].join(\"|\")\n    ].join(\"|\");\n    e.languages.avisynth = {\n        comment: [\n            {\n                pattern: /(^|[^\\\\])\\[\\*(?:[^\\[*]|\\[(?!\\*)|\\*(?!\\])|\\[\\*(?:[^\\[*]|\\[(?!\\*)|\\*(?!\\]))*\\*\\])*\\*\\]/,\n                lookbehind: !0,\n                greedy: !0\n            },\n            {\n                pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n                lookbehind: !0,\n                greedy: !0\n            },\n            {\n                pattern: /(^|[^\\\\$])#.*/,\n                lookbehind: !0,\n                greedy: !0\n            }\n        ],\n        argument: {\n            pattern: a('\\\\b(?:<<0>>)\\\\s+(\"?)\\\\w+\\\\1', [\n                r\n            ], \"i\"),\n            inside: {\n                keyword: /^\\w+/\n            }\n        },\n        \"argument-label\": {\n            pattern: /([,(][\\s\\\\]*)\\w+\\s*=(?!=)/,\n            lookbehind: !0,\n            inside: {\n                \"argument-name\": {\n                    pattern: /^\\w+/,\n                    alias: \"punctuation\"\n                },\n                punctuation: /=$/\n            }\n        },\n        string: [\n            {\n                pattern: /\"\"\"[\\s\\S]*?\"\"\"/,\n                greedy: !0\n            },\n            {\n                pattern: /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"/,\n                greedy: !0,\n                inside: {\n                    constant: {\n                        pattern: /\\b(?:DEFAULT_MT_MODE|(?:MAINSCRIPT|PROGRAM|SCRIPT)DIR|(?:MACHINE|USER)_(?:CLASSIC|PLUS)_PLUGINS)\\b/\n                    }\n                }\n            }\n        ],\n        variable: /\\b(?:last)\\b/i,\n        boolean: /\\b(?:false|no|true|yes)\\b/i,\n        keyword: /\\b(?:catch|else|for|function|global|if|return|try|while|__END__)\\b/i,\n        constant: /\\bMT_(?:MULTI_INSTANCE|NICE_FILTER|SERIALIZED|SPECIAL_MT)\\b/,\n        \"builtin-function\": {\n            pattern: a(\"\\\\b(?:<<0>>)\\\\b\", [\n                t\n            ], \"i\"),\n            alias: \"function\"\n        },\n        \"type-cast\": {\n            pattern: a(\"\\\\b(?:<<0>>)(?=\\\\s*\\\\()\", [\n                r\n            ], \"i\"),\n            alias: \"keyword\"\n        },\n        function: {\n            pattern: /\\b[a-z_]\\w*(?=\\s*\\()|(\\.)[a-z_]\\w*\\b/i,\n            lookbehind: !0\n        },\n        \"line-continuation\": {\n            pattern: /(^[ \\t]*)\\\\|\\\\(?=[ \\t]*$)/m,\n            lookbehind: !0,\n            alias: \"punctuation\"\n        },\n        number: /\\B\\$(?:[\\da-f]{6}|[\\da-f]{8})\\b|(?:(?:\\b|\\B-)\\d+(?:\\.\\d*)?\\b|\\B\\.\\d+\\b)/i,\n        operator: /\\+\\+?|[!=<>]=?|&&|\\|\\||[?:*/%-]/,\n        punctuation: /[{}\\[\\]();,.]/\n    }, e.languages.avs = e.languages.avisynth;\n}(Prism);\nPrism.languages[\"avro-idl\"] = {\n    comment: {\n        pattern: /\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\//,\n        greedy: !0\n    },\n    string: {\n        pattern: /(^|[^\\\\])\"(?:[^\\r\\n\"\\\\]|\\\\.)*\"/,\n        lookbehind: !0,\n        greedy: !0\n    },\n    annotation: {\n        pattern: /@(?:[$\\w.-]|`[^\\r\\n`]+`)+/,\n        greedy: !0,\n        alias: \"function\"\n    },\n    \"function-identifier\": {\n        pattern: /`[^\\r\\n`]+`(?=\\s*\\()/,\n        greedy: !0,\n        alias: \"function\"\n    },\n    identifier: {\n        pattern: /`[^\\r\\n`]+`/,\n        greedy: !0\n    },\n    \"class-name\": {\n        pattern: /(\\b(?:enum|error|protocol|record|throws)\\b\\s+)[$\\w]+/,\n        lookbehind: !0,\n        greedy: !0\n    },\n    keyword: /\\b(?:array|boolean|bytes|date|decimal|double|enum|error|false|fixed|float|idl|import|int|local_timestamp_ms|long|map|null|oneway|protocol|record|schema|string|throws|time_ms|timestamp_ms|true|union|uuid|void)\\b/,\n    function: /\\b[a-z_]\\w*(?=\\s*\\()/i,\n    number: [\n        {\n            pattern: /(^|[^\\w.])-?(?:(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?|0x(?:[a-f0-9]+(?:\\.[a-f0-9]*)?|\\.[a-f0-9]+)(?:p[+-]?\\d+)?)[dfl]?(?![\\w.])/i,\n            lookbehind: !0\n        },\n        /-?\\b(?:Infinity|NaN)\\b/\n    ],\n    operator: /=/,\n    punctuation: /[()\\[\\]{}<>.:,;-]/\n}, Prism.languages.avdl = Prism.languages[\"avro-idl\"];\nPrism.languages.awk = {\n    hashbang: {\n        pattern: /^#!.*/,\n        greedy: !0,\n        alias: \"comment\"\n    },\n    comment: {\n        pattern: /#.*/,\n        greedy: !0\n    },\n    string: {\n        pattern: /(^|[^\\\\])\"(?:[^\\\\\"\\r\\n]|\\\\.)*\"/,\n        lookbehind: !0,\n        greedy: !0\n    },\n    regex: {\n        pattern: /((?:^|[^\\w\\s)])\\s*)\\/(?:[^\\/\\\\\\r\\n]|\\\\.)*\\//,\n        lookbehind: !0,\n        greedy: !0\n    },\n    variable: /\\$\\w+/,\n    keyword: /\\b(?:BEGIN|BEGINFILE|END|ENDFILE|break|case|continue|default|delete|do|else|exit|for|function|getline|if|in|next|nextfile|printf?|return|switch|while)\\b|@(?:include|load)\\b/,\n    function: /\\b[a-z_]\\w*(?=\\s*\\()/i,\n    number: /\\b(?:\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?|0x[a-fA-F0-9]+)\\b/,\n    operator: /--|\\+\\+|!?~|>&|>>|<<|(?:\\*\\*|[<>!=+\\-*/%^])=?|&&|\\|[|&]|[?:]/,\n    punctuation: /[()[\\]{},;]/\n}, Prism.languages.gawk = Prism.languages.awk;\n!function(e) {\n    var t = \"\\\\b(?:BASH|BASHOPTS|BASH_ALIASES|BASH_ARGC|BASH_ARGV|BASH_CMDS|BASH_COMPLETION_COMPAT_DIR|BASH_LINENO|BASH_REMATCH|BASH_SOURCE|BASH_VERSINFO|BASH_VERSION|COLORTERM|COLUMNS|COMP_WORDBREAKS|DBUS_SESSION_BUS_ADDRESS|DEFAULTS_PATH|DESKTOP_SESSION|DIRSTACK|DISPLAY|EUID|GDMSESSION|GDM_LANG|GNOME_KEYRING_CONTROL|GNOME_KEYRING_PID|GPG_AGENT_INFO|GROUPS|HISTCONTROL|HISTFILE|HISTFILESIZE|HISTSIZE|HOME|HOSTNAME|HOSTTYPE|IFS|INSTANCE|JOB|LANG|LANGUAGE|LC_ADDRESS|LC_ALL|LC_IDENTIFICATION|LC_MEASUREMENT|LC_MONETARY|LC_NAME|LC_NUMERIC|LC_PAPER|LC_TELEPHONE|LC_TIME|LESSCLOSE|LESSOPEN|LINES|LOGNAME|LS_COLORS|MACHTYPE|MAILCHECK|MANDATORY_PATH|NO_AT_BRIDGE|OLDPWD|OPTERR|OPTIND|ORBIT_SOCKETDIR|OSTYPE|PAPERSIZE|PATH|PIPESTATUS|PPID|PS1|PS2|PS3|PS4|PWD|RANDOM|REPLY|SECONDS|SELINUX_INIT|SESSION|SESSIONTYPE|SESSION_MANAGER|SHELL|SHELLOPTS|SHLVL|SSH_AUTH_SOCK|TERM|UID|UPSTART_EVENTS|UPSTART_INSTANCE|UPSTART_JOB|UPSTART_SESSION|USER|WINDOWID|XAUTHORITY|XDG_CONFIG_DIRS|XDG_CURRENT_DESKTOP|XDG_DATA_DIRS|XDG_GREETER_DATA_DIR|XDG_MENU_PREFIX|XDG_RUNTIME_DIR|XDG_SEAT|XDG_SEAT_PATH|XDG_SESSION_DESKTOP|XDG_SESSION_ID|XDG_SESSION_PATH|XDG_SESSION_TYPE|XDG_VTNR|XMODIFIERS)\\\\b\", a = {\n        pattern: /(^([\"']?)\\w+\\2)[ \\t]+\\S.*/,\n        lookbehind: !0,\n        alias: \"punctuation\",\n        inside: null\n    }, n = {\n        bash: a,\n        environment: {\n            pattern: RegExp(\"\\\\$\" + t),\n            alias: \"constant\"\n        },\n        variable: [\n            {\n                pattern: /\\$?\\(\\([\\s\\S]+?\\)\\)/,\n                greedy: !0,\n                inside: {\n                    variable: [\n                        {\n                            pattern: /(^\\$\\(\\([\\s\\S]+)\\)\\)/,\n                            lookbehind: !0\n                        },\n                        /^\\$\\(\\(/\n                    ],\n                    number: /\\b0x[\\dA-Fa-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[Ee]-?\\d+)?/,\n                    operator: /--|\\+\\+|\\*\\*=?|<<=?|>>=?|&&|\\|\\||[=!+\\-*/%<>^&|]=?|[?~:]/,\n                    punctuation: /\\(\\(?|\\)\\)?|,|;/\n                }\n            },\n            {\n                pattern: /\\$\\((?:\\([^)]+\\)|[^()])+\\)|`[^`]+`/,\n                greedy: !0,\n                inside: {\n                    variable: /^\\$\\(|^`|\\)$|`$/\n                }\n            },\n            {\n                pattern: /\\$\\{[^}]+\\}/,\n                greedy: !0,\n                inside: {\n                    operator: /:[-=?+]?|[!\\/]|##?|%%?|\\^\\^?|,,?/,\n                    punctuation: /[\\[\\]]/,\n                    environment: {\n                        pattern: RegExp(\"(\\\\{)\" + t),\n                        lookbehind: !0,\n                        alias: \"constant\"\n                    }\n                }\n            },\n            /\\$(?:\\w+|[#?*!@$])/\n        ],\n        entity: /\\\\(?:[abceEfnrtv\\\\\"]|O?[0-7]{1,3}|U[0-9a-fA-F]{8}|u[0-9a-fA-F]{4}|x[0-9a-fA-F]{1,2})/\n    };\n    e.languages.bash = {\n        shebang: {\n            pattern: /^#!\\s*\\/.*/,\n            alias: \"important\"\n        },\n        comment: {\n            pattern: /(^|[^\"{\\\\$])#.*/,\n            lookbehind: !0\n        },\n        \"function-name\": [\n            {\n                pattern: /(\\bfunction\\s+)[\\w-]+(?=(?:\\s*\\(?:\\s*\\))?\\s*\\{)/,\n                lookbehind: !0,\n                alias: \"function\"\n            },\n            {\n                pattern: /\\b[\\w-]+(?=\\s*\\(\\s*\\)\\s*\\{)/,\n                alias: \"function\"\n            }\n        ],\n        \"for-or-select\": {\n            pattern: /(\\b(?:for|select)\\s+)\\w+(?=\\s+in\\s)/,\n            alias: \"variable\",\n            lookbehind: !0\n        },\n        \"assign-left\": {\n            pattern: /(^|[\\s;|&]|[<>]\\()\\w+(?:\\.\\w+)*(?=\\+?=)/,\n            inside: {\n                environment: {\n                    pattern: RegExp(\"(^|[\\\\s;|&]|[<>]\\\\()\" + t),\n                    lookbehind: !0,\n                    alias: \"constant\"\n                }\n            },\n            alias: \"variable\",\n            lookbehind: !0\n        },\n        parameter: {\n            pattern: /(^|\\s)-{1,2}(?:\\w+:[+-]?)?\\w+(?:\\.\\w+)*(?=[=\\s]|$)/,\n            alias: \"variable\",\n            lookbehind: !0\n        },\n        string: [\n            {\n                pattern: /((?:^|[^<])<<-?\\s*)(\\w+)\\s[\\s\\S]*?(?:\\r?\\n|\\r)\\2/,\n                lookbehind: !0,\n                greedy: !0,\n                inside: n\n            },\n            {\n                pattern: /((?:^|[^<])<<-?\\s*)([\"'])(\\w+)\\2\\s[\\s\\S]*?(?:\\r?\\n|\\r)\\3/,\n                lookbehind: !0,\n                greedy: !0,\n                inside: {\n                    bash: a\n                }\n            },\n            {\n                pattern: /(^|[^\\\\](?:\\\\\\\\)*)\"(?:\\\\[\\s\\S]|\\$\\([^)]+\\)|\\$(?!\\()|`[^`]+`|[^\"\\\\`$])*\"/,\n                lookbehind: !0,\n                greedy: !0,\n                inside: n\n            },\n            {\n                pattern: /(^|[^$\\\\])'[^']*'/,\n                lookbehind: !0,\n                greedy: !0\n            },\n            {\n                pattern: /\\$'(?:[^'\\\\]|\\\\[\\s\\S])*'/,\n                greedy: !0,\n                inside: {\n                    entity: n.entity\n                }\n            }\n        ],\n        environment: {\n            pattern: RegExp(\"\\\\$?\" + t),\n            alias: \"constant\"\n        },\n        variable: n.variable,\n        function: {\n            pattern: /(^|[\\s;|&]|[<>]\\()(?:add|apropos|apt|apt-cache|apt-get|aptitude|aspell|automysqlbackup|awk|basename|bash|bc|bconsole|bg|bzip2|cal|cargo|cat|cfdisk|chgrp|chkconfig|chmod|chown|chroot|cksum|clear|cmp|column|comm|composer|cp|cron|crontab|csplit|curl|cut|date|dc|dd|ddrescue|debootstrap|df|diff|diff3|dig|dir|dircolors|dirname|dirs|dmesg|docker|docker-compose|du|egrep|eject|env|ethtool|expand|expect|expr|fdformat|fdisk|fg|fgrep|file|find|fmt|fold|format|free|fsck|ftp|fuser|gawk|git|gparted|grep|groupadd|groupdel|groupmod|groups|grub-mkconfig|gzip|halt|head|hg|history|host|hostname|htop|iconv|id|ifconfig|ifdown|ifup|import|install|ip|java|jobs|join|kill|killall|less|link|ln|locate|logname|logrotate|look|lpc|lpr|lprint|lprintd|lprintq|lprm|ls|lsof|lynx|make|man|mc|mdadm|mkconfig|mkdir|mke2fs|mkfifo|mkfs|mkisofs|mknod|mkswap|mmv|more|most|mount|mtools|mtr|mutt|mv|nano|nc|netstat|nice|nl|node|nohup|notify-send|npm|nslookup|op|open|parted|passwd|paste|pathchk|ping|pkill|pnpm|podman|podman-compose|popd|pr|printcap|printenv|ps|pushd|pv|quota|quotacheck|quotactl|ram|rar|rcp|reboot|remsync|rename|renice|rev|rm|rmdir|rpm|rsync|scp|screen|sdiff|sed|sendmail|seq|service|sftp|sh|shellcheck|shuf|shutdown|sleep|slocate|sort|split|ssh|stat|strace|su|sudo|sum|suspend|swapon|sync|sysctl|tac|tail|tar|tee|time|timeout|top|touch|tr|traceroute|tsort|tty|umount|uname|unexpand|uniq|units|unrar|unshar|unzip|update-grub|uptime|useradd|userdel|usermod|users|uudecode|uuencode|v|vcpkg|vdir|vi|vim|virsh|vmstat|wait|watch|wc|wget|whereis|which|who|whoami|write|xargs|xdg-open|yarn|yes|zenity|zip|zsh|zypper)(?=$|[)\\s;|&])/,\n            lookbehind: !0\n        },\n        keyword: {\n            pattern: /(^|[\\s;|&]|[<>]\\()(?:case|do|done|elif|else|esac|fi|for|function|if|in|select|then|until|while)(?=$|[)\\s;|&])/,\n            lookbehind: !0\n        },\n        builtin: {\n            pattern: /(^|[\\s;|&]|[<>]\\()(?:\\.|:|alias|bind|break|builtin|caller|cd|command|continue|declare|echo|enable|eval|exec|exit|export|getopts|hash|help|let|local|logout|mapfile|printf|pwd|read|readarray|readonly|return|set|shift|shopt|source|test|times|trap|type|typeset|ulimit|umask|unalias|unset)(?=$|[)\\s;|&])/,\n            lookbehind: !0,\n            alias: \"class-name\"\n        },\n        boolean: {\n            pattern: /(^|[\\s;|&]|[<>]\\()(?:false|true)(?=$|[)\\s;|&])/,\n            lookbehind: !0\n        },\n        \"file-descriptor\": {\n            pattern: /\\B&\\d\\b/,\n            alias: \"important\"\n        },\n        operator: {\n            pattern: /\\d?<>|>\\||\\+=|=[=~]?|!=?|<<[<-]?|[&\\d]?>>|\\d[<>]&?|[<>][&=]?|&[>&]?|\\|[&|]?/,\n            inside: {\n                \"file-descriptor\": {\n                    pattern: /^\\d/,\n                    alias: \"important\"\n                }\n            }\n        },\n        punctuation: /\\$?\\(\\(?|\\)\\)?|\\.\\.|[{}[\\];\\\\]/,\n        number: {\n            pattern: /(^|\\s)(?:[1-9]\\d*|0)(?:[.,]\\d+)?\\b/,\n            lookbehind: !0\n        }\n    }, a.inside = e.languages.bash;\n    for(var s = [\n        \"comment\",\n        \"function-name\",\n        \"for-or-select\",\n        \"assign-left\",\n        \"parameter\",\n        \"string\",\n        \"environment\",\n        \"function\",\n        \"keyword\",\n        \"builtin\",\n        \"boolean\",\n        \"file-descriptor\",\n        \"operator\",\n        \"punctuation\",\n        \"number\"\n    ], o = n.variable[1].inside, i = 0; i < s.length; i++)o[s[i]] = e.languages.bash[s[i]];\n    e.languages.sh = e.languages.bash, e.languages.shell = e.languages.bash;\n}(Prism);\nPrism.languages.basic = {\n    comment: {\n        pattern: /(?:!|REM\\b).+/i,\n        inside: {\n            keyword: /^REM/i\n        }\n    },\n    string: {\n        pattern: /\"(?:\"\"|[!#$%&'()*,\\/:;<=>?^\\w +\\-.])*\"/,\n        greedy: !0\n    },\n    number: /(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:E[+-]?\\d+)?/i,\n    keyword: /\\b(?:AS|BEEP|BLOAD|BSAVE|CALL(?: ABSOLUTE)?|CASE|CHAIN|CHDIR|CLEAR|CLOSE|CLS|COM|COMMON|CONST|DATA|DECLARE|DEF(?: FN| SEG|DBL|INT|LNG|SNG|STR)|DIM|DO|DOUBLE|ELSE|ELSEIF|END|ENVIRON|ERASE|ERROR|EXIT|FIELD|FILES|FOR|FUNCTION|GET|GOSUB|GOTO|IF|INPUT|INTEGER|IOCTL|KEY|KILL|LINE INPUT|LOCATE|LOCK|LONG|LOOP|LSET|MKDIR|NAME|NEXT|OFF|ON(?: COM| ERROR| KEY| TIMER)?|OPEN|OPTION BASE|OUT|POKE|PUT|READ|REDIM|REM|RESTORE|RESUME|RETURN|RMDIR|RSET|RUN|SELECT CASE|SHARED|SHELL|SINGLE|SLEEP|STATIC|STEP|STOP|STRING|SUB|SWAP|SYSTEM|THEN|TIMER|TO|TROFF|TRON|TYPE|UNLOCK|UNTIL|USING|VIEW PRINT|WAIT|WEND|WHILE|WRITE)(?:\\$|\\b)/i,\n    function: /\\b(?:ABS|ACCESS|ACOS|ANGLE|AREA|ARITHMETIC|ARRAY|ASIN|ASK|AT|ATN|BASE|BEGIN|BREAK|CAUSE|CEIL|CHR|CLIP|COLLATE|COLOR|CON|COS|COSH|COT|CSC|DATE|DATUM|DEBUG|DECIMAL|DEF|DEG|DEGREES|DELETE|DET|DEVICE|DISPLAY|DOT|ELAPSED|EPS|ERASABLE|EXLINE|EXP|EXTERNAL|EXTYPE|FILETYPE|FIXED|FP|GO|GRAPH|HANDLER|IDN|IMAGE|IN|INT|INTERNAL|IP|IS|KEYED|LBOUND|LCASE|LEFT|LEN|LENGTH|LET|LINE|LINES|LOG|LOG10|LOG2|LTRIM|MARGIN|MAT|MAX|MAXNUM|MID|MIN|MISSING|MOD|NATIVE|NUL|NUMERIC|OF|OPTION|ORD|ORGANIZATION|OUTIN|OUTPUT|PI|POINT|POINTER|POINTS|POS|PRINT|PROGRAM|PROMPT|RAD|RADIANS|RANDOMIZE|RECORD|RECSIZE|RECTYPE|RELATIVE|REMAINDER|REPEAT|REST|RETRY|REWRITE|RIGHT|RND|ROUND|RTRIM|SAME|SEC|SELECT|SEQUENTIAL|SET|SETTER|SGN|SIN|SINH|SIZE|SKIP|SQR|STANDARD|STATUS|STR|STREAM|STYLE|TAB|TAN|TANH|TEMPLATE|TEXT|THERE|TIME|TIMEOUT|TRACE|TRANSFORM|TRUNCATE|UBOUND|UCASE|USE|VAL|VARIABLE|VIEWPORT|WHEN|WINDOW|WITH|ZER|ZONEWIDTH)(?:\\$|\\b)/i,\n    operator: /<[=>]?|>=?|[+\\-*\\/^=&]|\\b(?:AND|EQV|IMP|NOT|OR|XOR)\\b/i,\n    punctuation: /[,;:()]/\n};\n!function(e) {\n    var r = /%%?[~:\\w]+%?|!\\S+!/, t = {\n        pattern: /\\/[a-z?]+(?=[ :]|$):?|-[a-z]\\b|--[a-z-]+\\b/im,\n        alias: \"attr-name\",\n        inside: {\n            punctuation: /:/\n        }\n    }, n = /\"(?:[\\\\\"]\"|[^\"])*\"(?!\")/, i = /(?:\\b|-)\\d+\\b/;\n    e.languages.batch = {\n        comment: [\n            /^::.*/m,\n            {\n                pattern: /((?:^|[&(])[ \\t]*)rem\\b(?:[^^&)\\r\\n]|\\^(?:\\r\\n|[\\s\\S]))*/im,\n                lookbehind: !0\n            }\n        ],\n        label: {\n            pattern: /^:.*/m,\n            alias: \"property\"\n        },\n        command: [\n            {\n                pattern: /((?:^|[&(])[ \\t]*)for(?: \\/[a-z?](?:[ :](?:\"[^\"]*\"|[^\\s\"/]\\S*))?)* \\S+ in \\([^)]+\\) do/im,\n                lookbehind: !0,\n                inside: {\n                    keyword: /\\b(?:do|in)\\b|^for\\b/i,\n                    string: n,\n                    parameter: t,\n                    variable: r,\n                    number: i,\n                    punctuation: /[()',]/\n                }\n            },\n            {\n                pattern: /((?:^|[&(])[ \\t]*)if(?: \\/[a-z?](?:[ :](?:\"[^\"]*\"|[^\\s\"/]\\S*))?)* (?:not )?(?:cmdextversion \\d+|defined \\w+|errorlevel \\d+|exist \\S+|(?:\"[^\"]*\"|(?!\")(?:(?!==)\\S)+)?(?:==| (?:equ|geq|gtr|leq|lss|neq) )(?:\"[^\"]*\"|[^\\s\"]\\S*))/im,\n                lookbehind: !0,\n                inside: {\n                    keyword: /\\b(?:cmdextversion|defined|errorlevel|exist|not)\\b|^if\\b/i,\n                    string: n,\n                    parameter: t,\n                    variable: r,\n                    number: i,\n                    operator: /\\^|==|\\b(?:equ|geq|gtr|leq|lss|neq)\\b/i\n                }\n            },\n            {\n                pattern: /((?:^|[&()])[ \\t]*)else\\b/im,\n                lookbehind: !0,\n                inside: {\n                    keyword: /^else\\b/i\n                }\n            },\n            {\n                pattern: /((?:^|[&(])[ \\t]*)set(?: \\/[a-z](?:[ :](?:\"[^\"]*\"|[^\\s\"/]\\S*))?)* (?:[^^&)\\r\\n]|\\^(?:\\r\\n|[\\s\\S]))*/im,\n                lookbehind: !0,\n                inside: {\n                    keyword: /^set\\b/i,\n                    string: n,\n                    parameter: t,\n                    variable: [\n                        r,\n                        /\\w+(?=(?:[*\\/%+\\-&^|]|<<|>>)?=)/\n                    ],\n                    number: i,\n                    operator: /[*\\/%+\\-&^|]=?|<<=?|>>=?|[!~_=]/,\n                    punctuation: /[()',]/\n                }\n            },\n            {\n                pattern: /((?:^|[&(])[ \\t]*@?)\\w+\\b(?:\"(?:[\\\\\"]\"|[^\"])*\"(?!\")|[^\"^&)\\r\\n]|\\^(?:\\r\\n|[\\s\\S]))*/m,\n                lookbehind: !0,\n                inside: {\n                    keyword: /^\\w+\\b/,\n                    string: n,\n                    parameter: t,\n                    label: {\n                        pattern: /(^\\s*):\\S+/m,\n                        lookbehind: !0,\n                        alias: \"property\"\n                    },\n                    variable: r,\n                    number: i,\n                    operator: /\\^/\n                }\n            }\n        ],\n        operator: /[&@]/,\n        punctuation: /[()']/\n    };\n}(Prism);\nPrism.languages.bbcode = {\n    tag: {\n        pattern: /\\[\\/?[^\\s=\\]]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\"\\]=]+))?(?:\\s+[^\\s=\\]]+\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\"\\]=]+))*\\s*\\]/,\n        inside: {\n            tag: {\n                pattern: /^\\[\\/?[^\\s=\\]]+/,\n                inside: {\n                    punctuation: /^\\[\\/?/\n                }\n            },\n            \"attr-value\": {\n                pattern: /=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\"\\]=]+)/,\n                inside: {\n                    punctuation: [\n                        /^=/,\n                        {\n                            pattern: /^(\\s*)[\"']|[\"']$/,\n                            lookbehind: !0\n                        }\n                    ]\n                }\n            },\n            punctuation: /\\]/,\n            \"attr-name\": /[^\\s=\\]]+/\n        }\n    }\n}, Prism.languages.shortcode = Prism.languages.bbcode;\n!function(e) {\n    e.languages.bbj = {\n        comment: {\n            pattern: /(^|[^\\\\:])rem\\s+.*/i,\n            lookbehind: !0,\n            greedy: !0\n        },\n        string: {\n            pattern: /(['\"])(?:(?!\\1|\\\\).|\\\\.)*\\1/,\n            greedy: !0\n        },\n        number: /(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:E[+-]?\\d+)?/i,\n        keyword: /\\b(?:abstract|all|argc|begin|bye|callback|case|chn|class|classend|ctl|day|declare|delete|dim|dom|dread|dsz|else|end|endif|err|exitto|extends|fi|field|for|from|gosub|goto|if|implements|interface|interfaceend|iol|iolist|let|list|load|method|methodend|methodret|on|opts|pfx|print|private|process_events|protected|psz|public|read|read_resource|release|remove_callback|repeat|restore|return|rev|seterr|setesc|sqlchn|sqlunt|ssn|start|static|swend|switch|sys|then|tim|unt|until|use|void|wend|where|while)\\b/i,\n        function: /\\b\\w+(?=\\()/,\n        boolean: /\\b(?:BBjAPI\\.TRUE|BBjAPI\\.FALSE)\\b/i,\n        operator: /<[=>]?|>=?|[+\\-*\\/^=&]|\\b(?:and|not|or|xor)\\b/i,\n        punctuation: /[.,;:()]/\n    };\n}(Prism);\nPrism.languages.bicep = {\n    comment: [\n        {\n            pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n            lookbehind: !0,\n            greedy: !0\n        },\n        {\n            pattern: /(^|[^\\\\:])\\/\\/.*/,\n            lookbehind: !0,\n            greedy: !0\n        }\n    ],\n    property: [\n        {\n            pattern: /([\\r\\n][ \\t]*)[a-z_]\\w*(?=[ \\t]*:)/i,\n            lookbehind: !0\n        },\n        {\n            pattern: /([\\r\\n][ \\t]*)'(?:\\\\.|\\$(?!\\{)|[^'\\\\\\r\\n$])*'(?=[ \\t]*:)/,\n            lookbehind: !0,\n            greedy: !0\n        }\n    ],\n    string: [\n        {\n            pattern: /'''[^'][\\s\\S]*?'''/,\n            greedy: !0\n        },\n        {\n            pattern: /(^|[^\\\\'])'(?:\\\\.|\\$(?!\\{)|[^'\\\\\\r\\n$])*'/,\n            lookbehind: !0,\n            greedy: !0\n        }\n    ],\n    \"interpolated-string\": {\n        pattern: /(^|[^\\\\'])'(?:\\\\.|\\$(?:(?!\\{)|\\{[^{}\\r\\n]*\\})|[^'\\\\\\r\\n$])*'/,\n        lookbehind: !0,\n        greedy: !0,\n        inside: {\n            interpolation: {\n                pattern: /\\$\\{[^{}\\r\\n]*\\}/,\n                inside: {\n                    expression: {\n                        pattern: /(^\\$\\{)[\\s\\S]+(?=\\}$)/,\n                        lookbehind: !0\n                    },\n                    punctuation: /^\\$\\{|\\}$/\n                }\n            },\n            string: /[\\s\\S]+/\n        }\n    },\n    datatype: {\n        pattern: /(\\b(?:output|param)\\b[ \\t]+\\w+[ \\t]+)\\w+\\b/,\n        lookbehind: !0,\n        alias: \"class-name\"\n    },\n    boolean: /\\b(?:false|true)\\b/,\n    keyword: /\\b(?:existing|for|if|in|module|null|output|param|resource|targetScope|var)\\b/,\n    decorator: /@\\w+\\b/,\n    function: /\\b[a-z_]\\w*(?=[ \\t]*\\()/i,\n    number: /(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:E[+-]?\\d+)?/i,\n    operator: /--|\\+\\+|\\*\\*=?|=>|&&=?|\\|\\|=?|[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\\.{3}|\\?\\?=?|\\?\\.?|[~:]/,\n    punctuation: /[{}[\\];(),.:]/\n}, Prism.languages.bicep[\"interpolated-string\"].inside.interpolation.inside.expression.inside = Prism.languages.bicep;\nPrism.languages.birb = Prism.languages.extend(\"clike\", {\n    string: {\n        pattern: /r?(\"|')(?:\\\\.|(?!\\1)[^\\\\])*\\1/,\n        greedy: !0\n    },\n    \"class-name\": [\n        /\\b[A-Z](?:[\\d_]*[a-zA-Z]\\w*)?\\b/,\n        /\\b(?:[A-Z]\\w*|(?!(?:var|void)\\b)[a-z]\\w*)(?=\\s+\\w+\\s*[;,=()])/\n    ],\n    keyword: /\\b(?:assert|break|case|class|const|default|else|enum|final|follows|for|grab|if|nest|new|next|noSeeb|return|static|switch|throw|var|void|while)\\b/,\n    operator: /\\+\\+|--|&&|\\|\\||<<=?|>>=?|~(?:\\/=?)?|[+\\-*\\/%&^|=!<>]=?|\\?|:/,\n    variable: /\\b[a-z_]\\w*\\b/\n}), Prism.languages.insertBefore(\"birb\", \"function\", {\n    metadata: {\n        pattern: /<\\w+>/,\n        greedy: !0,\n        alias: \"symbol\"\n    }\n});\nPrism.languages.bison = Prism.languages.extend(\"c\", {}), Prism.languages.insertBefore(\"bison\", \"comment\", {\n    bison: {\n        pattern: /^(?:[^%]|%(?!%))*%%[\\s\\S]*?%%/,\n        inside: {\n            c: {\n                pattern: /%\\{[\\s\\S]*?%\\}|\\{(?:\\{[^}]*\\}|[^{}])*\\}/,\n                inside: {\n                    delimiter: {\n                        pattern: /^%?\\{|%?\\}$/,\n                        alias: \"punctuation\"\n                    },\n                    \"bison-variable\": {\n                        pattern: /[$@](?:<[^\\s>]+>)?[\\w$]+/,\n                        alias: \"variable\",\n                        inside: {\n                            punctuation: /<|>/\n                        }\n                    },\n                    rest: Prism.languages.c\n                }\n            },\n            comment: Prism.languages.c.comment,\n            string: Prism.languages.c.string,\n            property: /\\S+(?=:)/,\n            keyword: /%\\w+/,\n            number: {\n                pattern: /(^|[^@])\\b(?:0x[\\da-f]+|\\d+)/i,\n                lookbehind: !0\n            },\n            punctuation: /%[%?]|[|:;\\[\\]<>]/\n        }\n    }\n});\nPrism.languages.bnf = {\n    string: {\n        pattern: /\"[^\\r\\n\"]*\"|'[^\\r\\n']*'/\n    },\n    definition: {\n        pattern: /<[^<>\\r\\n\\t]+>(?=\\s*::=)/,\n        alias: [\n            \"rule\",\n            \"keyword\"\n        ],\n        inside: {\n            punctuation: /^<|>$/\n        }\n    },\n    rule: {\n        pattern: /<[^<>\\r\\n\\t]+>/,\n        inside: {\n            punctuation: /^<|>$/\n        }\n    },\n    operator: /::=|[|()[\\]{}*+?]|\\.{3}/\n}, Prism.languages.rbnf = Prism.languages.bnf;\nPrism.languages.bqn = {\n    shebang: {\n        pattern: /^#![ \\t]*\\/.*/,\n        alias: \"important\",\n        greedy: !0\n    },\n    comment: {\n        pattern: /#.*/,\n        greedy: !0\n    },\n    \"string-literal\": {\n        pattern: /\"(?:[^\"]|\"\")*\"/,\n        greedy: !0,\n        alias: \"string\"\n    },\n    \"character-literal\": {\n        pattern: /'(?:[\\s\\S]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF])'/,\n        greedy: !0,\n        alias: \"char\"\n    },\n    function: /•[\\w¯.∞π]+[\\w¯.∞π]*/,\n    \"dot-notation-on-brackets\": {\n        pattern: /\\{(?=.*\\}\\.)|\\}\\./,\n        alias: \"namespace\"\n    },\n    \"special-name\": {\n        pattern: /(?:𝕨|𝕩|𝕗|𝕘|𝕤|𝕣|𝕎|𝕏|𝔽|𝔾|𝕊|_𝕣_|_𝕣)/,\n        alias: \"keyword\"\n    },\n    \"dot-notation-on-name\": {\n        pattern: /[A-Za-z_][\\w¯∞π]*\\./,\n        alias: \"namespace\"\n    },\n    \"word-number-scientific\": {\n        pattern: /\\d+(?:\\.\\d+)?[eE]¯?\\d+/,\n        alias: \"number\"\n    },\n    \"word-name\": {\n        pattern: /[A-Za-z_][\\w¯∞π]*/,\n        alias: \"symbol\"\n    },\n    \"word-number\": {\n        pattern: /[¯∞π]?(?:\\d*\\.?\\b\\d+(?:e[+¯]?\\d+|E[+¯]?\\d+)?|¯|∞|π)(?:j¯?(?:(?:\\d+(?:\\.\\d+)?|\\.\\d+)(?:e[+¯]?\\d+|E[+¯]?\\d+)?|¯|∞|π))?/,\n        alias: \"number\"\n    },\n    \"null-literal\": {\n        pattern: /@/,\n        alias: \"char\"\n    },\n    \"primitive-functions\": {\n        pattern: /[-+×÷⋆√⌊⌈|¬∧∨<>≠=≤≥≡≢⊣⊢⥊∾≍⋈↑↓↕«»⌽⍉/⍋⍒⊏⊑⊐⊒∊⍷⊔!]/,\n        alias: \"operator\"\n    },\n    \"primitive-1-operators\": {\n        pattern: /[`˜˘¨⁼⌜´˝˙]/,\n        alias: \"operator\"\n    },\n    \"primitive-2-operators\": {\n        pattern: /[∘⊸⟜○⌾⎉⚇⍟⊘◶⎊]/,\n        alias: \"operator\"\n    },\n    punctuation: /[←⇐↩(){}⟨⟩[\\]‿·⋄,.;:?]/\n};\nPrism.languages.brainfuck = {\n    pointer: {\n        pattern: /<|>/,\n        alias: \"keyword\"\n    },\n    increment: {\n        pattern: /\\+/,\n        alias: \"inserted\"\n    },\n    decrement: {\n        pattern: /-/,\n        alias: \"deleted\"\n    },\n    branching: {\n        pattern: /\\[|\\]/,\n        alias: \"important\"\n    },\n    operator: /[.,]/,\n    comment: /\\S+/\n};\nPrism.languages.brightscript = {\n    comment: /(?:\\brem|').*/i,\n    \"directive-statement\": {\n        pattern: /(^[\\t ]*)#(?:const|else(?:[\\t ]+if)?|end[\\t ]+if|error|if).*/im,\n        lookbehind: !0,\n        alias: \"property\",\n        inside: {\n            \"error-message\": {\n                pattern: /(^#error).+/,\n                lookbehind: !0\n            },\n            directive: {\n                pattern: /^#(?:const|else(?:[\\t ]+if)?|end[\\t ]+if|error|if)/,\n                alias: \"keyword\"\n            },\n            expression: {\n                pattern: /[\\s\\S]+/,\n                inside: null\n            }\n        }\n    },\n    property: {\n        pattern: /([\\r\\n{,][\\t ]*)(?:(?!\\d)\\w+|\"(?:[^\"\\r\\n]|\"\")*\"(?!\"))(?=[ \\t]*:)/,\n        lookbehind: !0,\n        greedy: !0\n    },\n    string: {\n        pattern: /\"(?:[^\"\\r\\n]|\"\")*\"(?!\")/,\n        greedy: !0\n    },\n    \"class-name\": {\n        pattern: /(\\bAs[\\t ]+)\\w+/i,\n        lookbehind: !0\n    },\n    keyword: /\\b(?:As|Dim|Each|Else|Elseif|End|Exit|For|Function|Goto|If|In|Print|Return|Step|Stop|Sub|Then|To|While)\\b/i,\n    boolean: /\\b(?:false|true)\\b/i,\n    function: /\\b(?!\\d)\\w+(?=[\\t ]*\\()/,\n    number: /(?:\\b\\d+(?:\\.\\d+)?(?:[ed][+-]\\d+)?|&h[a-f\\d]+)\\b[%&!#]?/i,\n    operator: /--|\\+\\+|>>=?|<<=?|<>|[-+*/\\\\<>]=?|[:^=?]|\\b(?:and|mod|not|or)\\b/i,\n    punctuation: /[.,;()[\\]{}]/,\n    constant: /\\b(?:LINE_NUM)\\b/i\n}, Prism.languages.brightscript[\"directive-statement\"].inside.expression.inside = Prism.languages.brightscript;\nPrism.languages.bro = {\n    comment: {\n        pattern: /(^|[^\\\\$])#.*/,\n        lookbehind: !0,\n        inside: {\n            italic: /\\b(?:FIXME|TODO|XXX)\\b/\n        }\n    },\n    string: {\n        pattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n        greedy: !0\n    },\n    boolean: /\\b[TF]\\b/,\n    function: {\n        pattern: /(\\b(?:event|function|hook)[ \\t]+)\\w+(?:::\\w+)?/,\n        lookbehind: !0\n    },\n    builtin: /(?:@(?:load(?:-(?:plugin|sigs))?|unload|prefixes|ifn?def|else|(?:end)?if|DIR|FILENAME))|(?:&?(?:add_func|create_expire|default|delete_func|encrypt|error_handler|expire_func|group|log|mergeable|optional|persistent|priority|raw_output|read_expire|redef|rotate_interval|rotate_size|synchronized|type_column|write_expire))/,\n    constant: {\n        pattern: /(\\bconst[ \\t]+)\\w+/i,\n        lookbehind: !0\n    },\n    keyword: /\\b(?:add|addr|alarm|any|bool|break|const|continue|count|delete|double|else|enum|event|export|file|for|function|global|hook|if|in|int|interval|local|module|next|of|opaque|pattern|port|print|record|return|schedule|set|string|subnet|table|time|timeout|using|vector|when)\\b/,\n    operator: /--?|\\+\\+?|!=?=?|<=?|>=?|==?=?|&&|\\|\\|?|\\?|\\*|\\/|~|\\^|%/,\n    number: /\\b0x[\\da-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,\n    punctuation: /[{}[\\];(),.:]/\n};\nPrism.languages.bsl = {\n    comment: /\\/\\/.*/,\n    string: [\n        {\n            pattern: /\"(?:[^\"]|\"\")*\"(?!\")/,\n            greedy: !0\n        },\n        {\n            pattern: /'(?:[^'\\r\\n\\\\]|\\\\.)*'/\n        }\n    ],\n    keyword: [\n        {\n            pattern: /(^|[^\\w\\u0400-\\u0484\\u0487-\\u052f\\u1d2b\\u1d78\\u2de0-\\u2dff\\ua640-\\ua69f\\ufe2e\\ufe2f])(?:пока|для|новый|прервать|попытка|исключение|вызватьисключение|иначе|конецпопытки|неопределено|функция|перем|возврат|конецфункции|если|иначеесли|процедура|конецпроцедуры|тогда|знач|экспорт|конецесли|из|каждого|истина|ложь|по|цикл|конеццикла|выполнить)(?![\\w\\u0400-\\u0484\\u0487-\\u052f\\u1d2b\\u1d78\\u2de0-\\u2dff\\ua640-\\ua69f\\ufe2e\\ufe2f])/i,\n            lookbehind: !0\n        },\n        {\n            pattern: /\\b(?:break|do|each|else|elseif|enddo|endfunction|endif|endprocedure|endtry|except|execute|export|false|for|function|if|in|new|null|procedure|raise|return|then|to|true|try|undefined|val|var|while)\\b/i\n        }\n    ],\n    number: {\n        pattern: /(^(?=\\d)|[^\\w\\u0400-\\u0484\\u0487-\\u052f\\u1d2b\\u1d78\\u2de0-\\u2dff\\ua640-\\ua69f\\ufe2e\\ufe2f])(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:E[+-]?\\d+)?/i,\n        lookbehind: !0\n    },\n    operator: [\n        /[<>+\\-*/]=?|[%=]/,\n        {\n            pattern: /(^|[^\\w\\u0400-\\u0484\\u0487-\\u052f\\u1d2b\\u1d78\\u2de0-\\u2dff\\ua640-\\ua69f\\ufe2e\\ufe2f])(?:и|или|не)(?![\\w\\u0400-\\u0484\\u0487-\\u052f\\u1d2b\\u1d78\\u2de0-\\u2dff\\ua640-\\ua69f\\ufe2e\\ufe2f])/i,\n            lookbehind: !0\n        },\n        {\n            pattern: /\\b(?:and|not|or)\\b/i\n        }\n    ],\n    punctuation: /\\(\\.|\\.\\)|[()\\[\\]:;,.]/,\n    directive: [\n        {\n            pattern: /^([ \\t]*)&.*/m,\n            lookbehind: !0,\n            greedy: !0,\n            alias: \"important\"\n        },\n        {\n            pattern: /^([ \\t]*)#.*/gm,\n            lookbehind: !0,\n            greedy: !0,\n            alias: \"important\"\n        }\n    ]\n}, Prism.languages.oscript = Prism.languages.bsl;\nPrism.languages.cfscript = Prism.languages.extend(\"clike\", {\n    comment: [\n        {\n            pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n            lookbehind: !0,\n            inside: {\n                annotation: {\n                    pattern: /(?:^|[^.])@[\\w\\.]+/,\n                    alias: \"punctuation\"\n                }\n            }\n        },\n        {\n            pattern: /(^|[^\\\\:])\\/\\/.*/,\n            lookbehind: !0,\n            greedy: !0\n        }\n    ],\n    keyword: /\\b(?:abstract|break|catch|component|continue|default|do|else|extends|final|finally|for|function|if|in|include|package|private|property|public|remote|required|rethrow|return|static|switch|throw|try|var|while|xml)\\b(?!\\s*=)/,\n    operator: [\n        /\\+\\+|--|&&|\\|\\||::|=>|[!=]==|[-+*/%&|^!=<>]=?|\\?(?:\\.|:)?|:/,\n        /\\b(?:and|contains|eq|equal|eqv|gt|gte|imp|is|lt|lte|mod|not|or|xor)\\b/\n    ],\n    scope: {\n        pattern: /\\b(?:application|arguments|cgi|client|cookie|local|session|super|this|variables)\\b/,\n        alias: \"global\"\n    },\n    type: {\n        pattern: /\\b(?:any|array|binary|boolean|date|guid|numeric|query|string|struct|uuid|void|xml)\\b/,\n        alias: \"builtin\"\n    }\n}), Prism.languages.insertBefore(\"cfscript\", \"keyword\", {\n    \"function-variable\": {\n        pattern: /[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*[=:]\\s*(?:\\bfunction\\b|(?:\\((?:[^()]|\\([^()]*\\))*\\)|(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)\\s*=>))/,\n        alias: \"function\"\n    }\n}), delete Prism.languages.cfscript[\"class-name\"], Prism.languages.cfc = Prism.languages.cfscript;\nPrism.languages.chaiscript = Prism.languages.extend(\"clike\", {\n    string: {\n        pattern: /(^|[^\\\\])'(?:[^'\\\\]|\\\\[\\s\\S])*'/,\n        lookbehind: !0,\n        greedy: !0\n    },\n    \"class-name\": [\n        {\n            pattern: /(\\bclass\\s+)\\w+/,\n            lookbehind: !0\n        },\n        {\n            pattern: /(\\b(?:attr|def)\\s+)\\w+(?=\\s*::)/,\n            lookbehind: !0\n        }\n    ],\n    keyword: /\\b(?:attr|auto|break|case|catch|class|continue|def|default|else|finally|for|fun|global|if|return|switch|this|try|var|while)\\b/,\n    number: [\n        Prism.languages.cpp.number,\n        /\\b(?:Infinity|NaN)\\b/\n    ],\n    operator: />>=?|<<=?|\\|\\||&&|:[:=]?|--|\\+\\+|[=!<>+\\-*/%|&^]=?|[?~]|`[^`\\r\\n]{1,4}`/\n}), Prism.languages.insertBefore(\"chaiscript\", \"operator\", {\n    \"parameter-type\": {\n        pattern: /([,(]\\s*)\\w+(?=\\s+\\w)/,\n        lookbehind: !0,\n        alias: \"class-name\"\n    }\n}), Prism.languages.insertBefore(\"chaiscript\", \"string\", {\n    \"string-interpolation\": {\n        pattern: /(^|[^\\\\])\"(?:[^\"$\\\\]|\\\\[\\s\\S]|\\$(?!\\{)|\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^{}]*\\})*\\})*\\})*\"/,\n        lookbehind: !0,\n        greedy: !0,\n        inside: {\n            interpolation: {\n                pattern: /((?:^|[^\\\\])(?:\\\\{2})*)\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^{}]*\\})*\\})*\\}/,\n                lookbehind: !0,\n                inside: {\n                    \"interpolation-expression\": {\n                        pattern: /(^\\$\\{)[\\s\\S]+(?=\\}$)/,\n                        lookbehind: !0,\n                        inside: Prism.languages.chaiscript\n                    },\n                    \"interpolation-punctuation\": {\n                        pattern: /^\\$\\{|\\}$/,\n                        alias: \"punctuation\"\n                    }\n                }\n            },\n            string: /[\\s\\S]+/\n        }\n    }\n});\nPrism.languages.cil = {\n    comment: /\\/\\/.*/,\n    string: {\n        pattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n        greedy: !0\n    },\n    directive: {\n        pattern: /(^|\\W)\\.[a-z]+(?=\\s)/,\n        lookbehind: !0,\n        alias: \"class-name\"\n    },\n    variable: /\\[[\\w\\.]+\\]/,\n    keyword: /\\b(?:abstract|ansi|assembly|auto|autochar|beforefieldinit|bool|bstr|byvalstr|catch|char|cil|class|currency|date|decimal|default|enum|error|explicit|extends|extern|famandassem|family|famorassem|final(?:ly)?|float32|float64|hidebysig|u?int(?:8|16|32|64)?|iant|idispatch|implements|import|initonly|instance|interface|iunknown|literal|lpstr|lpstruct|lptstr|lpwstr|managed|method|native(?:Type)?|nested|newslot|object(?:ref)?|pinvokeimpl|private|privatescope|public|reqsecobj|rtspecialname|runtime|sealed|sequential|serializable|specialname|static|string|struct|syschar|tbstr|unicode|unmanagedexp|unsigned|value(?:type)?|variant|virtual|void)\\b/,\n    function: /\\b(?:(?:constrained|no|readonly|tail|unaligned|volatile)\\.)?(?:conv\\.(?:[iu][1248]?|ovf\\.[iu][1248]?(?:\\.un)?|r\\.un|r4|r8)|ldc\\.(?:i4(?:\\.\\d+|\\.[mM]1|\\.s)?|i8|r4|r8)|ldelem(?:\\.[iu][1248]?|\\.r[48]|\\.ref|a)?|ldind\\.(?:[iu][1248]?|r[48]|ref)|stelem\\.?(?:i[1248]?|r[48]|ref)?|stind\\.(?:i[1248]?|r[48]|ref)?|end(?:fault|filter|finally)|ldarg(?:\\.[0-3s]|a(?:\\.s)?)?|ldloc(?:\\.\\d+|\\.s)?|sub(?:\\.ovf(?:\\.un)?)?|mul(?:\\.ovf(?:\\.un)?)?|add(?:\\.ovf(?:\\.un)?)?|stloc(?:\\.[0-3s])?|refany(?:type|val)|blt(?:\\.un)?(?:\\.s)?|ble(?:\\.un)?(?:\\.s)?|bgt(?:\\.un)?(?:\\.s)?|bge(?:\\.un)?(?:\\.s)?|unbox(?:\\.any)?|init(?:blk|obj)|call(?:i|virt)?|brfalse(?:\\.s)?|bne\\.un(?:\\.s)?|ldloca(?:\\.s)?|brzero(?:\\.s)?|brtrue(?:\\.s)?|brnull(?:\\.s)?|brinst(?:\\.s)?|starg(?:\\.s)?|leave(?:\\.s)?|shr(?:\\.un)?|rem(?:\\.un)?|div(?:\\.un)?|clt(?:\\.un)?|alignment|castclass|ldvirtftn|beq(?:\\.s)?|ckfinite|ldsflda|ldtoken|localloc|mkrefany|rethrow|cgt\\.un|arglist|switch|stsfld|sizeof|newobj|newarr|ldsfld|ldnull|ldflda|isinst|throw|stobj|stfld|ldstr|ldobj|ldlen|ldftn|ldfld|cpobj|cpblk|break|br\\.s|xor|shl|ret|pop|not|nop|neg|jmp|dup|cgt|ceq|box|and|or|br)\\b/,\n    boolean: /\\b(?:false|true)\\b/,\n    number: /\\b-?(?:0x[0-9a-f]+|\\d+)(?:\\.[0-9a-f]+)?\\b/i,\n    punctuation: /[{}[\\];(),:=]|IL_[0-9A-Za-z]+/\n};\nPrism.languages.cilkc = Prism.languages.insertBefore(\"c\", \"function\", {\n    \"parallel-keyword\": {\n        pattern: /\\bcilk_(?:for|reducer|s(?:cope|pawn|ync))\\b/,\n        alias: \"keyword\"\n    }\n}), Prism.languages[\"cilk-c\"] = Prism.languages.cilkc;\nPrism.languages.cilkcpp = Prism.languages.insertBefore(\"cpp\", \"function\", {\n    \"parallel-keyword\": {\n        pattern: /\\bcilk_(?:for|reducer|s(?:cope|pawn|ync))\\b/,\n        alias: \"keyword\"\n    }\n}), Prism.languages[\"cilk-cpp\"] = Prism.languages.cilkcpp, Prism.languages.cilk = Prism.languages.cilkcpp;\nPrism.languages.clojure = {\n    comment: {\n        pattern: /;.*/,\n        greedy: !0\n    },\n    string: {\n        pattern: /\"(?:[^\"\\\\]|\\\\.)*\"/,\n        greedy: !0\n    },\n    char: /\\\\\\w+/,\n    symbol: {\n        pattern: /(^|[\\s()\\[\\]{},])::?[\\w*+!?'<>=/.-]+/,\n        lookbehind: !0\n    },\n    keyword: {\n        pattern: /(\\()(?:-|->|->>|\\.|\\.\\.|\\*|\\/|\\+|<|<=|=|==|>|>=|accessor|agent|agent-errors|aget|alength|all-ns|alter|and|append-child|apply|array-map|aset|aset-boolean|aset-byte|aset-char|aset-double|aset-float|aset-int|aset-long|aset-short|assert|assoc|await|await-for|bean|binding|bit-and|bit-not|bit-or|bit-shift-left|bit-shift-right|bit-xor|boolean|branch\\?|butlast|byte|cast|char|children|class|clear-agent-errors|comment|commute|comp|comparator|complement|concat|cond|conj|cons|constantly|construct-proxy|contains\\?|count|create-ns|create-struct|cycle|dec|declare|def|def-|definline|definterface|defmacro|defmethod|defmulti|defn|defn-|defonce|defproject|defprotocol|defrecord|defstruct|deftype|deref|difference|disj|dissoc|distinct|do|doall|doc|dorun|doseq|dosync|dotimes|doto|double|down|drop|drop-while|edit|end\\?|ensure|eval|every\\?|false\\?|ffirst|file-seq|filter|find|find-doc|find-ns|find-var|first|float|flush|fn|fnseq|for|frest|gensym|get|get-proxy-class|hash-map|hash-set|identical\\?|identity|if|if-let|if-not|import|in-ns|inc|index|insert-child|insert-left|insert-right|inspect-table|inspect-tree|instance\\?|int|interleave|intersection|into|into-array|iterate|join|key|keys|keyword|keyword\\?|last|lazy-cat|lazy-cons|left|lefts|let|line-seq|list|list\\*|load|load-file|locking|long|loop|macroexpand|macroexpand-1|make-array|make-node|map|map-invert|map\\?|mapcat|max|max-key|memfn|merge|merge-with|meta|min|min-key|monitor-enter|name|namespace|neg\\?|new|newline|next|nil\\?|node|not|not-any\\?|not-every\\?|not=|ns|ns-imports|ns-interns|ns-map|ns-name|ns-publics|ns-refers|ns-resolve|ns-unmap|nth|nthrest|or|parse|partial|path|peek|pop|pos\\?|pr|pr-str|print|print-str|println|println-str|prn|prn-str|project|proxy|proxy-mappings|quot|quote|rand|rand-int|range|re-find|re-groups|re-matcher|re-matches|re-pattern|re-seq|read|read-line|recur|reduce|ref|ref-set|refer|rem|remove|remove-method|remove-ns|rename|rename-keys|repeat|replace|replicate|resolve|rest|resultset-seq|reverse|rfirst|right|rights|root|rrest|rseq|second|select|select-keys|send|send-off|seq|seq-zip|seq\\?|set|set!|short|slurp|some|sort|sort-by|sorted-map|sorted-map-by|sorted-set|special-symbol\\?|split-at|split-with|str|string\\?|struct|struct-map|subs|subvec|symbol|symbol\\?|sync|take|take-nth|take-while|test|throw|time|to-array|to-array-2d|tree-seq|true\\?|try|union|up|update-proxy|val|vals|var|var-get|var-set|var\\?|vector|vector-zip|vector\\?|when|when-first|when-let|when-not|with-local-vars|with-meta|with-open|with-out-str|xml-seq|xml-zip|zero\\?|zipmap|zipper)(?=[\\s)]|$)/,\n        lookbehind: !0\n    },\n    boolean: /\\b(?:false|nil|true)\\b/,\n    number: {\n        pattern: /(^|[^\\w$@])(?:\\d+(?:[/.]\\d+)?(?:e[+-]?\\d+)?|0x[a-f0-9]+|[1-9]\\d?r[a-z0-9]+)[lmn]?(?![\\w$@])/i,\n        lookbehind: !0\n    },\n    function: {\n        pattern: /((?:^|[^'])\\()[\\w*+!?'<>=/.-]+(?=[\\s)]|$)/,\n        lookbehind: !0\n    },\n    operator: /[#@^`~]/,\n    punctuation: /[{}\\[\\](),]/\n};\nPrism.languages.cmake = {\n    comment: /#.*/,\n    string: {\n        pattern: /\"(?:[^\\\\\"]|\\\\.)*\"/,\n        greedy: !0,\n        inside: {\n            interpolation: {\n                pattern: /\\$\\{(?:[^{}$]|\\$\\{[^{}$]*\\})*\\}/,\n                inside: {\n                    punctuation: /\\$\\{|\\}/,\n                    variable: /\\w+/\n                }\n            }\n        }\n    },\n    variable: /\\b(?:CMAKE_\\w+|\\w+_(?:(?:BINARY|SOURCE)_DIR|DESCRIPTION|HOMEPAGE_URL|ROOT|VERSION(?:_MAJOR|_MINOR|_PATCH|_TWEAK)?)|(?:ANDROID|APPLE|BORLAND|BUILD_SHARED_LIBS|CACHE|CPACK_(?:ABSOLUTE_DESTINATION_FILES|COMPONENT_INCLUDE_TOPLEVEL_DIRECTORY|ERROR_ON_ABSOLUTE_INSTALL_DESTINATION|INCLUDE_TOPLEVEL_DIRECTORY|INSTALL_DEFAULT_DIRECTORY_PERMISSIONS|INSTALL_SCRIPT|PACKAGING_INSTALL_PREFIX|SET_DESTDIR|WARN_ON_ABSOLUTE_INSTALL_DESTINATION)|CTEST_(?:BINARY_DIRECTORY|BUILD_COMMAND|BUILD_NAME|BZR_COMMAND|BZR_UPDATE_OPTIONS|CHANGE_ID|CHECKOUT_COMMAND|CONFIGURATION_TYPE|CONFIGURE_COMMAND|COVERAGE_COMMAND|COVERAGE_EXTRA_FLAGS|CURL_OPTIONS|CUSTOM_(?:COVERAGE_EXCLUDE|ERROR_EXCEPTION|ERROR_MATCH|ERROR_POST_CONTEXT|ERROR_PRE_CONTEXT|MAXIMUM_FAILED_TEST_OUTPUT_SIZE|MAXIMUM_NUMBER_OF_(?:ERRORS|WARNINGS)|MAXIMUM_PASSED_TEST_OUTPUT_SIZE|MEMCHECK_IGNORE|POST_MEMCHECK|POST_TEST|PRE_MEMCHECK|PRE_TEST|TESTS_IGNORE|WARNING_EXCEPTION|WARNING_MATCH)|CVS_CHECKOUT|CVS_COMMAND|CVS_UPDATE_OPTIONS|DROP_LOCATION|DROP_METHOD|DROP_SITE|DROP_SITE_CDASH|DROP_SITE_PASSWORD|DROP_SITE_USER|EXTRA_COVERAGE_GLOB|GIT_COMMAND|GIT_INIT_SUBMODULES|GIT_UPDATE_CUSTOM|GIT_UPDATE_OPTIONS|HG_COMMAND|HG_UPDATE_OPTIONS|LABELS_FOR_SUBPROJECTS|MEMORYCHECK_(?:COMMAND|COMMAND_OPTIONS|SANITIZER_OPTIONS|SUPPRESSIONS_FILE|TYPE)|NIGHTLY_START_TIME|P4_CLIENT|P4_COMMAND|P4_OPTIONS|P4_UPDATE_OPTIONS|RUN_CURRENT_SCRIPT|SCP_COMMAND|SITE|SOURCE_DIRECTORY|SUBMIT_URL|SVN_COMMAND|SVN_OPTIONS|SVN_UPDATE_OPTIONS|TEST_LOAD|TEST_TIMEOUT|TRIGGER_SITE|UPDATE_COMMAND|UPDATE_OPTIONS|UPDATE_VERSION_ONLY|USE_LAUNCHERS)|CYGWIN|ENV|EXECUTABLE_OUTPUT_PATH|GHS-MULTI|IOS|LIBRARY_OUTPUT_PATH|MINGW|MSVC(?:10|11|12|14|60|70|71|80|90|_IDE|_TOOLSET_VERSION|_VERSION)?|MSYS|PROJECT_NAME|UNIX|WIN32|WINCE|WINDOWS_PHONE|WINDOWS_STORE|XCODE))\\b/,\n    property: /\\b(?:cxx_\\w+|(?:ARCHIVE_OUTPUT_(?:DIRECTORY|NAME)|COMPILE_DEFINITIONS|COMPILE_PDB_NAME|COMPILE_PDB_OUTPUT_DIRECTORY|EXCLUDE_FROM_DEFAULT_BUILD|IMPORTED_(?:IMPLIB|LIBNAME|LINK_DEPENDENT_LIBRARIES|LINK_INTERFACE_LANGUAGES|LINK_INTERFACE_LIBRARIES|LINK_INTERFACE_MULTIPLICITY|LOCATION|NO_SONAME|OBJECTS|SONAME)|INTERPROCEDURAL_OPTIMIZATION|LIBRARY_OUTPUT_DIRECTORY|LIBRARY_OUTPUT_NAME|LINK_FLAGS|LINK_INTERFACE_LIBRARIES|LINK_INTERFACE_MULTIPLICITY|LOCATION|MAP_IMPORTED_CONFIG|OSX_ARCHITECTURES|OUTPUT_NAME|PDB_NAME|PDB_OUTPUT_DIRECTORY|RUNTIME_OUTPUT_DIRECTORY|RUNTIME_OUTPUT_NAME|STATIC_LIBRARY_FLAGS|VS_CSHARP|VS_DOTNET_REFERENCEPROP|VS_DOTNET_REFERENCE|VS_GLOBAL_SECTION_POST|VS_GLOBAL_SECTION_PRE|VS_GLOBAL|XCODE_ATTRIBUTE)_\\w+|\\w+_(?:CLANG_TIDY|COMPILER_LAUNCHER|CPPCHECK|CPPLINT|INCLUDE_WHAT_YOU_USE|OUTPUT_NAME|POSTFIX|VISIBILITY_PRESET)|ABSTRACT|ADDITIONAL_MAKE_CLEAN_FILES|ADVANCED|ALIASED_TARGET|ALLOW_DUPLICATE_CUSTOM_TARGETS|ANDROID_(?:ANT_ADDITIONAL_OPTIONS|API|API_MIN|ARCH|ASSETS_DIRECTORIES|GUI|JAR_DEPENDENCIES|NATIVE_LIB_DEPENDENCIES|NATIVE_LIB_DIRECTORIES|PROCESS_MAX|PROGUARD|PROGUARD_CONFIG_PATH|SECURE_PROPS_PATH|SKIP_ANT_STEP|STL_TYPE)|ARCHIVE_OUTPUT_DIRECTORY|ATTACHED_FILES|ATTACHED_FILES_ON_FAIL|AUTOGEN_(?:BUILD_DIR|ORIGIN_DEPENDS|PARALLEL|SOURCE_GROUP|TARGETS_FOLDER|TARGET_DEPENDS)|AUTOMOC|AUTOMOC_(?:COMPILER_PREDEFINES|DEPEND_FILTERS|EXECUTABLE|MACRO_NAMES|MOC_OPTIONS|SOURCE_GROUP|TARGETS_FOLDER)|AUTORCC|AUTORCC_EXECUTABLE|AUTORCC_OPTIONS|AUTORCC_SOURCE_GROUP|AUTOUIC|AUTOUIC_EXECUTABLE|AUTOUIC_OPTIONS|AUTOUIC_SEARCH_PATHS|BINARY_DIR|BUILDSYSTEM_TARGETS|BUILD_RPATH|BUILD_RPATH_USE_ORIGIN|BUILD_WITH_INSTALL_NAME_DIR|BUILD_WITH_INSTALL_RPATH|BUNDLE|BUNDLE_EXTENSION|CACHE_VARIABLES|CLEAN_NO_CUSTOM|COMMON_LANGUAGE_RUNTIME|COMPATIBLE_INTERFACE_(?:BOOL|NUMBER_MAX|NUMBER_MIN|STRING)|COMPILE_(?:DEFINITIONS|FEATURES|FLAGS|OPTIONS|PDB_NAME|PDB_OUTPUT_DIRECTORY)|COST|CPACK_DESKTOP_SHORTCUTS|CPACK_NEVER_OVERWRITE|CPACK_PERMANENT|CPACK_STARTUP_SHORTCUTS|CPACK_START_MENU_SHORTCUTS|CPACK_WIX_ACL|CROSSCOMPILING_EMULATOR|CUDA_EXTENSIONS|CUDA_PTX_COMPILATION|CUDA_RESOLVE_DEVICE_SYMBOLS|CUDA_SEPARABLE_COMPILATION|CUDA_STANDARD|CUDA_STANDARD_REQUIRED|CXX_EXTENSIONS|CXX_STANDARD|CXX_STANDARD_REQUIRED|C_EXTENSIONS|C_STANDARD|C_STANDARD_REQUIRED|DEBUG_CONFIGURATIONS|DEFINE_SYMBOL|DEFINITIONS|DEPENDS|DEPLOYMENT_ADDITIONAL_FILES|DEPLOYMENT_REMOTE_DIRECTORY|DISABLED|DISABLED_FEATURES|ECLIPSE_EXTRA_CPROJECT_CONTENTS|ECLIPSE_EXTRA_NATURES|ENABLED_FEATURES|ENABLED_LANGUAGES|ENABLE_EXPORTS|ENVIRONMENT|EXCLUDE_FROM_ALL|EXCLUDE_FROM_DEFAULT_BUILD|EXPORT_NAME|EXPORT_PROPERTIES|EXTERNAL_OBJECT|EchoString|FAIL_REGULAR_EXPRESSION|FIND_LIBRARY_USE_LIB32_PATHS|FIND_LIBRARY_USE_LIB64_PATHS|FIND_LIBRARY_USE_LIBX32_PATHS|FIND_LIBRARY_USE_OPENBSD_VERSIONING|FIXTURES_CLEANUP|FIXTURES_REQUIRED|FIXTURES_SETUP|FOLDER|FRAMEWORK|Fortran_FORMAT|Fortran_MODULE_DIRECTORY|GENERATED|GENERATOR_FILE_NAME|GENERATOR_IS_MULTI_CONFIG|GHS_INTEGRITY_APP|GHS_NO_SOURCE_GROUP_FILE|GLOBAL_DEPENDS_DEBUG_MODE|GLOBAL_DEPENDS_NO_CYCLES|GNUtoMS|HAS_CXX|HEADER_FILE_ONLY|HELPSTRING|IMPLICIT_DEPENDS_INCLUDE_TRANSFORM|IMPORTED|IMPORTED_(?:COMMON_LANGUAGE_RUNTIME|CONFIGURATIONS|GLOBAL|IMPLIB|LIBNAME|LINK_DEPENDENT_LIBRARIES|LINK_INTERFACE_(?:LANGUAGES|LIBRARIES|MULTIPLICITY)|LOCATION|NO_SONAME|OBJECTS|SONAME)|IMPORT_PREFIX|IMPORT_SUFFIX|INCLUDE_DIRECTORIES|INCLUDE_REGULAR_EXPRESSION|INSTALL_NAME_DIR|INSTALL_RPATH|INSTALL_RPATH_USE_LINK_PATH|INTERFACE_(?:AUTOUIC_OPTIONS|COMPILE_DEFINITIONS|COMPILE_FEATURES|COMPILE_OPTIONS|INCLUDE_DIRECTORIES|LINK_DEPENDS|LINK_DIRECTORIES|LINK_LIBRARIES|LINK_OPTIONS|POSITION_INDEPENDENT_CODE|SOURCES|SYSTEM_INCLUDE_DIRECTORIES)|INTERPROCEDURAL_OPTIMIZATION|IN_TRY_COMPILE|IOS_INSTALL_COMBINED|JOB_POOLS|JOB_POOL_COMPILE|JOB_POOL_LINK|KEEP_EXTENSION|LABELS|LANGUAGE|LIBRARY_OUTPUT_DIRECTORY|LINKER_LANGUAGE|LINK_(?:DEPENDS|DEPENDS_NO_SHARED|DIRECTORIES|FLAGS|INTERFACE_LIBRARIES|INTERFACE_MULTIPLICITY|LIBRARIES|OPTIONS|SEARCH_END_STATIC|SEARCH_START_STATIC|WHAT_YOU_USE)|LISTFILE_STACK|LOCATION|MACOSX_BUNDLE|MACOSX_BUNDLE_INFO_PLIST|MACOSX_FRAMEWORK_INFO_PLIST|MACOSX_PACKAGE_LOCATION|MACOSX_RPATH|MACROS|MANUALLY_ADDED_DEPENDENCIES|MEASUREMENT|MODIFIED|NAME|NO_SONAME|NO_SYSTEM_FROM_IMPORTED|OBJECT_DEPENDS|OBJECT_OUTPUTS|OSX_ARCHITECTURES|OUTPUT_NAME|PACKAGES_FOUND|PACKAGES_NOT_FOUND|PARENT_DIRECTORY|PASS_REGULAR_EXPRESSION|PDB_NAME|PDB_OUTPUT_DIRECTORY|POSITION_INDEPENDENT_CODE|POST_INSTALL_SCRIPT|PREDEFINED_TARGETS_FOLDER|PREFIX|PRE_INSTALL_SCRIPT|PRIVATE_HEADER|PROCESSORS|PROCESSOR_AFFINITY|PROJECT_LABEL|PUBLIC_HEADER|REPORT_UNDEFINED_PROPERTIES|REQUIRED_FILES|RESOURCE|RESOURCE_LOCK|RULE_LAUNCH_COMPILE|RULE_LAUNCH_CUSTOM|RULE_LAUNCH_LINK|RULE_MESSAGES|RUNTIME_OUTPUT_DIRECTORY|RUN_SERIAL|SKIP_AUTOGEN|SKIP_AUTOMOC|SKIP_AUTORCC|SKIP_AUTOUIC|SKIP_BUILD_RPATH|SKIP_RETURN_CODE|SOURCES|SOURCE_DIR|SOVERSION|STATIC_LIBRARY_FLAGS|STATIC_LIBRARY_OPTIONS|STRINGS|SUBDIRECTORIES|SUFFIX|SYMBOLIC|TARGET_ARCHIVES_MAY_BE_SHARED_LIBS|TARGET_MESSAGES|TARGET_SUPPORTS_SHARED_LIBS|TESTS|TEST_INCLUDE_FILE|TEST_INCLUDE_FILES|TIMEOUT|TIMEOUT_AFTER_MATCH|TYPE|USE_FOLDERS|VALUE|VARIABLES|VERSION|VISIBILITY_INLINES_HIDDEN|VS_(?:CONFIGURATION_TYPE|COPY_TO_OUT_DIR|DEBUGGER_(?:COMMAND|COMMAND_ARGUMENTS|ENVIRONMENT|WORKING_DIRECTORY)|DEPLOYMENT_CONTENT|DEPLOYMENT_LOCATION|DOTNET_REFERENCES|DOTNET_REFERENCES_COPY_LOCAL|INCLUDE_IN_VSIX|IOT_STARTUP_TASK|KEYWORD|RESOURCE_GENERATOR|SCC_AUXPATH|SCC_LOCALPATH|SCC_PROJECTNAME|SCC_PROVIDER|SDK_REFERENCES|SHADER_(?:DISABLE_OPTIMIZATIONS|ENABLE_DEBUG|ENTRYPOINT|FLAGS|MODEL|OBJECT_FILE_NAME|OUTPUT_HEADER_FILE|TYPE|VARIABLE_NAME)|STARTUP_PROJECT|TOOL_OVERRIDE|USER_PROPS|WINRT_COMPONENT|WINRT_EXTENSIONS|WINRT_REFERENCES|XAML_TYPE)|WILL_FAIL|WIN32_EXECUTABLE|WINDOWS_EXPORT_ALL_SYMBOLS|WORKING_DIRECTORY|WRAP_EXCLUDE|XCODE_(?:EMIT_EFFECTIVE_PLATFORM_NAME|EXPLICIT_FILE_TYPE|FILE_ATTRIBUTES|LAST_KNOWN_FILE_TYPE|PRODUCT_TYPE|SCHEME_(?:ADDRESS_SANITIZER|ADDRESS_SANITIZER_USE_AFTER_RETURN|ARGUMENTS|DISABLE_MAIN_THREAD_CHECKER|DYNAMIC_LIBRARY_LOADS|DYNAMIC_LINKER_API_USAGE|ENVIRONMENT|EXECUTABLE|GUARD_MALLOC|MAIN_THREAD_CHECKER_STOP|MALLOC_GUARD_EDGES|MALLOC_SCRIBBLE|MALLOC_STACK|THREAD_SANITIZER(?:_STOP)?|UNDEFINED_BEHAVIOUR_SANITIZER(?:_STOP)?|ZOMBIE_OBJECTS))|XCTEST)\\b/,\n    keyword: /\\b(?:add_compile_definitions|add_compile_options|add_custom_command|add_custom_target|add_definitions|add_dependencies|add_executable|add_library|add_link_options|add_subdirectory|add_test|aux_source_directory|break|build_command|build_name|cmake_host_system_information|cmake_minimum_required|cmake_parse_arguments|cmake_policy|configure_file|continue|create_test_sourcelist|ctest_build|ctest_configure|ctest_coverage|ctest_empty_binary_directory|ctest_memcheck|ctest_read_custom_files|ctest_run_script|ctest_sleep|ctest_start|ctest_submit|ctest_test|ctest_update|ctest_upload|define_property|else|elseif|enable_language|enable_testing|endforeach|endfunction|endif|endmacro|endwhile|exec_program|execute_process|export|export_library_dependencies|file|find_file|find_library|find_package|find_path|find_program|fltk_wrap_ui|foreach|function|get_cmake_property|get_directory_property|get_filename_component|get_property|get_source_file_property|get_target_property|get_test_property|if|include|include_directories|include_external_msproject|include_guard|include_regular_expression|install|install_files|install_programs|install_targets|link_directories|link_libraries|list|load_cache|load_command|macro|make_directory|mark_as_advanced|math|message|option|output_required_files|project|qt_wrap_cpp|qt_wrap_ui|remove|remove_definitions|return|separate_arguments|set|set_directory_properties|set_property|set_source_files_properties|set_target_properties|set_tests_properties|site_name|source_group|string|subdir_depends|subdirs|target_compile_definitions|target_compile_features|target_compile_options|target_include_directories|target_link_directories|target_link_libraries|target_link_options|target_sources|try_compile|try_run|unset|use_mangled_mesa|utility_source|variable_requires|variable_watch|while|write_file)(?=\\s*\\()\\b/,\n    boolean: /\\b(?:FALSE|OFF|ON|TRUE)\\b/,\n    namespace: /\\b(?:INTERFACE|PRIVATE|PROPERTIES|PUBLIC|SHARED|STATIC|TARGET_OBJECTS)\\b/,\n    operator: /\\b(?:AND|DEFINED|EQUAL|GREATER|LESS|MATCHES|NOT|OR|STREQUAL|STRGREATER|STRLESS|VERSION_EQUAL|VERSION_GREATER|VERSION_LESS)\\b/,\n    inserted: {\n        pattern: /\\b\\w+::\\w+\\b/,\n        alias: \"class-name\"\n    },\n    number: /\\b\\d+(?:\\.\\d+)*\\b/,\n    function: /\\b[a-z_]\\w*(?=\\s*\\()\\b/i,\n    punctuation: /[()>}]|\\$[<{]/\n};\nPrism.languages.cobol = {\n    comment: {\n        pattern: /\\*>.*|(^[ \\t]*)\\*.*/m,\n        lookbehind: !0,\n        greedy: !0\n    },\n    string: {\n        pattern: /[xzgn]?(?:\"(?:[^\\r\\n\"]|\"\")*\"(?!\")|'(?:[^\\r\\n']|'')*'(?!'))/i,\n        greedy: !0\n    },\n    level: {\n        pattern: /(^[ \\t]*)\\d+\\b/m,\n        lookbehind: !0,\n        greedy: !0,\n        alias: \"number\"\n    },\n    \"class-name\": {\n        pattern: /(\\bpic(?:ture)?\\s+)(?:(?:[-\\w$/,:*+<>]|\\.(?!\\s|$))(?:\\(\\d+\\))?)+/i,\n        lookbehind: !0,\n        inside: {\n            number: {\n                pattern: /(\\()\\d+/,\n                lookbehind: !0\n            },\n            punctuation: /[()]/\n        }\n    },\n    keyword: {\n        pattern: /(^|[^\\w-])(?:ABORT|ACCEPT|ACCESS|ADD|ADDRESS|ADVANCING|AFTER|ALIGNED|ALL|ALPHABET|ALPHABETIC|ALPHABETIC-LOWER|ALPHABETIC-UPPER|ALPHANUMERIC|ALPHANUMERIC-EDITED|ALSO|ALTER|ALTERNATE|ANY|ARE|AREA|AREAS|AS|ASCENDING|ASCII|ASSIGN|ASSOCIATED-DATA|ASSOCIATED-DATA-LENGTH|AT|ATTRIBUTE|AUTHOR|AUTO|AUTO-SKIP|BACKGROUND-COLOR|BACKGROUND-COLOUR|BASIS|BEEP|BEFORE|BEGINNING|BELL|BINARY|BIT|BLANK|BLINK|BLOCK|BOTTOM|BOUNDS|BY|BYFUNCTION|BYTITLE|CALL|CANCEL|CAPABLE|CCSVERSION|CD|CF|CH|CHAINING|CHANGED|CHANNEL|CHARACTER|CHARACTERS|CLASS|CLASS-ID|CLOCK-UNITS|CLOSE|CLOSE-DISPOSITION|COBOL|CODE|CODE-SET|COL|COLLATING|COLUMN|COM-REG|COMMA|COMMITMENT|COMMON|COMMUNICATION|COMP|COMP-1|COMP-2|COMP-3|COMP-4|COMP-5|COMPUTATIONAL|COMPUTATIONAL-1|COMPUTATIONAL-2|COMPUTATIONAL-3|COMPUTATIONAL-4|COMPUTATIONAL-5|COMPUTE|CONFIGURATION|CONTAINS|CONTENT|CONTINUE|CONTROL|CONTROL-POINT|CONTROLS|CONVENTION|CONVERTING|COPY|CORR|CORRESPONDING|COUNT|CRUNCH|CURRENCY|CURSOR|DATA|DATA-BASE|DATE|DATE-COMPILED|DATE-WRITTEN|DAY|DAY-OF-WEEK|DBCS|DE|DEBUG-CONTENTS|DEBUG-ITEM|DEBUG-LINE|DEBUG-NAME|DEBUG-SUB-1|DEBUG-SUB-2|DEBUG-SUB-3|DEBUGGING|DECIMAL-POINT|DECLARATIVES|DEFAULT|DEFAULT-DISPLAY|DEFINITION|DELETE|DELIMITED|DELIMITER|DEPENDING|DESCENDING|DESTINATION|DETAIL|DFHRESP|DFHVALUE|DISABLE|DISK|DISPLAY|DISPLAY-1|DIVIDE|DIVISION|DONTCARE|DOUBLE|DOWN|DUPLICATES|DYNAMIC|EBCDIC|EGCS|EGI|ELSE|EMI|EMPTY-CHECK|ENABLE|END|END-ACCEPT|END-ADD|END-CALL|END-COMPUTE|END-DELETE|END-DIVIDE|END-EVALUATE|END-IF|END-MULTIPLY|END-OF-PAGE|END-PERFORM|END-READ|END-RECEIVE|END-RETURN|END-REWRITE|END-SEARCH|END-START|END-STRING|END-SUBTRACT|END-UNSTRING|END-WRITE|ENDING|ENTER|ENTRY|ENTRY-PROCEDURE|ENVIRONMENT|EOL|EOP|EOS|ERASE|ERROR|ESCAPE|ESI|EVALUATE|EVENT|EVERY|EXCEPTION|EXCLUSIVE|EXHIBIT|EXIT|EXPORT|EXTEND|EXTENDED|EXTERNAL|FD|FILE|FILE-CONTROL|FILLER|FINAL|FIRST|FOOTING|FOR|FOREGROUND-COLOR|FOREGROUND-COLOUR|FROM|FULL|FUNCTION|FUNCTION-POINTER|FUNCTIONNAME|GENERATE|GIVING|GLOBAL|GO|GOBACK|GRID|GROUP|HEADING|HIGH-VALUE|HIGH-VALUES|HIGHLIGHT|I-O|I-O-CONTROL|ID|IDENTIFICATION|IF|IMPLICIT|IMPORT|IN|INDEX|INDEXED|INDICATE|INITIAL|INITIALIZE|INITIATE|INPUT|INPUT-OUTPUT|INSPECT|INSTALLATION|INTEGER|INTO|INVALID|INVOKE|IS|JUST|JUSTIFIED|KANJI|KEPT|KEY|KEYBOARD|LABEL|LANGUAGE|LAST|LB|LD|LEADING|LEFT|LEFTLINE|LENGTH|LENGTH-CHECK|LIBACCESS|LIBPARAMETER|LIBRARY|LIMIT|LIMITS|LINAGE|LINAGE-COUNTER|LINE|LINE-COUNTER|LINES|LINKAGE|LIST|LOCAL|LOCAL-STORAGE|LOCK|LONG-DATE|LONG-TIME|LOW-VALUE|LOW-VALUES|LOWER|LOWLIGHT|MEMORY|MERGE|MESSAGE|MMDDYYYY|MODE|MODULES|MORE-LABELS|MOVE|MULTIPLE|MULTIPLY|NAMED|NATIONAL|NATIONAL-EDITED|NATIVE|NEGATIVE|NETWORK|NEXT|NO|NO-ECHO|NULL|NULLS|NUMBER|NUMERIC|NUMERIC-DATE|NUMERIC-EDITED|NUMERIC-TIME|OBJECT-COMPUTER|OCCURS|ODT|OF|OFF|OMITTED|ON|OPEN|OPTIONAL|ORDER|ORDERLY|ORGANIZATION|OTHER|OUTPUT|OVERFLOW|OVERLINE|OWN|PACKED-DECIMAL|PADDING|PAGE|PAGE-COUNTER|PASSWORD|PERFORM|PF|PH|PIC|PICTURE|PLUS|POINTER|PORT|POSITION|POSITIVE|PRINTER|PRINTING|PRIVATE|PROCEDURE|PROCEDURE-POINTER|PROCEDURES|PROCEED|PROCESS|PROGRAM|PROGRAM-ID|PROGRAM-LIBRARY|PROMPT|PURGE|QUEUE|QUOTE|QUOTES|RANDOM|RD|READ|READER|REAL|RECEIVE|RECEIVED|RECORD|RECORDING|RECORDS|RECURSIVE|REDEFINES|REEL|REF|REFERENCE|REFERENCES|RELATIVE|RELEASE|REMAINDER|REMARKS|REMOTE|REMOVAL|REMOVE|RENAMES|REPLACE|REPLACING|REPORT|REPORTING|REPORTS|REQUIRED|RERUN|RESERVE|RESET|RETURN|RETURN-CODE|RETURNING|REVERSE-VIDEO|REVERSED|REWIND|REWRITE|RF|RH|RIGHT|ROUNDED|RUN|SAME|SAVE|SCREEN|SD|SEARCH|SECTION|SECURE|SECURITY|SEGMENT|SEGMENT-LIMIT|SELECT|SEND|SENTENCE|SEPARATE|SEQUENCE|SEQUENTIAL|SET|SHARED|SHAREDBYALL|SHAREDBYRUNUNIT|SHARING|SHIFT-IN|SHIFT-OUT|SHORT-DATE|SIGN|SIZE|SORT|SORT-CONTROL|SORT-CORE-SIZE|SORT-FILE-SIZE|SORT-MERGE|SORT-MESSAGE|SORT-MODE-SIZE|SORT-RETURN|SOURCE|SOURCE-COMPUTER|SPACE|SPACES|SPECIAL-NAMES|STANDARD|STANDARD-1|STANDARD-2|START|STATUS|STOP|STRING|SUB-QUEUE-1|SUB-QUEUE-2|SUB-QUEUE-3|SUBTRACT|SUM|SUPPRESS|SYMBOL|SYMBOLIC|SYNC|SYNCHRONIZED|TABLE|TALLY|TALLYING|TAPE|TASK|TERMINAL|TERMINATE|TEST|TEXT|THEN|THREAD|THREAD-LOCAL|THROUGH|THRU|TIME|TIMER|TIMES|TITLE|TO|TODAYS-DATE|TODAYS-NAME|TOP|TRAILING|TRUNCATED|TYPE|TYPEDEF|UNDERLINE|UNIT|UNSTRING|UNTIL|UP|UPON|USAGE|USE|USING|VALUE|VALUES|VARYING|VIRTUAL|WAIT|WHEN|WHEN-COMPILED|WITH|WORDS|WORKING-STORAGE|WRITE|YEAR|YYYYDDD|YYYYMMDD|ZERO-FILL|ZEROES|ZEROS)(?![\\w-])/i,\n        lookbehind: !0\n    },\n    boolean: {\n        pattern: /(^|[^\\w-])(?:false|true)(?![\\w-])/i,\n        lookbehind: !0\n    },\n    number: {\n        pattern: /(^|[^\\w-])(?:[+-]?(?:(?:\\d+(?:[.,]\\d+)?|[.,]\\d+)(?:e[+-]?\\d+)?|zero))(?![\\w-])/i,\n        lookbehind: !0\n    },\n    operator: [\n        /<>|[<>]=?|[=+*/&]/,\n        {\n            pattern: /(^|[^\\w-])(?:-|and|equal|greater|less|not|or|than)(?![\\w-])/i,\n            lookbehind: !0\n        }\n    ],\n    punctuation: /[.:,()]/\n};\n!function(e) {\n    var t = /#(?!\\{).+/, n = {\n        pattern: /#\\{[^}]+\\}/,\n        alias: \"variable\"\n    };\n    e.languages.coffeescript = e.languages.extend(\"javascript\", {\n        comment: t,\n        string: [\n            {\n                pattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/,\n                greedy: !0\n            },\n            {\n                pattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,\n                greedy: !0,\n                inside: {\n                    interpolation: n\n                }\n            }\n        ],\n        keyword: /\\b(?:and|break|by|catch|class|continue|debugger|delete|do|each|else|extend|extends|false|finally|for|if|in|instanceof|is|isnt|let|loop|namespace|new|no|not|null|of|off|on|or|own|return|super|switch|then|this|throw|true|try|typeof|undefined|unless|until|when|while|window|with|yes|yield)\\b/,\n        \"class-member\": {\n            pattern: /@(?!\\d)\\w+/,\n            alias: \"variable\"\n        }\n    }), e.languages.insertBefore(\"coffeescript\", \"comment\", {\n        \"multiline-comment\": {\n            pattern: /###[\\s\\S]+?###/,\n            alias: \"comment\"\n        },\n        \"block-regex\": {\n            pattern: /\\/{3}[\\s\\S]*?\\/{3}/,\n            alias: \"regex\",\n            inside: {\n                comment: t,\n                interpolation: n\n            }\n        }\n    }), e.languages.insertBefore(\"coffeescript\", \"string\", {\n        \"inline-javascript\": {\n            pattern: /`(?:\\\\[\\s\\S]|[^\\\\`])*`/,\n            inside: {\n                delimiter: {\n                    pattern: /^`|`$/,\n                    alias: \"punctuation\"\n                },\n                script: {\n                    pattern: /[\\s\\S]+/,\n                    alias: \"language-javascript\",\n                    inside: e.languages.javascript\n                }\n            }\n        },\n        \"multiline-string\": [\n            {\n                pattern: /'''[\\s\\S]*?'''/,\n                greedy: !0,\n                alias: \"string\"\n            },\n            {\n                pattern: /\"\"\"[\\s\\S]*?\"\"\"/,\n                greedy: !0,\n                alias: \"string\",\n                inside: {\n                    interpolation: n\n                }\n            }\n        ]\n    }), e.languages.insertBefore(\"coffeescript\", \"keyword\", {\n        property: /(?!\\d)\\w+(?=\\s*:(?!:))/\n    }), delete e.languages.coffeescript[\"template-string\"], e.languages.coffee = e.languages.coffeescript;\n}(Prism);\nPrism.languages.concurnas = {\n    comment: {\n        pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?(?:\\*\\/|$)|\\/\\/.*)/,\n        lookbehind: !0,\n        greedy: !0\n    },\n    langext: {\n        pattern: /\\b\\w+\\s*\\|\\|[\\s\\S]+?\\|\\|/,\n        greedy: !0,\n        inside: {\n            \"class-name\": /^\\w+/,\n            string: {\n                pattern: /(^\\s*\\|\\|)[\\s\\S]+(?=\\|\\|$)/,\n                lookbehind: !0\n            },\n            punctuation: /\\|\\|/\n        }\n    },\n    function: {\n        pattern: /((?:^|\\s)def[ \\t]+)[a-zA-Z_]\\w*(?=\\s*\\()/,\n        lookbehind: !0\n    },\n    keyword: /\\b(?:abstract|actor|also|annotation|assert|async|await|bool|boolean|break|byte|case|catch|changed|char|class|closed|constant|continue|def|default|del|double|elif|else|enum|every|extends|false|finally|float|for|from|global|gpudef|gpukernel|if|import|in|init|inject|int|lambda|local|long|loop|match|new|nodefault|null|of|onchange|open|out|override|package|parfor|parforsync|post|pre|private|protected|provide|provider|public|return|shared|short|single|size_t|sizeof|super|sync|this|throw|trait|trans|transient|true|try|typedef|unchecked|using|val|var|void|while|with)\\b/,\n    boolean: /\\b(?:false|true)\\b/,\n    number: /\\b0b[01][01_]*L?\\b|\\b0x(?:[\\da-f_]*\\.)?[\\da-f_p+-]+\\b|(?:\\b\\d[\\d_]*(?:\\.[\\d_]*)?|\\B\\.\\d[\\d_]*)(?:e[+-]?\\d[\\d_]*)?[dfls]?/i,\n    punctuation: /[{}[\\];(),.:]/,\n    operator: /<==|>==|=>|->|<-|<>|&==|&<>|\\?:?|\\.\\?|\\+\\+|--|[-+*/=<>]=?|[!^~]|\\b(?:and|as|band|bor|bxor|comp|is|isnot|mod|or)\\b=?/,\n    annotation: {\n        pattern: /@(?:\\w+:)?(?:\\w+|\\[[^\\]]+\\])?/,\n        alias: \"builtin\"\n    }\n}, Prism.languages.insertBefore(\"concurnas\", \"langext\", {\n    \"regex-literal\": {\n        pattern: /\\br(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n        greedy: !0,\n        inside: {\n            interpolation: {\n                pattern: /((?:^|[^\\\\])(?:\\\\{2})*)\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}/,\n                lookbehind: !0,\n                inside: Prism.languages.concurnas\n            },\n            regex: /[\\s\\S]+/\n        }\n    },\n    \"string-literal\": {\n        pattern: /(?:\\B|\\bs)(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n        greedy: !0,\n        inside: {\n            interpolation: {\n                pattern: /((?:^|[^\\\\])(?:\\\\{2})*)\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}/,\n                lookbehind: !0,\n                inside: Prism.languages.concurnas\n            },\n            string: /[\\s\\S]+/\n        }\n    }\n}), Prism.languages.conc = Prism.languages.concurnas;\n!function(e) {\n    function n(e) {\n        return RegExp(\"([ \t])(?:\" + e + \")(?=[\\\\s;]|$)\", \"i\");\n    }\n    e.languages.csp = {\n        directive: {\n            pattern: /(^|[\\s;])(?:base-uri|block-all-mixed-content|(?:child|connect|default|font|frame|img|manifest|media|object|prefetch|script|style|worker)-src|disown-opener|form-action|frame-(?:ancestors|options)|input-protection(?:-(?:clip|selectors))?|navigate-to|plugin-types|policy-uri|referrer|reflected-xss|report-(?:to|uri)|require-sri-for|sandbox|(?:script|style)-src-(?:attr|elem)|upgrade-insecure-requests)(?=[\\s;]|$)/i,\n            lookbehind: !0,\n            alias: \"property\"\n        },\n        scheme: {\n            pattern: n(\"[a-z][a-z0-9.+-]*:\"),\n            lookbehind: !0\n        },\n        none: {\n            pattern: n(\"'none'\"),\n            lookbehind: !0,\n            alias: \"keyword\"\n        },\n        nonce: {\n            pattern: n(\"'nonce-[-+/\\\\w=]+'\"),\n            lookbehind: !0,\n            alias: \"number\"\n        },\n        hash: {\n            pattern: n(\"'sha(?:256|384|512)-[-+/\\\\w=]+'\"),\n            lookbehind: !0,\n            alias: \"number\"\n        },\n        host: {\n            pattern: n(\"[a-z][a-z0-9.+-]*://[^\\\\s;,']*|\\\\*[^\\\\s;,']*|[a-z0-9-]+(?:\\\\.[a-z0-9-]+)+(?::[\\\\d*]+)?(?:/[^\\\\s;,']*)?\"),\n            lookbehind: !0,\n            alias: \"url\",\n            inside: {\n                important: /\\*/\n            }\n        },\n        keyword: [\n            {\n                pattern: n(\"'unsafe-[a-z-]+'\"),\n                lookbehind: !0,\n                alias: \"unsafe\"\n            },\n            {\n                pattern: n(\"'[a-z-]+'\"),\n                lookbehind: !0,\n                alias: \"safe\"\n            }\n        ],\n        punctuation: /;/\n    };\n}(Prism);\n!function(e) {\n    var a = \"(?:(?!\\\\s)[\\\\d$+<=a-zA-Z\\\\x80-\\\\uFFFF])+\", t = \"[^{}@#]+\\\\{[^}#@]*\\\\}\";\n    e.languages.cooklang = {\n        comment: {\n            pattern: /\\[-[\\s\\S]*?-\\]|--.*/,\n            greedy: !0\n        },\n        meta: {\n            pattern: />>.*:.*/,\n            inside: {\n                property: {\n                    pattern: /(>>\\s*)[^\\s:](?:[^:]*[^\\s:])?/,\n                    lookbehind: !0\n                }\n            }\n        },\n        \"cookware-group\": {\n            pattern: new RegExp(\"#(?:\" + t + \"|\" + a + \")\"),\n            inside: {\n                cookware: {\n                    pattern: new RegExp(\"(^#)(?:[^{}@#]+)\"),\n                    lookbehind: !0,\n                    alias: \"variable\"\n                },\n                \"cookware-keyword\": {\n                    pattern: /^#/,\n                    alias: \"keyword\"\n                },\n                \"quantity-group\": {\n                    pattern: new RegExp(/\\{[^{}@#]*\\}/),\n                    inside: {\n                        quantity: {\n                            pattern: new RegExp(\"(^\\\\{)[^{}@#]+\"),\n                            lookbehind: !0,\n                            alias: \"number\"\n                        },\n                        punctuation: /[{}]/\n                    }\n                }\n            }\n        },\n        \"ingredient-group\": {\n            pattern: new RegExp(\"@(?:\" + t + \"|\" + a + \")\"),\n            inside: {\n                ingredient: {\n                    pattern: new RegExp(\"(^@)(?:[^{}@#]+)\"),\n                    lookbehind: !0,\n                    alias: \"variable\"\n                },\n                \"ingredient-keyword\": {\n                    pattern: /^@/,\n                    alias: \"keyword\"\n                },\n                \"amount-group\": {\n                    pattern: /\\{[^{}]*\\}/,\n                    inside: {\n                        amount: {\n                            pattern: /([\\{|])[^{}|*%]+/,\n                            lookbehind: !0,\n                            alias: \"number\"\n                        },\n                        unit: {\n                            pattern: /(%)[^}]+/,\n                            lookbehind: !0,\n                            alias: \"symbol\"\n                        },\n                        \"servings-scaler\": {\n                            pattern: /\\*/,\n                            alias: \"operator\"\n                        },\n                        \"servings-alternative-separator\": {\n                            pattern: /\\|/,\n                            alias: \"operator\"\n                        },\n                        \"unit-separator\": {\n                            pattern: /(?:%|(\\*)%)/,\n                            lookbehind: !0,\n                            alias: \"operator\"\n                        },\n                        punctuation: /[{}]/\n                    }\n                }\n            }\n        },\n        \"timer-group\": {\n            pattern: /~(?!\\s)[^@#~{}]*\\{[^{}]*\\}/,\n            inside: {\n                timer: {\n                    pattern: /(^~)[^{]+/,\n                    lookbehind: !0,\n                    alias: \"variable\"\n                },\n                \"duration-group\": {\n                    pattern: /\\{[^{}]*\\}/,\n                    inside: {\n                        punctuation: /[{}]/,\n                        unit: {\n                            pattern: new RegExp(\"(%\\\\s*)(?:h|hours|hrs|m|min|minutes)\\\\b\"),\n                            lookbehind: !0,\n                            alias: \"symbol\"\n                        },\n                        operator: /%/,\n                        duration: {\n                            pattern: /\\d+/,\n                            alias: \"number\"\n                        }\n                    }\n                },\n                \"timer-keyword\": {\n                    pattern: /^~/,\n                    alias: \"keyword\"\n                }\n            }\n        }\n    };\n}(Prism);\n!function(e) {\n    for(var t = \"\\\\(\\\\*(?:[^(*]|\\\\((?!\\\\*)|\\\\*(?!\\\\))|<self>)*\\\\*\\\\)\", i = 0; i < 2; i++)t = t.replace(/<self>/g, function() {\n        return t;\n    });\n    t = t.replace(/<self>/g, \"[]\"), e.languages.coq = {\n        comment: RegExp(t),\n        string: {\n            pattern: /\"(?:[^\"]|\"\")*\"(?!\")/,\n            greedy: !0\n        },\n        attribute: [\n            {\n                pattern: RegExp('#\\\\[(?:[^\\\\[\\\\](\"]|\"(?:[^\"]|\"\")*\"(?!\")|\\\\((?!\\\\*)|<comment>)*\\\\]'.replace(/<comment>/g, function() {\n                    return t;\n                })),\n                greedy: !0,\n                alias: \"attr-name\",\n                inside: {\n                    comment: RegExp(t),\n                    string: {\n                        pattern: /\"(?:[^\"]|\"\")*\"(?!\")/,\n                        greedy: !0\n                    },\n                    operator: /=/,\n                    punctuation: /^#\\[|\\]$|[,()]/\n                }\n            },\n            {\n                pattern: /\\b(?:Cumulative|Global|Local|Monomorphic|NonCumulative|Polymorphic|Private|Program)\\b/,\n                alias: \"attr-name\"\n            }\n        ],\n        keyword: /\\b(?:Abort|About|Add|Admit|Admitted|All|Arguments|As|Assumptions|Axiom|Axioms|Back|BackTo|Backtrace|BinOp|BinOpSpec|BinRel|Bind|Blacklist|Canonical|Case|Cd|Check|Class|Classes|Close|CoFixpoint|CoInductive|Coercion|Coercions|Collection|Combined|Compute|Conjecture|Conjectures|Constant|Constants|Constraint|Constructors|Context|Corollary|Create|CstOp|Custom|Cut|Debug|Declare|Defined|Definition|Delimit|Dependencies|Dependent|Derive|Diffs|Drop|Elimination|End|Entry|Equality|Eval|Example|Existential|Existentials|Existing|Export|Extern|Extraction|Fact|Fail|Field|File|Firstorder|Fixpoint|Flags|Focus|From|Funclass|Function|Functional|GC|Generalizable|Goal|Grab|Grammar|Graph|Guarded|Haskell|Heap|Hide|Hint|HintDb|Hints|Hypotheses|Hypothesis|IF|Identity|Immediate|Implicit|Implicits|Import|Include|Induction|Inductive|Infix|Info|Initial|InjTyp|Inline|Inspect|Instance|Instances|Intro|Intros|Inversion|Inversion_clear|JSON|Language|Left|Lemma|Let|Lia|Libraries|Library|Load|LoadPath|Locate|Ltac|Ltac2|ML|Match|Method|Minimality|Module|Modules|Morphism|Next|NoInline|Notation|Number|OCaml|Obligation|Obligations|Opaque|Open|Optimize|Parameter|Parameters|Parametric|Path|Paths|Prenex|Preterm|Primitive|Print|Profile|Projections|Proof|Prop|PropBinOp|PropOp|PropUOp|Property|Proposition|Pwd|Qed|Quit|Rec|Record|Recursive|Redirect|Reduction|Register|Relation|Remark|Remove|Require|Reserved|Reset|Resolve|Restart|Rewrite|Right|Ring|Rings|SProp|Saturate|Save|Scheme|Scope|Scopes|Search|SearchHead|SearchPattern|SearchRewrite|Section|Separate|Set|Setoid|Show|Signatures|Solve|Solver|Sort|Sortclass|Sorted|Spec|Step|Strategies|Strategy|String|Structure|SubClass|Subgraph|SuchThat|Tactic|Term|TestCompile|Theorem|Time|Timeout|To|Transparent|Type|Typeclasses|Types|Typing|UnOp|UnOpSpec|Undelimit|Undo|Unfocus|Unfocused|Unfold|Universe|Universes|Unshelve|Variable|Variables|Variant|Verbose|View|Visibility|Zify|_|apply|as|at|by|cofix|else|end|exists|exists2|fix|for|forall|fun|if|in|let|match|measure|move|removed|return|struct|then|using|wf|where|with)\\b/,\n        number: /\\b(?:0x[a-f0-9][a-f0-9_]*(?:\\.[a-f0-9_]+)?(?:p[+-]?\\d[\\d_]*)?|\\d[\\d_]*(?:\\.[\\d_]+)?(?:e[+-]?\\d[\\d_]*)?)\\b/i,\n        punct: {\n            pattern: /@\\{|\\{\\||\\[=|:>/,\n            alias: \"punctuation\"\n        },\n        operator: /\\/\\\\|\\\\\\/|\\.{2,3}|:{1,2}=|\\*\\*|[-=]>|<(?:->?|[+:=>]|<:)|>(?:=|->)|\\|[-|]?|[-!%&*+/<=>?@^~']/,\n        punctuation: /\\.\\(|`\\(|@\\{|`\\{|\\{\\||\\[=|:>|[:.,;(){}\\[\\]]/\n    };\n}(Prism);\n!function(e) {\n    e.languages.ruby = e.languages.extend(\"clike\", {\n        comment: {\n            pattern: /#.*|^=begin\\s[\\s\\S]*?^=end/m,\n            greedy: !0\n        },\n        \"class-name\": {\n            pattern: /(\\b(?:class|module)\\s+|\\bcatch\\s+\\()[\\w.\\\\]+|\\b[A-Z_]\\w*(?=\\s*\\.\\s*new\\b)/,\n            lookbehind: !0,\n            inside: {\n                punctuation: /[.\\\\]/\n            }\n        },\n        keyword: /\\b(?:BEGIN|END|alias|and|begin|break|case|class|def|define_method|defined|do|each|else|elsif|end|ensure|extend|for|if|in|include|module|new|next|nil|not|or|prepend|private|protected|public|raise|redo|require|rescue|retry|return|self|super|then|throw|undef|unless|until|when|while|yield)\\b/,\n        operator: /\\.{2,3}|&\\.|===|<?=>|[!=]?~|(?:&&|\\|\\||<<|>>|\\*\\*|[+\\-*/%<>!^&|=])=?|[?:]/,\n        punctuation: /[(){}[\\].,;]/\n    }), e.languages.insertBefore(\"ruby\", \"operator\", {\n        \"double-colon\": {\n            pattern: /::/,\n            alias: \"punctuation\"\n        }\n    });\n    var n = {\n        pattern: /((?:^|[^\\\\])(?:\\\\{2})*)#\\{(?:[^{}]|\\{[^{}]*\\})*\\}/,\n        lookbehind: !0,\n        inside: {\n            content: {\n                pattern: /^(#\\{)[\\s\\S]+(?=\\}$)/,\n                lookbehind: !0,\n                inside: e.languages.ruby\n            },\n            delimiter: {\n                pattern: /^#\\{|\\}$/,\n                alias: \"punctuation\"\n            }\n        }\n    };\n    delete e.languages.ruby.function;\n    var t = \"(?:\" + [\n        \"([^a-zA-Z0-9\\\\s{(\\\\[<=])(?:(?!\\\\1)[^\\\\\\\\]|\\\\\\\\[^])*\\\\1\",\n        \"\\\\((?:[^()\\\\\\\\]|\\\\\\\\[^]|\\\\((?:[^()\\\\\\\\]|\\\\\\\\[^])*\\\\))*\\\\)\",\n        \"\\\\{(?:[^{}\\\\\\\\]|\\\\\\\\[^]|\\\\{(?:[^{}\\\\\\\\]|\\\\\\\\[^])*\\\\})*\\\\}\",\n        \"\\\\[(?:[^\\\\[\\\\]\\\\\\\\]|\\\\\\\\[^]|\\\\[(?:[^\\\\[\\\\]\\\\\\\\]|\\\\\\\\[^])*\\\\])*\\\\]\",\n        \"<(?:[^<>\\\\\\\\]|\\\\\\\\[^]|<(?:[^<>\\\\\\\\]|\\\\\\\\[^])*>)*>\"\n    ].join(\"|\") + \")\", i = '(?:\"(?:\\\\\\\\.|[^\"\\\\\\\\\\r\\n])*\"|(?:\\\\b[a-zA-Z_]\\\\w*|[^\\\\s\\x00-\\\\x7F]+)[?!]?|\\\\$.)';\n    e.languages.insertBefore(\"ruby\", \"keyword\", {\n        \"regex-literal\": [\n            {\n                pattern: RegExp(\"%r\" + t + \"[egimnosux]{0,6}\"),\n                greedy: !0,\n                inside: {\n                    interpolation: n,\n                    regex: /[\\s\\S]+/\n                }\n            },\n            {\n                pattern: /(^|[^/])\\/(?!\\/)(?:\\[[^\\r\\n\\]]+\\]|\\\\.|[^[/\\\\\\r\\n])+\\/[egimnosux]{0,6}(?=\\s*(?:$|[\\r\\n,.;})#]))/,\n                lookbehind: !0,\n                greedy: !0,\n                inside: {\n                    interpolation: n,\n                    regex: /[\\s\\S]+/\n                }\n            }\n        ],\n        variable: /[@$]+[a-zA-Z_]\\w*(?:[?!]|\\b)/,\n        symbol: [\n            {\n                pattern: RegExp(\"(^|[^:]):\" + i),\n                lookbehind: !0,\n                greedy: !0\n            },\n            {\n                pattern: RegExp(\"([\\r\\n{(,][ \t]*)\" + i + \"(?=:(?!:))\"),\n                lookbehind: !0,\n                greedy: !0\n            }\n        ],\n        \"method-definition\": {\n            pattern: /(\\bdef\\s+)\\w+(?:\\s*\\.\\s*\\w+)?/,\n            lookbehind: !0,\n            inside: {\n                function: /\\b\\w+$/,\n                keyword: /^self\\b/,\n                \"class-name\": /^\\w+/,\n                punctuation: /\\./\n            }\n        }\n    }), e.languages.insertBefore(\"ruby\", \"string\", {\n        \"string-literal\": [\n            {\n                pattern: RegExp(\"%[qQiIwWs]?\" + t),\n                greedy: !0,\n                inside: {\n                    interpolation: n,\n                    string: /[\\s\\S]+/\n                }\n            },\n            {\n                pattern: /(\"|')(?:#\\{[^}]+\\}|#(?!\\{)|\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\#\\r\\n])*\\1/,\n                greedy: !0,\n                inside: {\n                    interpolation: n,\n                    string: /[\\s\\S]+/\n                }\n            },\n            {\n                pattern: /<<[-~]?([a-z_]\\w*)[\\r\\n](?:.*[\\r\\n])*?[\\t ]*\\1/i,\n                alias: \"heredoc-string\",\n                greedy: !0,\n                inside: {\n                    delimiter: {\n                        pattern: /^<<[-~]?[a-z_]\\w*|\\b[a-z_]\\w*$/i,\n                        inside: {\n                            symbol: /\\b\\w+/,\n                            punctuation: /^<<[-~]?/\n                        }\n                    },\n                    interpolation: n,\n                    string: /[\\s\\S]+/\n                }\n            },\n            {\n                pattern: /<<[-~]?'([a-z_]\\w*)'[\\r\\n](?:.*[\\r\\n])*?[\\t ]*\\1/i,\n                alias: \"heredoc-string\",\n                greedy: !0,\n                inside: {\n                    delimiter: {\n                        pattern: /^<<[-~]?'[a-z_]\\w*'|\\b[a-z_]\\w*$/i,\n                        inside: {\n                            symbol: /\\b\\w+/,\n                            punctuation: /^<<[-~]?'|'$/\n                        }\n                    },\n                    string: /[\\s\\S]+/\n                }\n            }\n        ],\n        \"command-literal\": [\n            {\n                pattern: RegExp(\"%x\" + t),\n                greedy: !0,\n                inside: {\n                    interpolation: n,\n                    command: {\n                        pattern: /[\\s\\S]+/,\n                        alias: \"string\"\n                    }\n                }\n            },\n            {\n                pattern: /`(?:#\\{[^}]+\\}|#(?!\\{)|\\\\(?:\\r\\n|[\\s\\S])|[^\\\\`#\\r\\n])*`/,\n                greedy: !0,\n                inside: {\n                    interpolation: n,\n                    command: {\n                        pattern: /[\\s\\S]+/,\n                        alias: \"string\"\n                    }\n                }\n            }\n        ]\n    }), delete e.languages.ruby.string, e.languages.insertBefore(\"ruby\", \"number\", {\n        builtin: /\\b(?:Array|Bignum|Binding|Class|Continuation|Dir|Exception|FalseClass|File|Fixnum|Float|Hash|IO|Integer|MatchData|Method|Module|NilClass|Numeric|Object|Proc|Range|Regexp|Stat|String|Struct|Symbol|TMS|Thread|ThreadGroup|Time|TrueClass)\\b/,\n        constant: /\\b[A-Z][A-Z0-9_]*(?:[?!]|\\b)/\n    }), e.languages.rb = e.languages.ruby;\n}(Prism);\n!function(e) {\n    e.languages.crystal = e.languages.extend(\"ruby\", {\n        keyword: [\n            /\\b(?:__DIR__|__END_LINE__|__FILE__|__LINE__|abstract|alias|annotation|as|asm|begin|break|case|class|def|do|else|elsif|end|ensure|enum|extend|for|fun|if|ifdef|include|instance_sizeof|lib|macro|module|next|of|out|pointerof|private|protected|ptr|require|rescue|return|select|self|sizeof|struct|super|then|type|typeof|undef|uninitialized|union|unless|until|when|while|with|yield)\\b/,\n            {\n                pattern: /(\\.\\s*)(?:is_a|responds_to)\\?/,\n                lookbehind: !0\n            }\n        ],\n        number: /\\b(?:0b[01_]*[01]|0o[0-7_]*[0-7]|0x[\\da-fA-F_]*[\\da-fA-F]|(?:\\d(?:[\\d_]*\\d)?)(?:\\.[\\d_]*\\d)?(?:[eE][+-]?[\\d_]*\\d)?)(?:_(?:[uif](?:8|16|32|64))?)?\\b/,\n        operator: [\n            /->/,\n            e.languages.ruby.operator\n        ],\n        punctuation: /[(){}[\\].,;\\\\]/\n    }), e.languages.insertBefore(\"crystal\", \"string-literal\", {\n        attribute: {\n            pattern: /@\\[.*?\\]/,\n            inside: {\n                delimiter: {\n                    pattern: /^@\\[|\\]$/,\n                    alias: \"punctuation\"\n                },\n                attribute: {\n                    pattern: /^(\\s*)\\w+/,\n                    lookbehind: !0,\n                    alias: \"class-name\"\n                },\n                args: {\n                    pattern: /\\S(?:[\\s\\S]*\\S)?/,\n                    inside: e.languages.crystal\n                }\n            }\n        },\n        expansion: {\n            pattern: /\\{(?:\\{.*?\\}|%.*?%)\\}/,\n            inside: {\n                content: {\n                    pattern: /^(\\{.)[\\s\\S]+(?=.\\}$)/,\n                    lookbehind: !0,\n                    inside: e.languages.crystal\n                },\n                delimiter: {\n                    pattern: /^\\{[\\{%]|[\\}%]\\}$/,\n                    alias: \"operator\"\n                }\n            }\n        },\n        char: {\n            pattern: /'(?:[^\\\\\\r\\n]{1,2}|\\\\(?:.|u(?:[A-Fa-f0-9]{1,4}|\\{[A-Fa-f0-9]{1,6}\\})))'/,\n            greedy: !0\n        }\n    });\n}(Prism);\n!function(e) {\n    var a, n = /(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/;\n    e.languages.css.selector = {\n        pattern: e.languages.css.selector.pattern,\n        lookbehind: !0,\n        inside: a = {\n            \"pseudo-element\": /:(?:after|before|first-letter|first-line|selection)|::[-\\w]+/,\n            \"pseudo-class\": /:[-\\w]+/,\n            class: /\\.[-\\w]+/,\n            id: /#[-\\w]+/,\n            attribute: {\n                pattern: RegExp(\"\\\\[(?:[^[\\\\]\\\"']|\" + n.source + \")*\\\\]\"),\n                greedy: !0,\n                inside: {\n                    punctuation: /^\\[|\\]$/,\n                    \"case-sensitivity\": {\n                        pattern: /(\\s)[si]$/i,\n                        lookbehind: !0,\n                        alias: \"keyword\"\n                    },\n                    namespace: {\n                        pattern: /^(\\s*)(?:(?!\\s)[-*\\w\\xA0-\\uFFFF])*\\|(?!=)/,\n                        lookbehind: !0,\n                        inside: {\n                            punctuation: /\\|$/\n                        }\n                    },\n                    \"attr-name\": {\n                        pattern: /^(\\s*)(?:(?!\\s)[-\\w\\xA0-\\uFFFF])+/,\n                        lookbehind: !0\n                    },\n                    \"attr-value\": [\n                        n,\n                        {\n                            pattern: /(=\\s*)(?:(?!\\s)[-\\w\\xA0-\\uFFFF])+(?=\\s*$)/,\n                            lookbehind: !0\n                        }\n                    ],\n                    operator: /[|~*^$]?=/\n                }\n            },\n            \"n-th\": [\n                {\n                    pattern: /(\\(\\s*)[+-]?\\d*[\\dn](?:\\s*[+-]\\s*\\d+)?(?=\\s*\\))/,\n                    lookbehind: !0,\n                    inside: {\n                        number: /[\\dn]+/,\n                        operator: /[+-]/\n                    }\n                },\n                {\n                    pattern: /(\\(\\s*)(?:even|odd)(?=\\s*\\))/i,\n                    lookbehind: !0\n                }\n            ],\n            combinator: />|\\+|~|\\|\\|/,\n            punctuation: /[(),]/\n        }\n    }, e.languages.css.atrule.inside[\"selector-function-argument\"].inside = a, e.languages.insertBefore(\"css\", \"property\", {\n        variable: {\n            pattern: /(^|[^-\\w\\xA0-\\uFFFF])--(?!\\s)[-_a-z\\xA0-\\uFFFF](?:(?!\\s)[-\\w\\xA0-\\uFFFF])*/i,\n            lookbehind: !0\n        }\n    });\n    var r = {\n        pattern: /(\\b\\d+)(?:%|[a-z]+(?![\\w-]))/,\n        lookbehind: !0\n    }, i = {\n        pattern: /(^|[^\\w.-])-?(?:\\d+(?:\\.\\d+)?|\\.\\d+)/,\n        lookbehind: !0\n    };\n    e.languages.insertBefore(\"css\", \"function\", {\n        operator: {\n            pattern: /(\\s)[+\\-*\\/](?=\\s)/,\n            lookbehind: !0\n        },\n        hexcode: {\n            pattern: /\\B#[\\da-f]{3,8}\\b/i,\n            alias: \"color\"\n        },\n        color: [\n            {\n                pattern: /(^|[^\\w-])(?:AliceBlue|AntiqueWhite|Aqua|Aquamarine|Azure|Beige|Bisque|Black|BlanchedAlmond|Blue|BlueViolet|Brown|BurlyWood|CadetBlue|Chartreuse|Chocolate|Coral|CornflowerBlue|Cornsilk|Crimson|Cyan|DarkBlue|DarkCyan|DarkGoldenRod|DarkGr[ae]y|DarkGreen|DarkKhaki|DarkMagenta|DarkOliveGreen|DarkOrange|DarkOrchid|DarkRed|DarkSalmon|DarkSeaGreen|DarkSlateBlue|DarkSlateGr[ae]y|DarkTurquoise|DarkViolet|DeepPink|DeepSkyBlue|DimGr[ae]y|DodgerBlue|FireBrick|FloralWhite|ForestGreen|Fuchsia|Gainsboro|GhostWhite|Gold|GoldenRod|Gr[ae]y|Green|GreenYellow|HoneyDew|HotPink|IndianRed|Indigo|Ivory|Khaki|Lavender|LavenderBlush|LawnGreen|LemonChiffon|LightBlue|LightCoral|LightCyan|LightGoldenRodYellow|LightGr[ae]y|LightGreen|LightPink|LightSalmon|LightSeaGreen|LightSkyBlue|LightSlateGr[ae]y|LightSteelBlue|LightYellow|Lime|LimeGreen|Linen|Magenta|Maroon|MediumAquaMarine|MediumBlue|MediumOrchid|MediumPurple|MediumSeaGreen|MediumSlateBlue|MediumSpringGreen|MediumTurquoise|MediumVioletRed|MidnightBlue|MintCream|MistyRose|Moccasin|NavajoWhite|Navy|OldLace|Olive|OliveDrab|Orange|OrangeRed|Orchid|PaleGoldenRod|PaleGreen|PaleTurquoise|PaleVioletRed|PapayaWhip|PeachPuff|Peru|Pink|Plum|PowderBlue|Purple|RebeccaPurple|Red|RosyBrown|RoyalBlue|SaddleBrown|Salmon|SandyBrown|SeaGreen|SeaShell|Sienna|Silver|SkyBlue|SlateBlue|SlateGr[ae]y|Snow|SpringGreen|SteelBlue|Tan|Teal|Thistle|Tomato|Transparent|Turquoise|Violet|Wheat|White|WhiteSmoke|Yellow|YellowGreen)(?![\\w-])/i,\n                lookbehind: !0\n            },\n            {\n                pattern: /\\b(?:hsl|rgb)\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*\\)\\B|\\b(?:hsl|rgb)a\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*,\\s*(?:0|0?\\.\\d+|1)\\s*\\)\\B/i,\n                inside: {\n                    unit: r,\n                    number: i,\n                    function: /[\\w-]+(?=\\()/,\n                    punctuation: /[(),]/\n                }\n            }\n        ],\n        entity: /\\\\[\\da-f]{1,8}/i,\n        unit: r,\n        number: i\n    });\n}(Prism);\nPrism.languages.csv = {\n    value: /[^\\r\\n,\"]+|\"(?:[^\"]|\"\")*\"(?!\")/,\n    punctuation: /,/\n};\n!function(e) {\n    var n = \"(?:\" + \"\\\"\\\"\\\"(?:[^\\\\\\\\\\\"]|\\\"(?!\\\"\\\"\\\\2)|<esc>)*\\\"\\\"\\\"|'''(?:[^\\\\\\\\']|'(?!''\\\\2)|<esc>)*'''|\\\"(?:[^\\\\\\\\\\r\\n\\\"]|\\\"(?!\\\\2)|<esc>)*\\\"|'(?:[^\\\\\\\\\\r\\n']|'(?!\\\\2)|<esc>)*'\".replace(/<esc>/g, \"\\\\\\\\(?:(?!\\\\2)|\\\\2(?:[^()\\r\\n]|\\\\([^()]*\\\\)))\") + \")\";\n    e.languages.cue = {\n        comment: {\n            pattern: /\\/\\/.*/,\n            greedy: !0\n        },\n        \"string-literal\": {\n            pattern: RegExp(\"(^|[^#\\\"'\\\\\\\\])(#*)\" + n + \"(?![\\\"'])\\\\2\"),\n            lookbehind: !0,\n            greedy: !0,\n            inside: {\n                escape: {\n                    pattern: /(?=[\\s\\S]*[\"'](#*)$)\\\\\\1(?:U[a-fA-F0-9]{1,8}|u[a-fA-F0-9]{1,4}|x[a-fA-F0-9]{1,2}|\\d{2,3}|[^(])/,\n                    greedy: !0,\n                    alias: \"string\"\n                },\n                interpolation: {\n                    pattern: /(?=[\\s\\S]*[\"'](#*)$)\\\\\\1\\([^()]*\\)/,\n                    greedy: !0,\n                    inside: {\n                        punctuation: /^\\\\#*\\(|\\)$/,\n                        expression: {\n                            pattern: /[\\s\\S]+/,\n                            inside: null\n                        }\n                    }\n                },\n                string: /[\\s\\S]+/\n            }\n        },\n        keyword: {\n            pattern: /(^|[^\\w$])(?:for|if|import|in|let|null|package)(?![\\w$])/,\n            lookbehind: !0\n        },\n        boolean: {\n            pattern: /(^|[^\\w$])(?:false|true)(?![\\w$])/,\n            lookbehind: !0\n        },\n        builtin: {\n            pattern: /(^|[^\\w$])(?:bool|bytes|float|float(?:32|64)|u?int(?:8|16|32|64|128)?|number|rune|string)(?![\\w$])/,\n            lookbehind: !0\n        },\n        attribute: {\n            pattern: /@[\\w$]+(?=\\s*\\()/,\n            alias: \"function\"\n        },\n        function: {\n            pattern: /(^|[^\\w$])[a-z_$][\\w$]*(?=\\s*\\()/i,\n            lookbehind: !0\n        },\n        number: {\n            pattern: /(^|[^\\w$.])(?:0b[01]+(?:_[01]+)*|0o[0-7]+(?:_[0-7]+)*|0[xX][0-9A-Fa-f]+(?:_[0-9A-Fa-f]+)*|(?:\\d+(?:_\\d+)*(?:\\.(?:\\d+(?:_\\d+)*)?)?|\\.\\d+(?:_\\d+)*)(?:[eE][+-]?\\d+(?:_\\d+)*)?(?:[KMGTP]i?)?)(?![\\w$])/,\n            lookbehind: !0\n        },\n        operator: /\\.{3}|_\\|_|&&?|\\|\\|?|[=!]~|[<>=!]=?|[+\\-*/?]/,\n        punctuation: /[()[\\]{},.:]/\n    }, e.languages.cue[\"string-literal\"].inside.interpolation.inside.expression.inside = e.languages.cue;\n}(Prism);\nPrism.languages.cypher = {\n    comment: /\\/\\/.*/,\n    string: {\n        pattern: /\"(?:[^\"\\\\\\r\\n]|\\\\.)*\"|'(?:[^'\\\\\\r\\n]|\\\\.)*'/,\n        greedy: !0\n    },\n    \"class-name\": {\n        pattern: /(:\\s*)(?:\\w+|`(?:[^`\\\\\\r\\n])*`)(?=\\s*[{):])/,\n        lookbehind: !0,\n        greedy: !0\n    },\n    relationship: {\n        pattern: /(-\\[\\s*(?:\\w+\\s*|`(?:[^`\\\\\\r\\n])*`\\s*)?:\\s*|\\|\\s*:\\s*)(?:\\w+|`(?:[^`\\\\\\r\\n])*`)/,\n        lookbehind: !0,\n        greedy: !0,\n        alias: \"property\"\n    },\n    identifier: {\n        pattern: /`(?:[^`\\\\\\r\\n])*`/,\n        greedy: !0\n    },\n    variable: /\\$\\w+/,\n    keyword: /\\b(?:ADD|ALL|AND|AS|ASC|ASCENDING|ASSERT|BY|CALL|CASE|COMMIT|CONSTRAINT|CONTAINS|CREATE|CSV|DELETE|DESC|DESCENDING|DETACH|DISTINCT|DO|DROP|ELSE|END|ENDS|EXISTS|FOR|FOREACH|IN|INDEX|IS|JOIN|KEY|LIMIT|LOAD|MANDATORY|MATCH|MERGE|NODE|NOT|OF|ON|OPTIONAL|OR|ORDER(?=\\s+BY)|PERIODIC|REMOVE|REQUIRE|RETURN|SCALAR|SCAN|SET|SKIP|START|STARTS|THEN|UNION|UNIQUE|UNWIND|USING|WHEN|WHERE|WITH|XOR|YIELD)\\b/i,\n    function: /\\b\\w+\\b(?=\\s*\\()/,\n    boolean: /\\b(?:false|null|true)\\b/i,\n    number: /\\b(?:0x[\\da-fA-F]+|\\d+(?:\\.\\d+)?(?:[eE][+-]?\\d+)?)\\b/,\n    operator: /:|<--?|--?>?|<>|=~?|[<>]=?|[+*/%^|]|\\.\\.\\.?/,\n    punctuation: /[()[\\]{},;.]/\n};\nPrism.languages.d = Prism.languages.extend(\"clike\", {\n    comment: [\n        {\n            pattern: /^\\s*#!.+/,\n            greedy: !0\n        },\n        {\n            pattern: RegExp(\"(^|[^\\\\\\\\])(?:\" + [\n                \"/\\\\+(?:/\\\\+(?:[^+]|\\\\+(?!/))*\\\\+/|(?!/\\\\+)[^])*?\\\\+/\",\n                \"//.*\",\n                \"/\\\\*[^]*?\\\\*/\"\n            ].join(\"|\") + \")\"),\n            lookbehind: !0,\n            greedy: !0\n        }\n    ],\n    string: [\n        {\n            pattern: RegExp([\n                '\\\\b[rx]\"(?:\\\\\\\\[^]|[^\\\\\\\\\"])*\"[cwd]?',\n                '\\\\bq\"(?:\\\\[[^]*?\\\\]|\\\\([^]*?\\\\)|<[^]*?>|\\\\{[^]*?\\\\})\"',\n                '\\\\bq\"((?!\\\\d)\\\\w+)$[^]*?^\\\\1\"',\n                '\\\\bq\"(.)[^]*?\\\\2\"',\n                '([\"`])(?:\\\\\\\\[^]|(?!\\\\3)[^\\\\\\\\])*\\\\3[cwd]?'\n            ].join(\"|\"), \"m\"),\n            greedy: !0\n        },\n        {\n            pattern: /\\bq\\{(?:\\{[^{}]*\\}|[^{}])*\\}/,\n            greedy: !0,\n            alias: \"token-string\"\n        }\n    ],\n    keyword: /\\$|\\b(?:__(?:(?:DATE|EOF|FILE|FUNCTION|LINE|MODULE|PRETTY_FUNCTION|TIMESTAMP|TIME|VENDOR|VERSION)__|gshared|parameters|traits|vector)|abstract|alias|align|asm|assert|auto|body|bool|break|byte|case|cast|catch|cdouble|cent|cfloat|char|class|const|continue|creal|dchar|debug|default|delegate|delete|deprecated|do|double|dstring|else|enum|export|extern|false|final|finally|float|for|foreach|foreach_reverse|function|goto|idouble|if|ifloat|immutable|import|inout|int|interface|invariant|ireal|lazy|long|macro|mixin|module|new|nothrow|null|out|override|package|pragma|private|protected|ptrdiff_t|public|pure|real|ref|return|scope|shared|short|size_t|static|string|struct|super|switch|synchronized|template|this|throw|true|try|typedef|typeid|typeof|ubyte|ucent|uint|ulong|union|unittest|ushort|version|void|volatile|wchar|while|with|wstring)\\b/,\n    number: [\n        /\\b0x\\.?[a-f\\d_]+(?:(?!\\.\\.)\\.[a-f\\d_]*)?(?:p[+-]?[a-f\\d_]+)?[ulfi]{0,4}/i,\n        {\n            pattern: /((?:\\.\\.)?)(?:\\b0b\\.?|\\b|\\.)\\d[\\d_]*(?:(?!\\.\\.)\\.[\\d_]*)?(?:e[+-]?\\d[\\d_]*)?[ulfi]{0,4}/i,\n            lookbehind: !0\n        }\n    ],\n    operator: /\\|[|=]?|&[&=]?|\\+[+=]?|-[-=]?|\\.?\\.\\.|=[>=]?|!(?:i[ns]\\b|<>?=?|>=?|=)?|\\bi[ns]\\b|(?:<[<>]?|>>?>?|\\^\\^|[*\\/%^~])=?/\n}), Prism.languages.insertBefore(\"d\", \"string\", {\n    char: /'(?:\\\\(?:\\W|\\w+)|[^\\\\])'/\n}), Prism.languages.insertBefore(\"d\", \"keyword\", {\n    property: /\\B@\\w*/\n}), Prism.languages.insertBefore(\"d\", \"function\", {\n    register: {\n        pattern: /\\b(?:[ABCD][LHX]|E?(?:BP|DI|SI|SP)|[BS]PL|[ECSDGF]S|CR[0234]|[DS]IL|DR[012367]|E[ABCD]X|X?MM[0-7]|R(?:1[0-5]|[89])[BWD]?|R[ABCD]X|R[BS]P|R[DS]I|TR[3-7]|XMM(?:1[0-5]|[89])|YMM(?:1[0-5]|\\d))\\b|\\bST(?:\\([0-7]\\)|\\b)/,\n        alias: \"variable\"\n    }\n});\n!function(e) {\n    var a = [\n        /\\b(?:async|sync|yield)\\*/,\n        /\\b(?:abstract|assert|async|await|break|case|catch|class|const|continue|covariant|default|deferred|do|dynamic|else|enum|export|extends|extension|external|factory|final|finally|for|get|hide|if|implements|import|in|interface|library|mixin|new|null|on|operator|part|rethrow|return|set|show|static|super|switch|sync|this|throw|try|typedef|var|void|while|with|yield)\\b/\n    ], n = \"(^|[^\\\\w.])(?:[a-z]\\\\w*\\\\s*\\\\.\\\\s*)*(?:[A-Z]\\\\w*\\\\s*\\\\.\\\\s*)*\", s = {\n        pattern: RegExp(n + \"[A-Z](?:[\\\\d_A-Z]*[a-z]\\\\w*)?\\\\b\"),\n        lookbehind: !0,\n        inside: {\n            namespace: {\n                pattern: /^[a-z]\\w*(?:\\s*\\.\\s*[a-z]\\w*)*(?:\\s*\\.)?/,\n                inside: {\n                    punctuation: /\\./\n                }\n            }\n        }\n    };\n    e.languages.dart = e.languages.extend(\"clike\", {\n        \"class-name\": [\n            s,\n            {\n                pattern: RegExp(n + \"[A-Z]\\\\w*(?=\\\\s+\\\\w+\\\\s*[;,=()])\"),\n                lookbehind: !0,\n                inside: s.inside\n            }\n        ],\n        keyword: a,\n        operator: /\\bis!|\\b(?:as|is)\\b|\\+\\+|--|&&|\\|\\||<<=?|>>=?|~(?:\\/=?)?|[+\\-*\\/%&^|=!<>]=?|\\?/\n    }), e.languages.insertBefore(\"dart\", \"string\", {\n        \"string-literal\": {\n            pattern: /r?(?:(\"\"\"|''')[\\s\\S]*?\\1|([\"'])(?:\\\\.|(?!\\2)[^\\\\\\r\\n])*\\2(?!\\2))/,\n            greedy: !0,\n            inside: {\n                interpolation: {\n                    pattern: /((?:^|[^\\\\])(?:\\\\{2})*)\\$(?:\\w+|\\{(?:[^{}]|\\{[^{}]*\\})*\\})/,\n                    lookbehind: !0,\n                    inside: {\n                        punctuation: /^\\$\\{?|\\}$/,\n                        expression: {\n                            pattern: /[\\s\\S]+/,\n                            inside: e.languages.dart\n                        }\n                    }\n                },\n                string: /[\\s\\S]+/\n            }\n        },\n        string: void 0\n    }), e.languages.insertBefore(\"dart\", \"class-name\", {\n        metadata: {\n            pattern: /@\\w+/,\n            alias: \"function\"\n        }\n    }), e.languages.insertBefore(\"dart\", \"class-name\", {\n        generics: {\n            pattern: /<(?:[\\w\\s,.&?]|<(?:[\\w\\s,.&?]|<(?:[\\w\\s,.&?]|<[\\w\\s,.&?]*>)*>)*>)*>/,\n            inside: {\n                \"class-name\": s,\n                keyword: a,\n                punctuation: /[<>(),.:]/,\n                operator: /[?&|]/\n            }\n        }\n    });\n}(Prism);\n!function(e) {\n    e.languages.dataweave = {\n        url: /\\b[A-Za-z]+:\\/\\/[\\w/:.?=&-]+|\\burn:[\\w:.?=&-]+/,\n        property: {\n            pattern: /(?:\\b\\w+#)?(?:\"(?:\\\\.|[^\\\\\"\\r\\n])*\"|\\b\\w+)(?=\\s*[:@])/,\n            greedy: !0\n        },\n        string: {\n            pattern: /([\"'`])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/,\n            greedy: !0\n        },\n        \"mime-type\": /\\b(?:application|audio|image|multipart|text|video)\\/[\\w+-]+/,\n        date: {\n            pattern: /\\|[\\w:+-]+\\|/,\n            greedy: !0\n        },\n        comment: [\n            {\n                pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n                lookbehind: !0,\n                greedy: !0\n            },\n            {\n                pattern: /(^|[^\\\\:])\\/\\/.*/,\n                lookbehind: !0,\n                greedy: !0\n            }\n        ],\n        regex: {\n            pattern: /\\/(?:[^\\\\\\/\\r\\n]|\\\\[^\\r\\n])+\\//,\n            greedy: !0\n        },\n        keyword: /\\b(?:and|as|at|case|do|else|fun|if|input|is|match|not|ns|null|or|output|type|unless|update|using|var)\\b/,\n        function: /\\b[A-Z_]\\w*(?=\\s*\\()/i,\n        number: /-?\\b\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?\\b/i,\n        punctuation: /[{}[\\];(),.:@]/,\n        operator: /<<|>>|->|[<>~=]=?|!=|--?-?|\\+\\+?|!|\\?/,\n        boolean: /\\b(?:false|true)\\b/\n    };\n}(Prism);\nPrism.languages.dax = {\n    comment: {\n        pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|(?:--|\\/\\/).*)/,\n        lookbehind: !0\n    },\n    \"data-field\": {\n        pattern: /'(?:[^']|'')*'(?!')(?:\\[[ \\w\\xA0-\\uFFFF]+\\])?|\\w+\\[[ \\w\\xA0-\\uFFFF]+\\]/,\n        alias: \"symbol\"\n    },\n    measure: {\n        pattern: /\\[[ \\w\\xA0-\\uFFFF]+\\]/,\n        alias: \"constant\"\n    },\n    string: {\n        pattern: /\"(?:[^\"]|\"\")*\"(?!\")/,\n        greedy: !0\n    },\n    function: /\\b(?:ABS|ACOS|ACOSH|ACOT|ACOTH|ADDCOLUMNS|ADDMISSINGITEMS|ALL|ALLCROSSFILTERED|ALLEXCEPT|ALLNOBLANKROW|ALLSELECTED|AND|APPROXIMATEDISTINCTCOUNT|ASIN|ASINH|ATAN|ATANH|AVERAGE|AVERAGEA|AVERAGEX|BETA\\.DIST|BETA\\.INV|BLANK|CALCULATE|CALCULATETABLE|CALENDAR|CALENDARAUTO|CEILING|CHISQ\\.DIST|CHISQ\\.DIST\\.RT|CHISQ\\.INV|CHISQ\\.INV\\.RT|CLOSINGBALANCEMONTH|CLOSINGBALANCEQUARTER|CLOSINGBALANCEYEAR|COALESCE|COMBIN|COMBINA|COMBINEVALUES|CONCATENATE|CONCATENATEX|CONFIDENCE\\.NORM|CONFIDENCE\\.T|CONTAINS|CONTAINSROW|CONTAINSSTRING|CONTAINSSTRINGEXACT|CONVERT|COS|COSH|COT|COTH|COUNT|COUNTA|COUNTAX|COUNTBLANK|COUNTROWS|COUNTX|CROSSFILTER|CROSSJOIN|CURRENCY|CURRENTGROUP|CUSTOMDATA|DATATABLE|DATE|DATEADD|DATEDIFF|DATESBETWEEN|DATESINPERIOD|DATESMTD|DATESQTD|DATESYTD|DATEVALUE|DAY|DEGREES|DETAILROWS|DISTINCT|DISTINCTCOUNT|DISTINCTCOUNTNOBLANK|DIVIDE|EARLIER|EARLIEST|EDATE|ENDOFMONTH|ENDOFQUARTER|ENDOFYEAR|EOMONTH|ERROR|EVEN|EXACT|EXCEPT|EXP|EXPON\\.DIST|FACT|FALSE|FILTER|FILTERS|FIND|FIRSTDATE|FIRSTNONBLANK|FIRSTNONBLANKVALUE|FIXED|FLOOR|FORMAT|GCD|GENERATE|GENERATEALL|GENERATESERIES|GEOMEAN|GEOMEANX|GROUPBY|HASONEFILTER|HASONEVALUE|HOUR|IF|IF\\.EAGER|IFERROR|IGNORE|INT|INTERSECT|ISBLANK|ISCROSSFILTERED|ISEMPTY|ISERROR|ISEVEN|ISFILTERED|ISINSCOPE|ISLOGICAL|ISNONTEXT|ISNUMBER|ISO\\.CEILING|ISODD|ISONORAFTER|ISSELECTEDMEASURE|ISSUBTOTAL|ISTEXT|KEEPFILTERS|KEYWORDMATCH|LASTDATE|LASTNONBLANK|LASTNONBLANKVALUE|LCM|LEFT|LEN|LN|LOG|LOG10|LOOKUPVALUE|LOWER|MAX|MAXA|MAXX|MEDIAN|MEDIANX|MID|MIN|MINA|MINUTE|MINX|MOD|MONTH|MROUND|NATURALINNERJOIN|NATURALLEFTOUTERJOIN|NEXTDAY|NEXTMONTH|NEXTQUARTER|NEXTYEAR|NONVISUAL|NORM\\.DIST|NORM\\.INV|NORM\\.S\\.DIST|NORM\\.S\\.INV|NOT|NOW|ODD|OPENINGBALANCEMONTH|OPENINGBALANCEQUARTER|OPENINGBALANCEYEAR|OR|PARALLELPERIOD|PATH|PATHCONTAINS|PATHITEM|PATHITEMREVERSE|PATHLENGTH|PERCENTILE\\.EXC|PERCENTILE\\.INC|PERCENTILEX\\.EXC|PERCENTILEX\\.INC|PERMUT|PI|POISSON\\.DIST|POWER|PREVIOUSDAY|PREVIOUSMONTH|PREVIOUSQUARTER|PREVIOUSYEAR|PRODUCT|PRODUCTX|QUARTER|QUOTIENT|RADIANS|RAND|RANDBETWEEN|RANK\\.EQ|RANKX|RELATED|RELATEDTABLE|REMOVEFILTERS|REPLACE|REPT|RIGHT|ROLLUP|ROLLUPADDISSUBTOTAL|ROLLUPGROUP|ROLLUPISSUBTOTAL|ROUND|ROUNDDOWN|ROUNDUP|ROW|SAMEPERIODLASTYEAR|SAMPLE|SEARCH|SECOND|SELECTCOLUMNS|SELECTEDMEASURE|SELECTEDMEASUREFORMATSTRING|SELECTEDMEASURENAME|SELECTEDVALUE|SIGN|SIN|SINH|SQRT|SQRTPI|STARTOFMONTH|STARTOFQUARTER|STARTOFYEAR|STDEV\\.P|STDEV\\.S|STDEVX\\.P|STDEVX\\.S|SUBSTITUTE|SUBSTITUTEWITHINDEX|SUM|SUMMARIZE|SUMMARIZECOLUMNS|SUMX|SWITCH|T\\.DIST|T\\.DIST\\.2T|T\\.DIST\\.RT|T\\.INV|T\\.INV\\.2T|TAN|TANH|TIME|TIMEVALUE|TODAY|TOPN|TOPNPERLEVEL|TOPNSKIP|TOTALMTD|TOTALQTD|TOTALYTD|TREATAS|TRIM|TRUE|TRUNC|UNICHAR|UNICODE|UNION|UPPER|USERELATIONSHIP|USERNAME|USEROBJECTID|USERPRINCIPALNAME|UTCNOW|UTCTODAY|VALUE|VALUES|VAR\\.P|VAR\\.S|VARX\\.P|VARX\\.S|WEEKDAY|WEEKNUM|XIRR|XNPV|YEAR|YEARFRAC)(?=\\s*\\()/i,\n    keyword: /\\b(?:DEFINE|EVALUATE|MEASURE|ORDER\\s+BY|RETURN|VAR|START\\s+AT|ASC|DESC)\\b/i,\n    boolean: {\n        pattern: /\\b(?:FALSE|NULL|TRUE)\\b/i,\n        alias: \"constant\"\n    },\n    number: /\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+\\b/,\n    operator: /:=|[-+*\\/=^]|&&?|\\|\\||<(?:=>?|<|>)?|>[>=]?|\\b(?:IN|NOT)\\b/i,\n    punctuation: /[;\\[\\](){}`,.]/\n};\nPrism.languages.dhall = {\n    comment: /--.*|\\{-(?:[^-{]|-(?!\\})|\\{(?!-)|\\{-(?:[^-{]|-(?!\\})|\\{(?!-))*-\\})*-\\}/,\n    string: {\n        pattern: /\"(?:[^\"\\\\]|\\\\.)*\"|''(?:[^']|'(?!')|'''|''\\$\\{)*''(?!'|\\$)/,\n        greedy: !0,\n        inside: {\n            interpolation: {\n                pattern: /\\$\\{[^{}]*\\}/,\n                inside: {\n                    expression: {\n                        pattern: /(^\\$\\{)[\\s\\S]+(?=\\}$)/,\n                        lookbehind: !0,\n                        alias: \"language-dhall\",\n                        inside: null\n                    },\n                    punctuation: /\\$\\{|\\}/\n                }\n            }\n        }\n    },\n    label: {\n        pattern: /`[^`]*`/,\n        greedy: !0\n    },\n    url: {\n        pattern: /\\bhttps?:\\/\\/[\\w.:%!$&'*+;=@~-]+(?:\\/[\\w.:%!$&'*+;=@~-]*)*(?:\\?[/?\\w.:%!$&'*+;=@~-]*)?/,\n        greedy: !0\n    },\n    env: {\n        pattern: /\\benv:(?:(?!\\d)\\w+|\"(?:[^\"\\\\=]|\\\\.)*\")/,\n        greedy: !0,\n        inside: {\n            function: /^env/,\n            operator: /^:/,\n            variable: /[\\s\\S]+/\n        }\n    },\n    hash: {\n        pattern: /\\bsha256:[\\da-fA-F]{64}\\b/,\n        inside: {\n            function: /sha256/,\n            operator: /:/,\n            number: /[\\da-fA-F]{64}/\n        }\n    },\n    keyword: /\\b(?:as|assert|else|forall|if|in|let|merge|missing|then|toMap|using|with)\\b|\\u2200/,\n    builtin: /\\b(?:None|Some)\\b/,\n    boolean: /\\b(?:False|True)\\b/,\n    number: /\\bNaN\\b|-?\\bInfinity\\b|[+-]?\\b(?:0x[\\da-fA-F]+|\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?)\\b/,\n    operator: /\\/\\\\|\\/\\/\\\\\\\\|&&|\\|\\||===|[!=]=|\\/\\/|->|\\+\\+|::|[+*#@=:?<>|\\\\\\u2227\\u2a53\\u2261\\u2afd\\u03bb\\u2192]/,\n    punctuation: /\\.\\.|[{}\\[\\](),./]/,\n    \"class-name\": /\\b[A-Z]\\w*\\b/\n}, Prism.languages.dhall.string.inside.interpolation.inside.expression.inside = Prism.languages.dhall;\n!function(e) {\n    e.languages.diff = {\n        coord: [\n            /^(?:\\*{3}|-{3}|\\+{3}).*$/m,\n            /^@@.*@@$/m,\n            /^\\d.*$/m\n        ]\n    };\n    var n = {\n        \"deleted-sign\": \"-\",\n        \"deleted-arrow\": \"<\",\n        \"inserted-sign\": \"+\",\n        \"inserted-arrow\": \">\",\n        unchanged: \" \",\n        diff: \"!\"\n    };\n    Object.keys(n).forEach(function(a) {\n        var i = n[a], r = [];\n        /^\\w+$/.test(a) || r.push(/\\w+/.exec(a)[0]), \"diff\" === a && r.push(\"bold\"), e.languages.diff[a] = {\n            pattern: RegExp(\"^(?:[\" + i + \"].*(?:\\r\\n?|\\n|(?![\\\\s\\\\S])))+\", \"m\"),\n            alias: r,\n            inside: {\n                line: {\n                    pattern: /(.)(?=[\\s\\S]).*(?:\\r\\n?|\\n)?/,\n                    lookbehind: !0\n                },\n                prefix: {\n                    pattern: /[\\s\\S]/,\n                    alias: /\\w+/.exec(a)[0]\n                }\n            }\n        };\n    }), Object.defineProperty(e.languages.diff, \"PREFIXES\", {\n        value: n\n    });\n}(Prism);\n!function(e) {\n    function n(e, n) {\n        return \"___\" + e.toUpperCase() + n + \"___\";\n    }\n    Object.defineProperties(e.languages[\"markup-templating\"] = {}, {\n        buildPlaceholders: {\n            value: function(t, a, r, o) {\n                if (t.language === a) {\n                    var c = t.tokenStack = [];\n                    t.code = t.code.replace(r, function(e) {\n                        if (\"function\" == typeof o && !o(e)) return e;\n                        for(var r, i = c.length; -1 !== t.code.indexOf(r = n(a, i));)++i;\n                        return c[i] = e, r;\n                    }), t.grammar = e.languages.markup;\n                }\n            }\n        },\n        tokenizePlaceholders: {\n            value: function(t, a) {\n                if (t.language === a && t.tokenStack) {\n                    t.grammar = e.languages[a];\n                    var r = 0, o = Object.keys(t.tokenStack);\n                    !function c(i) {\n                        for(var u = 0; u < i.length && !(r >= o.length); u++){\n                            var g = i[u];\n                            if (\"string\" == typeof g || g.content && \"string\" == typeof g.content) {\n                                var l = o[r], s = t.tokenStack[l], f = \"string\" == typeof g ? g : g.content, p = n(a, l), k = f.indexOf(p);\n                                if (k > -1) {\n                                    ++r;\n                                    var m = f.substring(0, k), d = new e.Token(a, e.tokenize(s, t.grammar), \"language-\" + a, s), h = f.substring(k + p.length), v = [];\n                                    m && v.push.apply(v, c([\n                                        m\n                                    ])), v.push(d), h && v.push.apply(v, c([\n                                        h\n                                    ])), \"string\" == typeof g ? i.splice.apply(i, [\n                                        u,\n                                        1\n                                    ].concat(v)) : g.content = v;\n                                }\n                            } else g.content && c(g.content);\n                        }\n                        return i;\n                    }(t.tokens);\n                }\n            }\n        }\n    });\n}(Prism);\n!function(e) {\n    e.languages.django = {\n        comment: /^\\{#[\\s\\S]*?#\\}$/,\n        tag: {\n            pattern: /(^\\{%[+-]?\\s*)\\w+/,\n            lookbehind: !0,\n            alias: \"keyword\"\n        },\n        delimiter: {\n            pattern: /^\\{[{%][+-]?|[+-]?[}%]\\}$/,\n            alias: \"punctuation\"\n        },\n        string: {\n            pattern: /(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n            greedy: !0\n        },\n        filter: {\n            pattern: /(\\|)\\w+/,\n            lookbehind: !0,\n            alias: \"function\"\n        },\n        test: {\n            pattern: /(\\bis\\s+(?:not\\s+)?)(?!not\\b)\\w+/,\n            lookbehind: !0,\n            alias: \"function\"\n        },\n        function: /\\b[a-z_]\\w+(?=\\s*\\()/i,\n        keyword: /\\b(?:and|as|by|else|for|if|import|in|is|loop|not|or|recursive|with|without)\\b/,\n        operator: /[-+%=]=?|!=|\\*\\*?=?|\\/\\/?=?|<[<=>]?|>[=>]?|[&|^~]/,\n        number: /\\b\\d+(?:\\.\\d+)?\\b/,\n        boolean: /[Ff]alse|[Nn]one|[Tt]rue/,\n        variable: /\\b\\w+\\b/,\n        punctuation: /[{}[\\](),.:;]/\n    };\n    var n = /\\{\\{[\\s\\S]*?\\}\\}|\\{%[\\s\\S]*?%\\}|\\{#[\\s\\S]*?#\\}/g, o = e.languages[\"markup-templating\"];\n    e.hooks.add(\"before-tokenize\", function(e) {\n        o.buildPlaceholders(e, \"django\", n);\n    }), e.hooks.add(\"after-tokenize\", function(e) {\n        o.tokenizePlaceholders(e, \"django\");\n    }), e.languages.jinja2 = e.languages.django, e.hooks.add(\"before-tokenize\", function(e) {\n        o.buildPlaceholders(e, \"jinja2\", n);\n    }), e.hooks.add(\"after-tokenize\", function(e) {\n        o.tokenizePlaceholders(e, \"jinja2\");\n    });\n}(Prism);\nPrism.languages[\"dns-zone-file\"] = {\n    comment: /;.*/,\n    string: {\n        pattern: /\"(?:\\\\.|[^\"\\\\\\r\\n])*\"/,\n        greedy: !0\n    },\n    variable: [\n        {\n            pattern: /(^\\$ORIGIN[ \\t]+)\\S+/m,\n            lookbehind: !0\n        },\n        {\n            pattern: /(^|\\s)@(?=\\s|$)/,\n            lookbehind: !0\n        }\n    ],\n    keyword: /^\\$(?:INCLUDE|ORIGIN|TTL)(?=\\s|$)/m,\n    class: {\n        pattern: /(^|\\s)(?:CH|CS|HS|IN)(?=\\s|$)/,\n        lookbehind: !0,\n        alias: \"keyword\"\n    },\n    type: {\n        pattern: /(^|\\s)(?:A|A6|AAAA|AFSDB|APL|ATMA|CAA|CDNSKEY|CDS|CERT|CNAME|DHCID|DLV|DNAME|DNSKEY|DS|EID|GID|GPOS|HINFO|HIP|IPSECKEY|ISDN|KEY|KX|LOC|MAILA|MAILB|MB|MD|MF|MG|MINFO|MR|MX|NAPTR|NB|NBSTAT|NIMLOC|NINFO|NS|NSAP|NSAP-PTR|NSEC|NSEC3|NSEC3PARAM|NULL|NXT|OPENPGPKEY|PTR|PX|RKEY|RP|RRSIG|RT|SIG|SINK|SMIMEA|SOA|SPF|SRV|SSHFP|TA|TKEY|TLSA|TSIG|TXT|UID|UINFO|UNSPEC|URI|WKS|X25)(?=\\s|$)/,\n        lookbehind: !0,\n        alias: \"keyword\"\n    },\n    punctuation: /[()]/\n}, Prism.languages[\"dns-zone\"] = Prism.languages[\"dns-zone-file\"];\n!function(e) {\n    var n = \"(?:[ \t]+(?![ \t])(?:<SP_BS>)?|<SP_BS>)\".replace(/<SP_BS>/g, function() {\n        return \"\\\\\\\\[\\r\\n](?:\\\\s|\\\\\\\\[\\r\\n]|#.*(?!.))*(?![\\\\s#]|\\\\\\\\[\\r\\n])\";\n    }), r = \"\\\"(?:[^\\\"\\\\\\\\\\r\\n]|\\\\\\\\(?:\\r\\n|[^]))*\\\"|'(?:[^'\\\\\\\\\\r\\n]|\\\\\\\\(?:\\r\\n|[^]))*'\", t = \"--[\\\\w-]+=(?:<STR>|(?![\\\"'])(?:[^\\\\s\\\\\\\\]|\\\\\\\\.)+)\".replace(/<STR>/g, function() {\n        return r;\n    }), o = {\n        pattern: RegExp(r),\n        greedy: !0\n    }, i = {\n        pattern: /(^[ \\t]*)#.*/m,\n        lookbehind: !0,\n        greedy: !0\n    };\n    function a(e, r) {\n        return e = e.replace(/<OPT>/g, function() {\n            return t;\n        }).replace(/<SP>/g, function() {\n            return n;\n        }), RegExp(e, r);\n    }\n    e.languages.docker = {\n        instruction: {\n            pattern: /(^[ \\t]*)(?:ADD|ARG|CMD|COPY|ENTRYPOINT|ENV|EXPOSE|FROM|HEALTHCHECK|LABEL|MAINTAINER|ONBUILD|RUN|SHELL|STOPSIGNAL|USER|VOLUME|WORKDIR)(?=\\s)(?:\\\\.|[^\\r\\n\\\\])*(?:\\\\$(?:\\s|#.*$)*(?![\\s#])(?:\\\\.|[^\\r\\n\\\\])*)*/im,\n            lookbehind: !0,\n            greedy: !0,\n            inside: {\n                options: {\n                    pattern: a(\"(^(?:ONBUILD<SP>)?\\\\w+<SP>)<OPT>(?:<SP><OPT>)*\", \"i\"),\n                    lookbehind: !0,\n                    greedy: !0,\n                    inside: {\n                        property: {\n                            pattern: /(^|\\s)--[\\w-]+/,\n                            lookbehind: !0\n                        },\n                        string: [\n                            o,\n                            {\n                                pattern: /(=)(?![\"'])(?:[^\\s\\\\]|\\\\.)+/,\n                                lookbehind: !0\n                            }\n                        ],\n                        operator: /\\\\$/m,\n                        punctuation: /=/\n                    }\n                },\n                keyword: [\n                    {\n                        pattern: a(\"(^(?:ONBUILD<SP>)?HEALTHCHECK<SP>(?:<OPT><SP>)*)(?:CMD|NONE)\\\\b\", \"i\"),\n                        lookbehind: !0,\n                        greedy: !0\n                    },\n                    {\n                        pattern: a(\"(^(?:ONBUILD<SP>)?FROM<SP>(?:<OPT><SP>)*(?!--)[^ \t\\\\\\\\]+<SP>)AS\", \"i\"),\n                        lookbehind: !0,\n                        greedy: !0\n                    },\n                    {\n                        pattern: a(\"(^ONBUILD<SP>)\\\\w+\", \"i\"),\n                        lookbehind: !0,\n                        greedy: !0\n                    },\n                    {\n                        pattern: /^\\w+/,\n                        greedy: !0\n                    }\n                ],\n                comment: i,\n                string: o,\n                variable: /\\$(?:\\w+|\\{[^{}\"'\\\\]*\\})/,\n                operator: /\\\\$/m\n            }\n        },\n        comment: i\n    }, e.languages.dockerfile = e.languages.docker;\n}(Prism);\n!function(e) {\n    var a = \"(?:\" + [\n        \"[a-zA-Z_\\\\x80-\\\\uFFFF][\\\\w\\\\x80-\\\\uFFFF]*\",\n        \"-?(?:\\\\.\\\\d+|\\\\d+(?:\\\\.\\\\d*)?)\",\n        '\"[^\"\\\\\\\\]*(?:\\\\\\\\[^][^\"\\\\\\\\]*)*\"',\n        \"<(?:[^<>]|(?!<!--)<(?:[^<>\\\"']|\\\"[^\\\"]*\\\"|'[^']*')+>|<!--(?:[^-]|-(?!->))*-->)*>\"\n    ].join(\"|\") + \")\", n = {\n        markup: {\n            pattern: /(^<)[\\s\\S]+(?=>$)/,\n            lookbehind: !0,\n            alias: [\n                \"language-markup\",\n                \"language-html\",\n                \"language-xml\"\n            ],\n            inside: e.languages.markup\n        }\n    };\n    function r(e, n) {\n        return RegExp(e.replace(/<ID>/g, function() {\n            return a;\n        }), n);\n    }\n    e.languages.dot = {\n        comment: {\n            pattern: /\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/|^#.*/m,\n            greedy: !0\n        },\n        \"graph-name\": {\n            pattern: r(\"(\\\\b(?:digraph|graph|subgraph)[ \t\\r\\n]+)<ID>\", \"i\"),\n            lookbehind: !0,\n            greedy: !0,\n            alias: \"class-name\",\n            inside: n\n        },\n        \"attr-value\": {\n            pattern: r(\"(=[ \t\\r\\n]*)<ID>\"),\n            lookbehind: !0,\n            greedy: !0,\n            inside: n\n        },\n        \"attr-name\": {\n            pattern: r(\"([\\\\[;, \t\\r\\n])<ID>(?=[ \t\\r\\n]*=)\"),\n            lookbehind: !0,\n            greedy: !0,\n            inside: n\n        },\n        keyword: /\\b(?:digraph|edge|graph|node|strict|subgraph)\\b/i,\n        \"compass-point\": {\n            pattern: /(:[ \\t\\r\\n]*)(?:[ewc_]|[ns][ew]?)(?![\\w\\x80-\\uFFFF])/,\n            lookbehind: !0,\n            alias: \"builtin\"\n        },\n        node: {\n            pattern: r(\"(^|[^-.\\\\w\\\\x80-\\\\uFFFF\\\\\\\\])<ID>\"),\n            lookbehind: !0,\n            greedy: !0,\n            inside: n\n        },\n        operator: /[=:]|-[->]/,\n        punctuation: /[\\[\\]{};,]/\n    }, e.languages.gv = e.languages.dot;\n}(Prism);\nPrism.languages.ebnf = {\n    comment: /\\(\\*[\\s\\S]*?\\*\\)/,\n    string: {\n        pattern: /\"[^\"\\r\\n]*\"|'[^'\\r\\n]*'/,\n        greedy: !0\n    },\n    special: {\n        pattern: /\\?[^?\\r\\n]*\\?/,\n        greedy: !0,\n        alias: \"class-name\"\n    },\n    definition: {\n        pattern: /^([\\t ]*)[a-z]\\w*(?:[ \\t]+[a-z]\\w*)*(?=\\s*=)/im,\n        lookbehind: !0,\n        alias: [\n            \"rule\",\n            \"keyword\"\n        ]\n    },\n    rule: /\\b[a-z]\\w*(?:[ \\t]+[a-z]\\w*)*\\b/i,\n    punctuation: /\\([:/]|[:/]\\)|[.,;()[\\]{}]/,\n    operator: /[-=|*/!]/\n};\nPrism.languages.editorconfig = {\n    comment: /[;#].*/,\n    section: {\n        pattern: /(^[ \\t]*)\\[.+\\]/m,\n        lookbehind: !0,\n        alias: \"selector\",\n        inside: {\n            regex: /\\\\\\\\[\\[\\]{},!?.*]/,\n            operator: /[!?]|\\.\\.|\\*{1,2}/,\n            punctuation: /[\\[\\]{},]/\n        }\n    },\n    key: {\n        pattern: /(^[ \\t]*)[^\\s=]+(?=[ \\t]*=)/m,\n        lookbehind: !0,\n        alias: \"attr-name\"\n    },\n    value: {\n        pattern: /=.*/,\n        alias: \"attr-value\",\n        inside: {\n            punctuation: /^=/\n        }\n    }\n};\nPrism.languages.eiffel = {\n    comment: /--.*/,\n    string: [\n        {\n            pattern: /\"([^[]*)\\[[\\s\\S]*?\\]\\1\"/,\n            greedy: !0\n        },\n        {\n            pattern: /\"([^{]*)\\{[\\s\\S]*?\\}\\1\"/,\n            greedy: !0\n        },\n        {\n            pattern: /\"(?:%(?:(?!\\n)\\s)*\\n\\s*%|%\\S|[^%\"\\r\\n])*\"/,\n            greedy: !0\n        }\n    ],\n    char: /'(?:%.|[^%'\\r\\n])+'/,\n    keyword: /\\b(?:across|agent|alias|all|and|as|assign|attached|attribute|check|class|convert|create|Current|debug|deferred|detachable|do|else|elseif|end|ensure|expanded|export|external|feature|from|frozen|if|implies|inherit|inspect|invariant|like|local|loop|not|note|obsolete|old|once|or|Precursor|redefine|rename|require|rescue|Result|retry|select|separate|some|then|undefine|until|variant|Void|when|xor)\\b/i,\n    boolean: /\\b(?:False|True)\\b/i,\n    \"class-name\": /\\b[A-Z][\\dA-Z_]*\\b/,\n    number: [\n        /\\b0[xcb][\\da-f](?:_*[\\da-f])*\\b/i,\n        /(?:\\b\\d(?:_*\\d)*)?\\.(?:(?:\\d(?:_*\\d)*)?e[+-]?)?\\d(?:_*\\d)*\\b|\\b\\d(?:_*\\d)*\\b\\.?/i\n    ],\n    punctuation: /:=|<<|>>|\\(\\||\\|\\)|->|\\.(?=\\w)|[{}[\\];(),:?]/,\n    operator: /\\\\\\\\|\\|\\.\\.\\||\\.\\.|\\/[~\\/=]?|[><]=?|[-+*^=~]/\n};\n!function(a) {\n    a.languages.ejs = {\n        delimiter: {\n            pattern: /^<%[-_=]?|[-_]?%>$/,\n            alias: \"punctuation\"\n        },\n        comment: /^#[\\s\\S]*/,\n        \"language-javascript\": {\n            pattern: /[\\s\\S]+/,\n            inside: a.languages.javascript\n        }\n    }, a.hooks.add(\"before-tokenize\", function(e) {\n        a.languages[\"markup-templating\"].buildPlaceholders(e, \"ejs\", /<%(?!%)[\\s\\S]+?%>/g);\n    }), a.hooks.add(\"after-tokenize\", function(e) {\n        a.languages[\"markup-templating\"].tokenizePlaceholders(e, \"ejs\");\n    }), a.languages.eta = a.languages.ejs;\n}(Prism);\nPrism.languages.elixir = {\n    doc: {\n        pattern: /@(?:doc|moduledoc)\\s+(?:(\"\"\"|''')[\\s\\S]*?\\1|(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\2)[^\\\\\\r\\n])*\\2)/,\n        inside: {\n            attribute: /^@\\w+/,\n            string: /['\"][\\s\\S]+/\n        }\n    },\n    comment: {\n        pattern: /#.*/,\n        greedy: !0\n    },\n    regex: {\n        pattern: /~[rR](?:(\"\"\"|''')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1|([\\/|\"'])(?:\\\\.|(?!\\2)[^\\\\\\r\\n])+\\2|\\((?:\\\\.|[^\\\\)\\r\\n])+\\)|\\[(?:\\\\.|[^\\\\\\]\\r\\n])+\\]|\\{(?:\\\\.|[^\\\\}\\r\\n])+\\}|<(?:\\\\.|[^\\\\>\\r\\n])+>)[uismxfr]*/,\n        greedy: !0\n    },\n    string: [\n        {\n            pattern: /~[cCsSwW](?:(\"\"\"|''')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1|([\\/|\"'])(?:\\\\.|(?!\\2)[^\\\\\\r\\n])+\\2|\\((?:\\\\.|[^\\\\)\\r\\n])+\\)|\\[(?:\\\\.|[^\\\\\\]\\r\\n])+\\]|\\{(?:\\\\.|#\\{[^}]+\\}|#(?!\\{)|[^#\\\\}\\r\\n])+\\}|<(?:\\\\.|[^\\\\>\\r\\n])+>)[csa]?/,\n            greedy: !0,\n            inside: {}\n        },\n        {\n            pattern: /(\"\"\"|''')[\\s\\S]*?\\1/,\n            greedy: !0,\n            inside: {}\n        },\n        {\n            pattern: /(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n            greedy: !0,\n            inside: {}\n        }\n    ],\n    atom: {\n        pattern: /(^|[^:]):\\w+/,\n        lookbehind: !0,\n        alias: \"symbol\"\n    },\n    module: {\n        pattern: /\\b[A-Z]\\w*\\b/,\n        alias: \"class-name\"\n    },\n    \"attr-name\": /\\b\\w+\\??:(?!:)/,\n    argument: {\n        pattern: /(^|[^&])&\\d+/,\n        lookbehind: !0,\n        alias: \"variable\"\n    },\n    attribute: {\n        pattern: /@\\w+/,\n        alias: \"variable\"\n    },\n    function: /\\b[_a-zA-Z]\\w*[?!]?(?:(?=\\s*(?:\\.\\s*)?\\()|(?=\\/\\d))/,\n    number: /\\b(?:0[box][a-f\\d_]+|\\d[\\d_]*)(?:\\.[\\d_]+)?(?:e[+-]?[\\d_]+)?\\b/i,\n    keyword: /\\b(?:after|alias|and|case|catch|cond|def(?:callback|delegate|exception|impl|macro|module|n|np|p|protocol|struct)?|do|else|end|fn|for|if|import|not|or|quote|raise|require|rescue|try|unless|unquote|use|when)\\b/,\n    boolean: /\\b(?:false|nil|true)\\b/,\n    operator: [\n        /\\bin\\b|&&?|\\|[|>]?|\\\\\\\\|::|\\.\\.\\.?|\\+\\+?|-[->]?|<[-=>]|>=|!==?|\\B!|=(?:==?|[>~])?|[*\\/^]/,\n        {\n            pattern: /([^<])<(?!<)/,\n            lookbehind: !0\n        },\n        {\n            pattern: /([^>])>(?!>)/,\n            lookbehind: !0\n        }\n    ],\n    punctuation: /<<|>>|[.,%\\[\\]{}()]/\n}, Prism.languages.elixir.string.forEach(function(e) {\n    e.inside = {\n        interpolation: {\n            pattern: /#\\{[^}]+\\}/,\n            inside: {\n                delimiter: {\n                    pattern: /^#\\{|\\}$/,\n                    alias: \"punctuation\"\n                },\n                rest: Prism.languages.elixir\n            }\n        }\n    };\n});\nPrism.languages.elm = {\n    comment: /--.*|\\{-[\\s\\S]*?-\\}/,\n    char: {\n        pattern: /'(?:[^\\\\'\\r\\n]|\\\\(?:[abfnrtv\\\\']|\\d+|x[0-9a-fA-F]+|u\\{[0-9a-fA-F]+\\}))'/,\n        greedy: !0\n    },\n    string: [\n        {\n            pattern: /\"\"\"[\\s\\S]*?\"\"\"/,\n            greedy: !0\n        },\n        {\n            pattern: /\"(?:[^\\\\\"\\r\\n]|\\\\.)*\"/,\n            greedy: !0\n        }\n    ],\n    \"import-statement\": {\n        pattern: /(^[\\t ]*)import\\s+[A-Z]\\w*(?:\\.[A-Z]\\w*)*(?:\\s+as\\s+(?:[A-Z]\\w*)(?:\\.[A-Z]\\w*)*)?(?:\\s+exposing\\s+)?/m,\n        lookbehind: !0,\n        inside: {\n            keyword: /\\b(?:as|exposing|import)\\b/\n        }\n    },\n    keyword: /\\b(?:alias|as|case|else|exposing|if|in|infixl|infixr|let|module|of|then|type)\\b/,\n    builtin: /\\b(?:abs|acos|always|asin|atan|atan2|ceiling|clamp|compare|cos|curry|degrees|e|flip|floor|fromPolar|identity|isInfinite|isNaN|logBase|max|min|negate|never|not|pi|radians|rem|round|sin|sqrt|tan|toFloat|toPolar|toString|truncate|turns|uncurry|xor)\\b/,\n    number: /\\b(?:\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?|0x[0-9a-f]+)\\b/i,\n    operator: /\\s\\.\\s|[+\\-/*=.$<>:&|^?%#@~!]{2,}|[+\\-/*=$<>:&|^?%#@~!]/,\n    hvariable: /\\b(?:[A-Z]\\w*\\.)*[a-z]\\w*\\b/,\n    constant: /\\b(?:[A-Z]\\w*\\.)*[A-Z]\\w*\\b/,\n    punctuation: /[{}[\\]|(),.:]/\n};\nPrism.languages.lua = {\n    comment: /^#!.+|--(?:\\[(=*)\\[[\\s\\S]*?\\]\\1\\]|.*)/m,\n    string: {\n        pattern: /([\"'])(?:(?!\\1)[^\\\\\\r\\n]|\\\\z(?:\\r\\n|\\s)|\\\\(?:\\r\\n|[^z]))*\\1|\\[(=*)\\[[\\s\\S]*?\\]\\2\\]/,\n        greedy: !0\n    },\n    number: /\\b0x[a-f\\d]+(?:\\.[a-f\\d]*)?(?:p[+-]?\\d+)?\\b|\\b\\d+(?:\\.\\B|(?:\\.\\d*)?(?:e[+-]?\\d+)?\\b)|\\B\\.\\d+(?:e[+-]?\\d+)?\\b/i,\n    keyword: /\\b(?:and|break|do|else|elseif|end|false|for|function|goto|if|in|local|nil|not|or|repeat|return|then|true|until|while)\\b/,\n    function: /(?!\\d)\\w+(?=\\s*(?:[({]))/,\n    operator: [\n        /[-+*%^&|#]|\\/\\/?|<[<=]?|>[>=]?|[=~]=?/,\n        {\n            pattern: /(^|[^.])\\.\\.(?!\\.)/,\n            lookbehind: !0\n        }\n    ],\n    punctuation: /[\\[\\](){},;]|\\.+|:+/\n};\n!function(a) {\n    a.languages.etlua = {\n        delimiter: {\n            pattern: /^<%[-=]?|-?%>$/,\n            alias: \"punctuation\"\n        },\n        \"language-lua\": {\n            pattern: /[\\s\\S]+/,\n            inside: a.languages.lua\n        }\n    }, a.hooks.add(\"before-tokenize\", function(e) {\n        a.languages[\"markup-templating\"].buildPlaceholders(e, \"etlua\", /<%[\\s\\S]+?%>/g);\n    }), a.hooks.add(\"after-tokenize\", function(e) {\n        a.languages[\"markup-templating\"].tokenizePlaceholders(e, \"etlua\");\n    });\n}(Prism);\n!function(e) {\n    e.languages.erb = {\n        delimiter: {\n            pattern: /^(\\s*)<%=?|%>(?=\\s*$)/,\n            lookbehind: !0,\n            alias: \"punctuation\"\n        },\n        ruby: {\n            pattern: /\\s*\\S[\\s\\S]*/,\n            alias: \"language-ruby\",\n            inside: e.languages.ruby\n        }\n    }, e.hooks.add(\"before-tokenize\", function(n) {\n        e.languages[\"markup-templating\"].buildPlaceholders(n, \"erb\", /<%=?(?:[^\\r\\n]|[\\r\\n](?!=begin)|[\\r\\n]=begin\\s(?:[^\\r\\n]|[\\r\\n](?!=end))*[\\r\\n]=end)+?%>/g);\n    }), e.hooks.add(\"after-tokenize\", function(n) {\n        e.languages[\"markup-templating\"].tokenizePlaceholders(n, \"erb\");\n    });\n}(Prism);\nPrism.languages.erlang = {\n    comment: /%.+/,\n    string: {\n        pattern: /\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/,\n        greedy: !0\n    },\n    \"quoted-function\": {\n        pattern: /'(?:\\\\.|[^\\\\'\\r\\n])+'(?=\\()/,\n        alias: \"function\"\n    },\n    \"quoted-atom\": {\n        pattern: /'(?:\\\\.|[^\\\\'\\r\\n])+'/,\n        alias: \"atom\"\n    },\n    boolean: /\\b(?:false|true)\\b/,\n    keyword: /\\b(?:after|begin|case|catch|end|fun|if|of|receive|try|when)\\b/,\n    number: [\n        /\\$\\\\?./,\n        /\\b\\d+#[a-z0-9]+/i,\n        /(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?/i\n    ],\n    function: /\\b[a-z][\\w@]*(?=\\()/,\n    variable: {\n        pattern: /(^|[^@])(?:\\b|\\?)[A-Z_][\\w@]*/,\n        lookbehind: !0\n    },\n    operator: [\n        /[=\\/<>:]=|=[:\\/]=|\\+\\+?|--?|[=*\\/!]|\\b(?:and|andalso|band|bnot|bor|bsl|bsr|bxor|div|not|or|orelse|rem|xor)\\b/,\n        {\n            pattern: /(^|[^<])<(?!<)/,\n            lookbehind: !0\n        },\n        {\n            pattern: /(^|[^>])>(?!>)/,\n            lookbehind: !0\n        }\n    ],\n    atom: /\\b[a-z][\\w@]*/,\n    punctuation: /[()[\\]{}:;,.#|]|<<|>>/\n};\nPrism.languages[\"excel-formula\"] = {\n    comment: {\n        pattern: /(\\bN\\(\\s*)\"(?:[^\"]|\"\")*\"(?=\\s*\\))/i,\n        lookbehind: !0,\n        greedy: !0\n    },\n    string: {\n        pattern: /\"(?:[^\"]|\"\")*\"(?!\")/,\n        greedy: !0\n    },\n    reference: {\n        pattern: /(?:'[^']*'|(?:[^\\s()[\\]{}<>*?\"';,$&]*\\[[^^\\s()[\\]{}<>*?\"']+\\])?\\w+)!/,\n        greedy: !0,\n        alias: \"string\",\n        inside: {\n            operator: /!$/,\n            punctuation: /'/,\n            sheet: {\n                pattern: /[^[\\]]+$/,\n                alias: \"function\"\n            },\n            file: {\n                pattern: /\\[[^[\\]]+\\]$/,\n                inside: {\n                    punctuation: /[[\\]]/\n                }\n            },\n            path: /[\\s\\S]+/\n        }\n    },\n    \"function-name\": {\n        pattern: /\\b[A-Z]\\w*(?=\\()/i,\n        alias: \"builtin\"\n    },\n    range: {\n        pattern: /\\$?\\b(?:[A-Z]+\\$?\\d+:\\$?[A-Z]+\\$?\\d+|[A-Z]+:\\$?[A-Z]+|\\d+:\\$?\\d+)\\b/i,\n        alias: \"selector\",\n        inside: {\n            operator: /:/,\n            cell: /\\$?[A-Z]+\\$?\\d+/i,\n            column: /\\$?[A-Z]+/i,\n            row: /\\$?\\d+/\n        }\n    },\n    cell: {\n        pattern: /\\b[A-Z]+\\d+\\b|\\$[A-Za-z]+\\$?\\d+\\b|\\b[A-Za-z]+\\$\\d+\\b/,\n        alias: \"selector\"\n    },\n    number: /(?:\\b\\d+(?:\\.\\d+)?|\\B\\.\\d+)(?:e[+-]?\\d+)?\\b/i,\n    boolean: /\\b(?:FALSE|TRUE)\\b/i,\n    operator: /[-+*/^%=&,]|<[=>]?|>=?/,\n    punctuation: /[[\\]();{}|]/\n}, Prism.languages.xlsx = Prism.languages.xls = Prism.languages[\"excel-formula\"];\nPrism.languages.fsharp = Prism.languages.extend(\"clike\", {\n    comment: [\n        {\n            pattern: /(^|[^\\\\])\\(\\*(?!\\))[\\s\\S]*?\\*\\)/,\n            lookbehind: !0,\n            greedy: !0\n        },\n        {\n            pattern: /(^|[^\\\\:])\\/\\/.*/,\n            lookbehind: !0,\n            greedy: !0\n        }\n    ],\n    string: {\n        pattern: /(?:\"\"\"[\\s\\S]*?\"\"\"|@\"(?:\"\"|[^\"])*\"|\"(?:\\\\[\\s\\S]|[^\\\\\"])*\")B?/,\n        greedy: !0\n    },\n    \"class-name\": {\n        pattern: /(\\b(?:exception|inherit|interface|new|of|type)\\s+|\\w\\s*:\\s*|\\s:\\??>\\s*)[.\\w]+\\b(?:\\s*(?:->|\\*)\\s*[.\\w]+\\b)*(?!\\s*[:.])/,\n        lookbehind: !0,\n        inside: {\n            operator: /->|\\*/,\n            punctuation: /\\./\n        }\n    },\n    keyword: /\\b(?:let|return|use|yield)(?:!\\B|\\b)|\\b(?:abstract|and|as|asr|assert|atomic|base|begin|break|checked|class|component|const|constraint|constructor|continue|default|delegate|do|done|downcast|downto|eager|elif|else|end|event|exception|extern|external|false|finally|fixed|for|fun|function|functor|global|if|in|include|inherit|inline|interface|internal|land|lazy|lor|lsl|lsr|lxor|match|member|method|mixin|mod|module|mutable|namespace|new|not|null|object|of|open|or|override|parallel|private|process|protected|public|pure|rec|sealed|select|sig|static|struct|tailcall|then|to|trait|true|try|type|upcast|val|virtual|void|volatile|when|while|with)\\b/,\n    number: [\n        /\\b0x[\\da-fA-F]+(?:LF|lf|un)?\\b/,\n        /\\b0b[01]+(?:uy|y)?\\b/,\n        /(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[fm]|e[+-]?\\d+)?\\b/i,\n        /\\b\\d+(?:[IlLsy]|UL|u[lsy]?)?\\b/\n    ],\n    operator: /([<>~&^])\\1\\1|([*.:<>&])\\2|<-|->|[!=:]=|<?\\|{1,3}>?|\\??(?:<=|>=|<>|[-+*/%=<>])\\??|[!?^&]|~[+~-]|:>|:\\?>?/\n}), Prism.languages.insertBefore(\"fsharp\", \"keyword\", {\n    preprocessor: {\n        pattern: /(^[\\t ]*)#.*/m,\n        lookbehind: !0,\n        alias: \"property\",\n        inside: {\n            directive: {\n                pattern: /(^#)\\b(?:else|endif|if|light|line|nowarn)\\b/,\n                lookbehind: !0,\n                alias: \"keyword\"\n            }\n        }\n    }\n}), Prism.languages.insertBefore(\"fsharp\", \"punctuation\", {\n    \"computation-expression\": {\n        pattern: /\\b[_a-z]\\w*(?=\\s*\\{)/i,\n        alias: \"keyword\"\n    }\n}), Prism.languages.insertBefore(\"fsharp\", \"string\", {\n    annotation: {\n        pattern: /\\[<.+?>\\]/,\n        greedy: !0,\n        inside: {\n            punctuation: /^\\[<|>\\]$/,\n            \"class-name\": {\n                pattern: /^\\w+$|(^|;\\s*)[A-Z]\\w*(?=\\()/,\n                lookbehind: !0\n            },\n            \"annotation-content\": {\n                pattern: /[\\s\\S]+/,\n                inside: Prism.languages.fsharp\n            }\n        }\n    },\n    char: {\n        pattern: /'(?:[^\\\\']|\\\\(?:.|\\d{3}|x[a-fA-F\\d]{2}|u[a-fA-F\\d]{4}|U[a-fA-F\\d]{8}))'B?/,\n        greedy: !0\n    }\n});\n!function(e) {\n    var t = {\n        function: /\\b(?:BUGS?|FIX(?:MES?)?|NOTES?|TODOS?|XX+|HACKS?|WARN(?:ING)?|\\?{2,}|!{2,})\\b/\n    }, s = {\n        number: /\\\\[^\\s']|%\\w/\n    }, i = {\n        comment: [\n            {\n                pattern: /(^|\\s)(?:! .*|!$)/,\n                lookbehind: !0,\n                inside: t\n            },\n            {\n                pattern: /(^|\\s)\\/\\*\\s[\\s\\S]*?\\*\\/(?=\\s|$)/,\n                lookbehind: !0,\n                greedy: !0,\n                inside: t\n            },\n            {\n                pattern: /(^|\\s)!\\[(={0,6})\\[\\s[\\s\\S]*?\\]\\2\\](?=\\s|$)/,\n                lookbehind: !0,\n                greedy: !0,\n                inside: t\n            }\n        ],\n        number: [\n            {\n                pattern: /(^|\\s)[+-]?\\d+(?=\\s|$)/,\n                lookbehind: !0\n            },\n            {\n                pattern: /(^|\\s)[+-]?0(?:b[01]+|o[0-7]+|d\\d+|x[\\dA-F]+)(?=\\s|$)/i,\n                lookbehind: !0\n            },\n            {\n                pattern: /(^|\\s)[+-]?\\d+\\/\\d+\\.?(?=\\s|$)/,\n                lookbehind: !0\n            },\n            {\n                pattern: /(^|\\s)\\+?\\d+\\+\\d+\\/\\d+(?=\\s|$)/,\n                lookbehind: !0\n            },\n            {\n                pattern: /(^|\\s)-\\d+-\\d+\\/\\d+(?=\\s|$)/,\n                lookbehind: !0\n            },\n            {\n                pattern: /(^|\\s)[+-]?(?:\\d*\\.\\d+|\\d+\\.\\d*|\\d+)(?:e[+-]?\\d+)?(?=\\s|$)/i,\n                lookbehind: !0\n            },\n            {\n                pattern: /(^|\\s)NAN:\\s+[\\da-fA-F]+(?=\\s|$)/,\n                lookbehind: !0\n            },\n            {\n                pattern: /(^|\\s)[+-]?0(?:b1\\.[01]*|o1\\.[0-7]*|d1\\.\\d*|x1\\.[\\dA-F]*)p\\d+(?=\\s|$)/i,\n                lookbehind: !0\n            }\n        ],\n        regexp: {\n            pattern: /(^|\\s)R\\/\\s(?:\\\\\\S|[^\\\\/])*\\/(?:[idmsr]*|[idmsr]+-[idmsr]+)(?=\\s|$)/,\n            lookbehind: !0,\n            alias: \"number\",\n            inside: {\n                variable: /\\\\\\S/,\n                keyword: /[+?*\\[\\]^$(){}.|]/,\n                operator: {\n                    pattern: /(\\/)[idmsr]+(?:-[idmsr]+)?/,\n                    lookbehind: !0\n                }\n            }\n        },\n        boolean: {\n            pattern: /(^|\\s)[tf](?=\\s|$)/,\n            lookbehind: !0\n        },\n        \"custom-string\": {\n            pattern: /(^|\\s)[A-Z0-9\\-]+\"\\s(?:\\\\\\S|[^\"\\\\])*\"/,\n            lookbehind: !0,\n            greedy: !0,\n            alias: \"string\",\n            inside: {\n                number: /\\\\\\S|%\\w|\\//\n            }\n        },\n        \"multiline-string\": [\n            {\n                pattern: /(^|\\s)STRING:\\s+\\S+(?:\\n|\\r\\n).*(?:\\n|\\r\\n)\\s*;(?=\\s|$)/,\n                lookbehind: !0,\n                greedy: !0,\n                alias: \"string\",\n                inside: {\n                    number: s.number,\n                    \"semicolon-or-setlocal\": {\n                        pattern: /([\\r\\n][ \\t]*);(?=\\s|$)/,\n                        lookbehind: !0,\n                        alias: \"function\"\n                    }\n                }\n            },\n            {\n                pattern: /(^|\\s)HEREDOC:\\s+\\S+(?:\\n|\\r\\n).*(?:\\n|\\r\\n)\\s*\\S+(?=\\s|$)/,\n                lookbehind: !0,\n                greedy: !0,\n                alias: \"string\",\n                inside: s\n            },\n            {\n                pattern: /(^|\\s)\\[(={0,6})\\[\\s[\\s\\S]*?\\]\\2\\](?=\\s|$)/,\n                lookbehind: !0,\n                greedy: !0,\n                alias: \"string\",\n                inside: s\n            }\n        ],\n        \"special-using\": {\n            pattern: /(^|\\s)USING:(?:\\s\\S+)*(?=\\s+;(?:\\s|$))/,\n            lookbehind: !0,\n            alias: \"function\",\n            inside: {\n                string: {\n                    pattern: /(\\s)[^:\\s]+/,\n                    lookbehind: !0\n                }\n            }\n        },\n        \"stack-effect-delimiter\": [\n            {\n                pattern: /(^|\\s)(?:call|eval|execute)?\\((?=\\s)/,\n                lookbehind: !0,\n                alias: \"operator\"\n            },\n            {\n                pattern: /(\\s)--(?=\\s)/,\n                lookbehind: !0,\n                alias: \"operator\"\n            },\n            {\n                pattern: /(\\s)\\)(?=\\s|$)/,\n                lookbehind: !0,\n                alias: \"operator\"\n            }\n        ],\n        combinators: {\n            pattern: null,\n            lookbehind: !0,\n            alias: \"keyword\"\n        },\n        \"kernel-builtin\": {\n            pattern: null,\n            lookbehind: !0,\n            alias: \"variable\"\n        },\n        \"sequences-builtin\": {\n            pattern: null,\n            lookbehind: !0,\n            alias: \"variable\"\n        },\n        \"math-builtin\": {\n            pattern: null,\n            lookbehind: !0,\n            alias: \"variable\"\n        },\n        \"constructor-word\": {\n            pattern: /(^|\\s)<(?!=+>|-+>)\\S+>(?=\\s|$)/,\n            lookbehind: !0,\n            alias: \"keyword\"\n        },\n        \"other-builtin-syntax\": {\n            pattern: null,\n            lookbehind: !0,\n            alias: \"operator\"\n        },\n        \"conventionally-named-word\": {\n            pattern: /(^|\\s)(?!\")(?:(?:change|new|set|with)-\\S+|\\$\\S+|>[^>\\s]+|[^:>\\s]+>|[^>\\s]+>[^>\\s]+|\\+[^+\\s]+\\+|[^?\\s]+\\?|\\?[^?\\s]+|[^>\\s]+>>|>>[^>\\s]+|[^<\\s]+<<|\\([^()\\s]+\\)|[^!\\s]+!|[^*\\s]\\S*\\*|[^.\\s]\\S*\\.)(?=\\s|$)/,\n            lookbehind: !0,\n            alias: \"keyword\"\n        },\n        \"colon-syntax\": {\n            pattern: /(^|\\s)(?:[A-Z0-9\\-]+#?)?:{1,2}\\s+(?:;\\S+|(?!;)\\S+)(?=\\s|$)/,\n            lookbehind: !0,\n            greedy: !0,\n            alias: \"function\"\n        },\n        \"semicolon-or-setlocal\": {\n            pattern: /(\\s)(?:;|:>)(?=\\s|$)/,\n            lookbehind: !0,\n            alias: \"function\"\n        },\n        \"curly-brace-literal-delimiter\": [\n            {\n                pattern: /(^|\\s)[a-z]*\\{(?=\\s)/i,\n                lookbehind: !0,\n                alias: \"operator\"\n            },\n            {\n                pattern: /(\\s)\\}(?=\\s|$)/,\n                lookbehind: !0,\n                alias: \"operator\"\n            }\n        ],\n        \"quotation-delimiter\": [\n            {\n                pattern: /(^|\\s)\\[(?=\\s)/,\n                lookbehind: !0,\n                alias: \"operator\"\n            },\n            {\n                pattern: /(\\s)\\](?=\\s|$)/,\n                lookbehind: !0,\n                alias: \"operator\"\n            }\n        ],\n        \"normal-word\": {\n            pattern: /(^|\\s)[^\"\\s]\\S*(?=\\s|$)/,\n            lookbehind: !0\n        },\n        string: {\n            pattern: /\"(?:\\\\\\S|[^\"\\\\])*\"/,\n            greedy: !0,\n            inside: s\n        }\n    }, n = function(e) {\n        return (e + \"\").replace(/([.?*+\\^$\\[\\]\\\\(){}|\\-])/g, \"\\\\$1\");\n    }, r = function(e) {\n        return new RegExp(\"(^|\\\\s)(?:\" + e.map(n).join(\"|\") + \")(?=\\\\s|$)\");\n    }, a = {\n        \"kernel-builtin\": [\n            \"or\",\n            \"2nipd\",\n            \"4drop\",\n            \"tuck\",\n            \"wrapper\",\n            \"nip\",\n            \"wrapper?\",\n            \"callstack>array\",\n            \"die\",\n            \"dupd\",\n            \"callstack\",\n            \"callstack?\",\n            \"3dup\",\n            \"hashcode\",\n            \"pick\",\n            \"4nip\",\n            \"build\",\n            \">boolean\",\n            \"nipd\",\n            \"clone\",\n            \"5nip\",\n            \"eq?\",\n            \"?\",\n            \"=\",\n            \"swapd\",\n            \"2over\",\n            \"clear\",\n            \"2dup\",\n            \"get-retainstack\",\n            \"not\",\n            \"tuple?\",\n            \"dup\",\n            \"3nipd\",\n            \"call\",\n            \"-rotd\",\n            \"object\",\n            \"drop\",\n            \"assert=\",\n            \"assert?\",\n            \"-rot\",\n            \"execute\",\n            \"boa\",\n            \"get-callstack\",\n            \"curried?\",\n            \"3drop\",\n            \"pickd\",\n            \"overd\",\n            \"over\",\n            \"roll\",\n            \"3nip\",\n            \"swap\",\n            \"and\",\n            \"2nip\",\n            \"rotd\",\n            \"throw\",\n            \"(clone)\",\n            \"hashcode*\",\n            \"spin\",\n            \"reach\",\n            \"4dup\",\n            \"equal?\",\n            \"get-datastack\",\n            \"assert\",\n            \"2drop\",\n            \"<wrapper>\",\n            \"boolean?\",\n            \"identity-hashcode\",\n            \"identity-tuple?\",\n            \"null\",\n            \"composed?\",\n            \"new\",\n            \"5drop\",\n            \"rot\",\n            \"-roll\",\n            \"xor\",\n            \"identity-tuple\",\n            \"boolean\"\n        ],\n        \"other-builtin-syntax\": [\n            \"=======\",\n            \"recursive\",\n            \"flushable\",\n            \">>\",\n            \"<<<<<<\",\n            \"M\\\\\",\n            \"B\",\n            \"PRIVATE>\",\n            \"\\\\\",\n            \"======\",\n            \"final\",\n            \"inline\",\n            \"delimiter\",\n            \"deprecated\",\n            \"<PRIVATE\",\n            \">>>>>>\",\n            \"<<<<<<<\",\n            \"parse-complex\",\n            \"malformed-complex\",\n            \"read-only\",\n            \">>>>>>>\",\n            \"call-next-method\",\n            \"<<\",\n            \"foldable\",\n            \"$\",\n            \"$[\",\n            \"${\"\n        ],\n        \"sequences-builtin\": [\n            \"member-eq?\",\n            \"mismatch\",\n            \"append\",\n            \"assert-sequence=\",\n            \"longer\",\n            \"repetition\",\n            \"clone-like\",\n            \"3sequence\",\n            \"assert-sequence?\",\n            \"last-index-from\",\n            \"reversed\",\n            \"index-from\",\n            \"cut*\",\n            \"pad-tail\",\n            \"join-as\",\n            \"remove-eq!\",\n            \"concat-as\",\n            \"but-last\",\n            \"snip\",\n            \"nths\",\n            \"nth\",\n            \"sequence\",\n            \"longest\",\n            \"slice?\",\n            \"<slice>\",\n            \"remove-nth\",\n            \"tail-slice\",\n            \"empty?\",\n            \"tail*\",\n            \"member?\",\n            \"virtual-sequence?\",\n            \"set-length\",\n            \"drop-prefix\",\n            \"iota\",\n            \"unclip\",\n            \"bounds-error?\",\n            \"unclip-last-slice\",\n            \"non-negative-integer-expected\",\n            \"non-negative-integer-expected?\",\n            \"midpoint@\",\n            \"longer?\",\n            \"?set-nth\",\n            \"?first\",\n            \"rest-slice\",\n            \"prepend-as\",\n            \"prepend\",\n            \"fourth\",\n            \"sift\",\n            \"subseq-start\",\n            \"new-sequence\",\n            \"?last\",\n            \"like\",\n            \"first4\",\n            \"1sequence\",\n            \"reverse\",\n            \"slice\",\n            \"virtual@\",\n            \"repetition?\",\n            \"set-last\",\n            \"index\",\n            \"4sequence\",\n            \"max-length\",\n            \"set-second\",\n            \"immutable-sequence\",\n            \"first2\",\n            \"first3\",\n            \"supremum\",\n            \"unclip-slice\",\n            \"suffix!\",\n            \"insert-nth\",\n            \"tail\",\n            \"3append\",\n            \"short\",\n            \"suffix\",\n            \"concat\",\n            \"flip\",\n            \"immutable?\",\n            \"reverse!\",\n            \"2sequence\",\n            \"sum\",\n            \"delete-all\",\n            \"indices\",\n            \"snip-slice\",\n            \"<iota>\",\n            \"check-slice\",\n            \"sequence?\",\n            \"head\",\n            \"append-as\",\n            \"halves\",\n            \"sequence=\",\n            \"collapse-slice\",\n            \"?second\",\n            \"slice-error?\",\n            \"product\",\n            \"bounds-check?\",\n            \"bounds-check\",\n            \"immutable\",\n            \"virtual-exemplar\",\n            \"harvest\",\n            \"remove\",\n            \"pad-head\",\n            \"last\",\n            \"set-fourth\",\n            \"cartesian-product\",\n            \"remove-eq\",\n            \"shorten\",\n            \"shorter\",\n            \"reversed?\",\n            \"shorter?\",\n            \"shortest\",\n            \"head-slice\",\n            \"pop*\",\n            \"tail-slice*\",\n            \"but-last-slice\",\n            \"iota?\",\n            \"append!\",\n            \"cut-slice\",\n            \"new-resizable\",\n            \"head-slice*\",\n            \"sequence-hashcode\",\n            \"pop\",\n            \"set-nth\",\n            \"?nth\",\n            \"second\",\n            \"join\",\n            \"immutable-sequence?\",\n            \"<reversed>\",\n            \"3append-as\",\n            \"virtual-sequence\",\n            \"subseq?\",\n            \"remove-nth!\",\n            \"length\",\n            \"last-index\",\n            \"lengthen\",\n            \"assert-sequence\",\n            \"copy\",\n            \"move\",\n            \"third\",\n            \"first\",\n            \"tail?\",\n            \"set-first\",\n            \"prefix\",\n            \"bounds-error\",\n            \"<repetition>\",\n            \"exchange\",\n            \"surround\",\n            \"cut\",\n            \"min-length\",\n            \"set-third\",\n            \"push-all\",\n            \"head?\",\n            \"subseq-start-from\",\n            \"delete-slice\",\n            \"rest\",\n            \"sum-lengths\",\n            \"head*\",\n            \"infimum\",\n            \"remove!\",\n            \"glue\",\n            \"slice-error\",\n            \"subseq\",\n            \"push\",\n            \"replace-slice\",\n            \"subseq-as\",\n            \"unclip-last\"\n        ],\n        \"math-builtin\": [\n            \"number=\",\n            \"next-power-of-2\",\n            \"?1+\",\n            \"fp-special?\",\n            \"imaginary-part\",\n            \"float>bits\",\n            \"number?\",\n            \"fp-infinity?\",\n            \"bignum?\",\n            \"fp-snan?\",\n            \"denominator\",\n            \"gcd\",\n            \"*\",\n            \"+\",\n            \"fp-bitwise=\",\n            \"-\",\n            \"u>=\",\n            \"/\",\n            \">=\",\n            \"bitand\",\n            \"power-of-2?\",\n            \"log2-expects-positive\",\n            \"neg?\",\n            \"<\",\n            \"log2\",\n            \">\",\n            \"integer?\",\n            \"number\",\n            \"bits>double\",\n            \"2/\",\n            \"zero?\",\n            \"bits>float\",\n            \"float?\",\n            \"shift\",\n            \"ratio?\",\n            \"rect>\",\n            \"even?\",\n            \"ratio\",\n            \"fp-sign\",\n            \"bitnot\",\n            \">fixnum\",\n            \"complex?\",\n            \"/i\",\n            \"integer>fixnum\",\n            \"/f\",\n            \"sgn\",\n            \">bignum\",\n            \"next-float\",\n            \"u<\",\n            \"u>\",\n            \"mod\",\n            \"recip\",\n            \"rational\",\n            \">float\",\n            \"2^\",\n            \"integer\",\n            \"fixnum?\",\n            \"neg\",\n            \"fixnum\",\n            \"sq\",\n            \"bignum\",\n            \">rect\",\n            \"bit?\",\n            \"fp-qnan?\",\n            \"simple-gcd\",\n            \"complex\",\n            \"<fp-nan>\",\n            \"real\",\n            \">fraction\",\n            \"double>bits\",\n            \"bitor\",\n            \"rem\",\n            \"fp-nan-payload\",\n            \"real-part\",\n            \"log2-expects-positive?\",\n            \"prev-float\",\n            \"align\",\n            \"unordered?\",\n            \"float\",\n            \"fp-nan?\",\n            \"abs\",\n            \"bitxor\",\n            \"integer>fixnum-strict\",\n            \"u<=\",\n            \"odd?\",\n            \"<=\",\n            \"/mod\",\n            \">integer\",\n            \"real?\",\n            \"rational?\",\n            \"numerator\"\n        ]\n    };\n    Object.keys(a).forEach(function(e) {\n        i[e].pattern = r(a[e]);\n    }), i.combinators.pattern = r([\n        \"2bi\",\n        \"while\",\n        \"2tri\",\n        \"bi*\",\n        \"4dip\",\n        \"both?\",\n        \"same?\",\n        \"tri@\",\n        \"curry\",\n        \"prepose\",\n        \"3bi\",\n        \"?if\",\n        \"tri*\",\n        \"2keep\",\n        \"3keep\",\n        \"curried\",\n        \"2keepd\",\n        \"when\",\n        \"2bi*\",\n        \"2tri*\",\n        \"4keep\",\n        \"bi@\",\n        \"keepdd\",\n        \"do\",\n        \"unless*\",\n        \"tri-curry\",\n        \"if*\",\n        \"loop\",\n        \"bi-curry*\",\n        \"when*\",\n        \"2bi@\",\n        \"2tri@\",\n        \"with\",\n        \"2with\",\n        \"either?\",\n        \"bi\",\n        \"until\",\n        \"3dip\",\n        \"3curry\",\n        \"tri-curry*\",\n        \"tri-curry@\",\n        \"bi-curry\",\n        \"keepd\",\n        \"compose\",\n        \"2dip\",\n        \"if\",\n        \"3tri\",\n        \"unless\",\n        \"tuple\",\n        \"keep\",\n        \"2curry\",\n        \"tri\",\n        \"most\",\n        \"while*\",\n        \"dip\",\n        \"composed\",\n        \"bi-curry@\",\n        \"find-last-from\",\n        \"trim-head-slice\",\n        \"map-as\",\n        \"each-from\",\n        \"none?\",\n        \"trim-tail\",\n        \"partition\",\n        \"if-empty\",\n        \"accumulate*\",\n        \"reject!\",\n        \"find-from\",\n        \"accumulate-as\",\n        \"collector-for-as\",\n        \"reject\",\n        \"map\",\n        \"map-sum\",\n        \"accumulate!\",\n        \"2each-from\",\n        \"follow\",\n        \"supremum-by\",\n        \"map!\",\n        \"unless-empty\",\n        \"collector\",\n        \"padding\",\n        \"reduce-index\",\n        \"replicate-as\",\n        \"infimum-by\",\n        \"trim-tail-slice\",\n        \"count\",\n        \"find-index\",\n        \"filter\",\n        \"accumulate*!\",\n        \"reject-as\",\n        \"map-integers\",\n        \"map-find\",\n        \"reduce\",\n        \"selector\",\n        \"interleave\",\n        \"2map\",\n        \"filter-as\",\n        \"binary-reduce\",\n        \"map-index-as\",\n        \"find\",\n        \"produce\",\n        \"filter!\",\n        \"replicate\",\n        \"cartesian-map\",\n        \"cartesian-each\",\n        \"find-index-from\",\n        \"map-find-last\",\n        \"3map-as\",\n        \"3map\",\n        \"find-last\",\n        \"selector-as\",\n        \"2map-as\",\n        \"2map-reduce\",\n        \"accumulate\",\n        \"each\",\n        \"each-index\",\n        \"accumulate*-as\",\n        \"when-empty\",\n        \"all?\",\n        \"collector-as\",\n        \"push-either\",\n        \"new-like\",\n        \"collector-for\",\n        \"2selector\",\n        \"push-if\",\n        \"2all?\",\n        \"map-reduce\",\n        \"3each\",\n        \"any?\",\n        \"trim-slice\",\n        \"2reduce\",\n        \"change-nth\",\n        \"produce-as\",\n        \"2each\",\n        \"trim\",\n        \"trim-head\",\n        \"cartesian-find\",\n        \"map-index\",\n        \"if-zero\",\n        \"each-integer\",\n        \"unless-zero\",\n        \"(find-integer)\",\n        \"when-zero\",\n        \"find-last-integer\",\n        \"(all-integers?)\",\n        \"times\",\n        \"(each-integer)\",\n        \"find-integer\",\n        \"all-integers?\",\n        \"unless-negative\",\n        \"if-positive\",\n        \"when-positive\",\n        \"when-negative\",\n        \"unless-positive\",\n        \"if-negative\",\n        \"case\",\n        \"2cleave\",\n        \"cond>quot\",\n        \"case>quot\",\n        \"3cleave\",\n        \"wrong-values\",\n        \"to-fixed-point\",\n        \"alist>quot\",\n        \"cond\",\n        \"cleave\",\n        \"call-effect\",\n        \"recursive-hashcode\",\n        \"spread\",\n        \"deep-spread>quot\",\n        \"2||\",\n        \"0||\",\n        \"n||\",\n        \"0&&\",\n        \"2&&\",\n        \"3||\",\n        \"1||\",\n        \"1&&\",\n        \"n&&\",\n        \"3&&\",\n        \"smart-unless*\",\n        \"keep-inputs\",\n        \"reduce-outputs\",\n        \"smart-when*\",\n        \"cleave>array\",\n        \"smart-with\",\n        \"smart-apply\",\n        \"smart-if\",\n        \"inputs/outputs\",\n        \"output>sequence-n\",\n        \"map-outputs\",\n        \"map-reduce-outputs\",\n        \"dropping\",\n        \"output>array\",\n        \"smart-map-reduce\",\n        \"smart-2map-reduce\",\n        \"output>array-n\",\n        \"nullary\",\n        \"input<sequence\",\n        \"append-outputs\",\n        \"drop-inputs\",\n        \"inputs\",\n        \"smart-2reduce\",\n        \"drop-outputs\",\n        \"smart-reduce\",\n        \"preserving\",\n        \"smart-when\",\n        \"outputs\",\n        \"append-outputs-as\",\n        \"smart-unless\",\n        \"smart-if*\",\n        \"sum-outputs\",\n        \"input<sequence-unsafe\",\n        \"output>sequence\"\n    ]), e.languages.factor = i;\n}(Prism);\n!function(a) {\n    a.languages.false = {\n        comment: {\n            pattern: /\\{[^}]*\\}/\n        },\n        string: {\n            pattern: /\"[^\"]*\"/,\n            greedy: !0\n        },\n        \"character-code\": {\n            pattern: /'(?:[^\\r]|\\r\\n?)/,\n            alias: \"number\"\n        },\n        \"assembler-code\": {\n            pattern: /\\d+`/,\n            alias: \"important\"\n        },\n        number: /\\d+/,\n        operator: /[-!#$%&'*+,./:;=>?@\\\\^_`|~ßø]/,\n        punctuation: /\\[|\\]/,\n        variable: /[a-z]/,\n        \"non-standard\": {\n            pattern: /[()<BDO®]/,\n            alias: \"bold\"\n        }\n    };\n}(Prism);\nPrism.languages[\"firestore-security-rules\"] = Prism.languages.extend(\"clike\", {\n    comment: /\\/\\/.*/,\n    keyword: /\\b(?:allow|function|if|match|null|return|rules_version|service)\\b/,\n    operator: /&&|\\|\\||[<>!=]=?|[-+*/%]|\\b(?:in|is)\\b/\n}), delete Prism.languages[\"firestore-security-rules\"][\"class-name\"], Prism.languages.insertBefore(\"firestore-security-rules\", \"keyword\", {\n    path: {\n        pattern: /(^|[\\s(),])(?:\\/(?:[\\w\\xA0-\\uFFFF]+|\\{[\\w\\xA0-\\uFFFF]+(?:=\\*\\*)?\\}|\\$\\([\\w\\xA0-\\uFFFF.]+\\)))+/,\n        lookbehind: !0,\n        greedy: !0,\n        inside: {\n            variable: {\n                pattern: /\\{[\\w\\xA0-\\uFFFF]+(?:=\\*\\*)?\\}|\\$\\([\\w\\xA0-\\uFFFF.]+\\)/,\n                inside: {\n                    operator: /=/,\n                    keyword: /\\*\\*/,\n                    punctuation: /[.$(){}]/\n                }\n            },\n            punctuation: /\\//\n        }\n    },\n    method: {\n        pattern: /(\\ballow\\s+)[a-z]+(?:\\s*,\\s*[a-z]+)*(?=\\s*[:;])/,\n        lookbehind: !0,\n        alias: \"builtin\",\n        inside: {\n            punctuation: /,/\n        }\n    }\n});\n!function(a) {\n    a.languages.flow = a.languages.extend(\"javascript\", {}), a.languages.insertBefore(\"flow\", \"keyword\", {\n        type: [\n            {\n                pattern: /\\b(?:[Bb]oolean|Function|[Nn]umber|[Ss]tring|[Ss]ymbol|any|mixed|null|void)\\b/,\n                alias: \"class-name\"\n            }\n        ]\n    }), a.languages.flow[\"function-variable\"].pattern = /(?!\\s)[_$a-z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*=\\s*(?:function\\b|(?:\\([^()]*\\)(?:\\s*:\\s*\\w+)?|(?!\\s)[_$a-z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)\\s*=>))/i, delete a.languages.flow.parameter, a.languages.insertBefore(\"flow\", \"operator\", {\n        \"flow-punctuation\": {\n            pattern: /\\{\\||\\|\\}/,\n            alias: \"punctuation\"\n        }\n    }), Array.isArray(a.languages.flow.keyword) || (a.languages.flow.keyword = [\n        a.languages.flow.keyword\n    ]), a.languages.flow.keyword.unshift({\n        pattern: /(^|[^$]\\b)(?:Class|declare|opaque|type)\\b(?!\\$)/,\n        lookbehind: !0\n    }, {\n        pattern: /(^|[^$]\\B)\\$(?:Diff|Enum|Exact|Keys|ObjMap|PropertyType|Record|Shape|Subtype|Supertype|await)\\b(?!\\$)/,\n        lookbehind: !0\n    });\n}(Prism);\nPrism.languages.fortran = {\n    \"quoted-number\": {\n        pattern: /[BOZ](['\"])[A-F0-9]+\\1/i,\n        alias: \"number\"\n    },\n    string: {\n        pattern: /(?:\\b\\w+_)?(['\"])(?:\\1\\1|&(?:\\r\\n?|\\n)(?:[ \\t]*!.*(?:\\r\\n?|\\n)|(?![ \\t]*!))|(?!\\1).)*(?:\\1|&)/,\n        inside: {\n            comment: {\n                pattern: /(&(?:\\r\\n?|\\n)\\s*)!.*/,\n                lookbehind: !0\n            }\n        }\n    },\n    comment: {\n        pattern: /!.*/,\n        greedy: !0\n    },\n    boolean: /\\.(?:FALSE|TRUE)\\.(?:_\\w+)?/i,\n    number: /(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[ED][+-]?\\d+)?(?:_\\w+)?/i,\n    keyword: [\n        /\\b(?:CHARACTER|COMPLEX|DOUBLE ?PRECISION|INTEGER|LOGICAL|REAL)\\b/i,\n        /\\b(?:END ?)?(?:BLOCK ?DATA|DO|FILE|FORALL|FUNCTION|IF|INTERFACE|MODULE(?! PROCEDURE)|PROGRAM|SELECT|SUBROUTINE|TYPE|WHERE)\\b/i,\n        /\\b(?:ALLOCATABLE|ALLOCATE|BACKSPACE|CALL|CASE|CLOSE|COMMON|CONTAINS|CONTINUE|CYCLE|DATA|DEALLOCATE|DIMENSION|DO|END|EQUIVALENCE|EXIT|EXTERNAL|FORMAT|GO ?TO|IMPLICIT(?: NONE)?|INQUIRE|INTENT|INTRINSIC|MODULE PROCEDURE|NAMELIST|NULLIFY|OPEN|OPTIONAL|PARAMETER|POINTER|PRINT|PRIVATE|PUBLIC|READ|RETURN|REWIND|SAVE|SELECT|STOP|TARGET|WHILE|WRITE)\\b/i,\n        /\\b(?:ASSIGNMENT|DEFAULT|ELEMENTAL|ELSE|ELSEIF|ELSEWHERE|ENTRY|IN|INCLUDE|INOUT|KIND|NULL|ONLY|OPERATOR|OUT|PURE|RECURSIVE|RESULT|SEQUENCE|STAT|THEN|USE)\\b/i\n    ],\n    operator: [\n        /\\*\\*|\\/\\/|=>|[=\\/]=|[<>]=?|::|[+\\-*=%]|\\.[A-Z]+\\./i,\n        {\n            pattern: /(^|(?!\\().)\\/(?!\\))/,\n            lookbehind: !0\n        }\n    ],\n    punctuation: /\\(\\/|\\/\\)|[(),;:&]/\n};\n!function(e) {\n    for(var t = \"[^<()\\\"']|\\\\((?:<expr>)*\\\\)|<(?!#--)|<#--(?:[^-]|-(?!->))*-->|\\\"(?:[^\\\\\\\\\\\"]|\\\\\\\\.)*\\\"|'(?:[^\\\\\\\\']|\\\\\\\\.)*'\", n = 0; n < 2; n++)t = t.replace(/<expr>/g, function() {\n        return t;\n    });\n    t = t.replace(/<expr>/g, \"[^\\\\s\\\\S]\");\n    var i = {\n        comment: /<#--[\\s\\S]*?-->/,\n        string: [\n            {\n                pattern: /\\br(\"|')(?:(?!\\1)[^\\\\]|\\\\.)*\\1/,\n                greedy: !0\n            },\n            {\n                pattern: RegExp(\"(\\\"|')(?:(?!\\\\1|\\\\$\\\\{)[^\\\\\\\\]|\\\\\\\\.|\\\\$\\\\{(?:(?!\\\\})(?:<expr>))*\\\\})*\\\\1\".replace(/<expr>/g, function() {\n                    return t;\n                })),\n                greedy: !0,\n                inside: {\n                    interpolation: {\n                        pattern: RegExp(\"((?:^|[^\\\\\\\\])(?:\\\\\\\\\\\\\\\\)*)\\\\$\\\\{(?:(?!\\\\})(?:<expr>))*\\\\}\".replace(/<expr>/g, function() {\n                            return t;\n                        })),\n                        lookbehind: !0,\n                        inside: {\n                            \"interpolation-punctuation\": {\n                                pattern: /^\\$\\{|\\}$/,\n                                alias: \"punctuation\"\n                            },\n                            rest: null\n                        }\n                    }\n                }\n            }\n        ],\n        keyword: /\\b(?:as)\\b/,\n        boolean: /\\b(?:false|true)\\b/,\n        \"builtin-function\": {\n            pattern: /((?:^|[^?])\\?\\s*)\\w+/,\n            lookbehind: !0,\n            alias: \"function\"\n        },\n        function: /\\b\\w+(?=\\s*\\()/,\n        number: /\\b\\d+(?:\\.\\d+)?\\b/,\n        operator: /\\.\\.[<*!]?|->|--|\\+\\+|&&|\\|\\||\\?{1,2}|[-+*/%!=<>]=?|\\b(?:gt|gte|lt|lte)\\b/,\n        punctuation: /[,;.:()[\\]{}]/\n    };\n    i.string[1].inside.interpolation.inside.rest = i, e.languages.ftl = {\n        \"ftl-comment\": {\n            pattern: /^<#--[\\s\\S]*/,\n            alias: \"comment\"\n        },\n        \"ftl-directive\": {\n            pattern: /^<[\\s\\S]+>$/,\n            inside: {\n                directive: {\n                    pattern: /(^<\\/?)[#@][a-z]\\w*/i,\n                    lookbehind: !0,\n                    alias: \"keyword\"\n                },\n                punctuation: /^<\\/?|\\/?>$/,\n                content: {\n                    pattern: /\\s*\\S[\\s\\S]*/,\n                    alias: \"ftl\",\n                    inside: i\n                }\n            }\n        },\n        \"ftl-interpolation\": {\n            pattern: /^\\$\\{[\\s\\S]*\\}$/,\n            inside: {\n                punctuation: /^\\$\\{|\\}$/,\n                content: {\n                    pattern: /\\s*\\S[\\s\\S]*/,\n                    alias: \"ftl\",\n                    inside: i\n                }\n            }\n        }\n    }, e.hooks.add(\"before-tokenize\", function(n) {\n        var i = RegExp(\"<#--[^]*?-->|</?[#@][a-zA-Z](?:<expr>)*?>|\\\\$\\\\{(?:<expr>)*?\\\\}\".replace(/<expr>/g, function() {\n            return t;\n        }), \"gi\");\n        e.languages[\"markup-templating\"].buildPlaceholders(n, \"ftl\", i);\n    }), e.hooks.add(\"after-tokenize\", function(t) {\n        e.languages[\"markup-templating\"].tokenizePlaceholders(t, \"ftl\");\n    });\n}(Prism);\nPrism.languages.gamemakerlanguage = Prism.languages.gml = Prism.languages.extend(\"clike\", {\n    keyword: /\\b(?:break|case|continue|default|do|else|enum|exit|for|globalvar|if|repeat|return|switch|until|var|while)\\b/,\n    number: /(?:\\b0x[\\da-f]+|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?)[ulf]{0,4}/i,\n    operator: /--|\\+\\+|[-+%/=]=?|!=|\\*\\*?=?|<[<=>]?|>[=>]?|&&?|\\^\\^?|\\|\\|?|~|\\b(?:and|at|not|or|with|xor)\\b/,\n    constant: /\\b(?:GM_build_date|GM_version|action_(?:continue|restart|reverse|stop)|all|gamespeed_(?:fps|microseconds)|global|local|noone|other|pi|pointer_(?:invalid|null)|self|timezone_(?:local|utc)|undefined|ev_(?:create|destroy|step|alarm|keyboard|mouse|collision|other|draw|draw_(?:begin|end|post|pre)|keypress|keyrelease|trigger|(?:left|middle|no|right)_button|(?:left|middle|right)_press|(?:left|middle|right)_release|mouse_(?:enter|leave|wheel_down|wheel_up)|global_(?:left|middle|right)_button|global_(?:left|middle|right)_press|global_(?:left|middle|right)_release|joystick(?:1|2)_(?:button1|button2|button3|button4|button5|button6|button7|button8|down|left|right|up)|outside|boundary|game_start|game_end|room_start|room_end|no_more_lives|animation_end|end_of_path|no_more_health|user\\d|gui|gui_begin|gui_end|step_(?:begin|end|normal))|vk_(?:alt|anykey|backspace|control|delete|down|end|enter|escape|home|insert|left|nokey|pagedown|pageup|pause|printscreen|return|right|shift|space|tab|up|f\\d|numpad\\d|add|decimal|divide|lalt|lcontrol|lshift|multiply|ralt|rcontrol|rshift|subtract)|achievement_(?:filter_(?:all_players|favorites_only|friends_only)|friends_info|info|leaderboard_info|our_info|pic_loaded|show_(?:achievement|bank|friend_picker|leaderboard|profile|purchase_prompt|ui)|type_challenge|type_score_challenge)|asset_(?:font|object|path|room|script|shader|sound|sprite|tiles|timeline|unknown)|audio_(?:3d|falloff_(?:exponent_distance|exponent_distance_clamped|inverse_distance|inverse_distance_clamped|linear_distance|linear_distance_clamped|none)|mono|new_system|old_system|stereo)|bm_(?:add|complex|dest_alpha|dest_color|dest_colour|inv_dest_alpha|inv_dest_color|inv_dest_colour|inv_src_alpha|inv_src_color|inv_src_colour|max|normal|one|src_alpha|src_alpha_sat|src_color|src_colour|subtract|zero)|browser_(?:chrome|firefox|ie|ie_mobile|not_a_browser|opera|safari|safari_mobile|tizen|unknown|windows_store)|buffer_(?:bool|f16|f32|f64|fast|fixed|generalerror|grow|invalidtype|network|outofbounds|outofspace|s16|s32|s8|seek_end|seek_relative|seek_start|string|text|u16|u32|u64|u8|vbuffer|wrap)|c_(?:aqua|black|blue|dkgray|fuchsia|gray|green|lime|ltgray|maroon|navy|olive|orange|purple|red|silver|teal|white|yellow)|cmpfunc_(?:always|equal|greater|greaterequal|less|lessequal|never|notequal)|cr_(?:appstart|arrow|beam|cross|default|drag|handpoint|hourglass|none|size_all|size_nesw|size_ns|size_nwse|size_we|uparrow)|cull_(?:clockwise|counterclockwise|noculling)|device_(?:emulator|tablet)|device_ios_(?:ipad|ipad_retina|iphone|iphone5|iphone6|iphone6plus|iphone_retina|unknown)|display_(?:landscape|landscape_flipped|portrait|portrait_flipped)|dll_(?:cdecl|cdel|stdcall)|ds_type_(?:grid|list|map|priority|queue|stack)|ef_(?:cloud|ellipse|explosion|firework|flare|rain|ring|smoke|smokeup|snow|spark|star)|fa_(?:archive|bottom|center|directory|hidden|left|middle|readonly|right|sysfile|top|volumeid)|fb_login_(?:default|fallback_to_webview|forcing_safari|forcing_webview|no_fallback_to_webview|use_system_account)|iap_(?:available|canceled|ev_consume|ev_product|ev_purchase|ev_restore|ev_storeload|failed|purchased|refunded|status_available|status_loading|status_processing|status_restoring|status_unavailable|status_uninitialised|storeload_failed|storeload_ok|unavailable)|leaderboard_type_(?:number|time_mins_secs)|lighttype_(?:dir|point)|matrix_(?:projection|view|world)|mb_(?:any|left|middle|none|right)|network_(?:config_(?:connect_timeout|disable_reliable_udp|enable_reliable_udp|use_non_blocking_socket)|socket_(?:bluetooth|tcp|udp)|type_(?:connect|data|disconnect|non_blocking_connect))|of_challenge_(?:lose|tie|win)|os_(?:android|ios|linux|macosx|ps3|ps4|psvita|unknown|uwp|win32|win8native|windows|winphone|xboxone)|phy_debug_render_(?:aabb|collision_pairs|coms|core_shapes|joints|obb|shapes)|phy_joint_(?:anchor_1_x|anchor_1_y|anchor_2_x|anchor_2_y|angle|angle_limits|damping_ratio|frequency|length_1|length_2|lower_angle_limit|max_force|max_length|max_motor_force|max_motor_torque|max_torque|motor_force|motor_speed|motor_torque|reaction_force_x|reaction_force_y|reaction_torque|speed|translation|upper_angle_limit)|phy_particle_data_flag_(?:category|color|colour|position|typeflags|velocity)|phy_particle_flag_(?:colormixing|colourmixing|elastic|powder|spring|tensile|viscous|wall|water|zombie)|phy_particle_group_flag_(?:rigid|solid)|pr_(?:linelist|linestrip|pointlist|trianglefan|trianglelist|trianglestrip)|ps_(?:distr|shape)_(?:diamond|ellipse|gaussian|invgaussian|line|linear|rectangle)|pt_shape_(?:circle|cloud|disk|explosion|flare|line|pixel|ring|smoke|snow|spark|sphere|square|star)|ty_(?:real|string)|gp_(?:face\\d|axislh|axislv|axisrh|axisrv|padd|padl|padr|padu|select|shoulderl|shoulderlb|shoulderr|shoulderrb|start|stickl|stickr)|lb_disp_(?:none|numeric|time_ms|time_sec)|lb_sort_(?:ascending|descending|none)|ov_(?:achievements|community|friends|gamegroup|players|settings)|ugc_(?:filetype_(?:community|microtrans)|list_(?:Favorited|Followed|Published|Subscribed|UsedOrPlayed|VotedDown|VotedOn|VotedUp|WillVoteLater)|match_(?:AllGuides|Artwork|Collections|ControllerBindings|IntegratedGuides|Items|Items_Mtx|Items_ReadyToUse|Screenshots|UsableInGame|Videos|WebGuides)|query_(?:AcceptedForGameRankedByAcceptanceDate|CreatedByFriendsRankedByPublicationDate|FavoritedByFriendsRankedByPublicationDate|NotYetRated)|query_RankedBy(?:NumTimesReported|PublicationDate|TextSearch|TotalVotesAsc|Trend|Vote|VotesUp)|result_success|sortorder_CreationOrder(?:Asc|Desc)|sortorder_(?:ForModeration|LastUpdatedDesc|SubscriptionDateDesc|TitleAsc|VoteScoreDesc)|visibility_(?:friends_only|private|public))|vertex_usage_(?:binormal|blendindices|blendweight|color|colour|depth|fog|normal|position|psize|sample|tangent|texcoord|textcoord)|vertex_type_(?:float\\d|color|colour|ubyte4)|input_type|layerelementtype_(?:background|instance|oldtilemap|particlesystem|sprite|tile|tilemap|undefined)|se_(?:chorus|compressor|echo|equalizer|flanger|gargle|none|reverb)|text_type|tile_(?:flip|index_mask|mirror|rotate)|(?:obj|rm|scr|spr)\\w+)\\b/,\n    variable: /\\b(?:alarm|application_surface|async_load|background_(?:alpha|blend|color|colour|foreground|height|hspeed|htiled|index|showcolor|showcolour|visible|vspeed|vtiled|width|x|xscale|y|yscale)|bbox_(?:bottom|left|right|top)|browser_(?:height|width)|caption_(?:health|lives|score)|current_(?:day|hour|minute|month|second|time|weekday|year)|cursor_sprite|debug_mode|delta_time|direction|display_aa|error_(?:last|occurred)|event_(?:action|number|object|type)|fps|fps_real|friction|game_(?:display|project|save)_(?:id|name)|gamemaker_(?:pro|registered|version)|gravity|gravity_direction|(?:h|v)speed|health|iap_data|id|image_(?:alpha|angle|blend|depth|index|number|speed|xscale|yscale)|instance_(?:count|id)|keyboard_(?:key|lastchar|lastkey|string)|layer|lives|mask_index|mouse_(?:button|lastbutton|x|y)|object_index|os_(?:browser|device|type|version)|path_(?:endaction|index|orientation|position|positionprevious|scale|speed)|persistent|phy_(?:rotation|(?:col_normal|collision|com|linear_velocity|position|speed)_(?:x|y)|angular_(?:damping|velocity)|position_(?:x|y)previous|speed|linear_damping|bullet|fixed_rotation|active|mass|inertia|dynamic|kinematic|sleeping|collision_points)|pointer_(?:invalid|null)|room|room_(?:caption|first|height|last|persistent|speed|width)|score|secure_mode|show_(?:health|lives|score)|solid|speed|sprite_(?:height|index|width|xoffset|yoffset)|temp_directory|timeline_(?:index|loop|position|running|speed)|transition_(?:color|kind|steps)|undefined|view_(?:angle|current|enabled|(?:h|v)(?:border|speed)|(?:h|w|x|y)port|(?:h|w|x|y)view|object|surface_id|visible)|visible|webgl_enabled|working_directory|(?:x|y)(?:previous|start)|x|y|argument(?:_relitive|_count|\\d)|argument|global|local|other|self)\\b/\n});\nPrism.languages.gap = {\n    shell: {\n        pattern: /^gap>[\\s\\S]*?(?=^gap>|$(?![\\s\\S]))/m,\n        greedy: !0,\n        inside: {\n            gap: {\n                pattern: /^(gap>).+(?:(?:\\r(?:\\n|(?!\\n))|\\n)>.*)*/,\n                lookbehind: !0,\n                inside: null\n            },\n            punctuation: /^gap>/\n        }\n    },\n    comment: {\n        pattern: /#.*/,\n        greedy: !0\n    },\n    string: {\n        pattern: /(^|[^\\\\'\"])(?:'(?:[^\\r\\n\\\\']|\\\\.){1,10}'|\"(?:[^\\r\\n\\\\\"]|\\\\.)*\"(?!\")|\"\"\"[\\s\\S]*?\"\"\")/,\n        lookbehind: !0,\n        greedy: !0,\n        inside: {\n            continuation: {\n                pattern: /([\\r\\n])>/,\n                lookbehind: !0,\n                alias: \"punctuation\"\n            }\n        }\n    },\n    keyword: /\\b(?:Assert|Info|IsBound|QUIT|TryNextMethod|Unbind|and|atomic|break|continue|do|elif|else|end|fi|for|function|if|in|local|mod|not|od|or|quit|readonly|readwrite|rec|repeat|return|then|until|while)\\b/,\n    boolean: /\\b(?:false|true)\\b/,\n    function: /\\b[a-z_]\\w*(?=\\s*\\()/i,\n    number: {\n        pattern: /(^|[^\\w.]|\\.\\.)(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:[eE][+-]?\\d+)?(?:_[a-z]?)?(?=$|[^\\w.]|\\.\\.)/,\n        lookbehind: !0\n    },\n    continuation: {\n        pattern: /([\\r\\n])>/,\n        lookbehind: !0,\n        alias: \"punctuation\"\n    },\n    operator: /->|[-+*/^~=!]|<>|[<>]=?|:=|\\.\\./,\n    punctuation: /[()[\\]{},;.:]/\n}, Prism.languages.gap.shell.inside.gap.inside = Prism.languages.gap;\nPrism.languages.gcode = {\n    comment: /;.*|\\B\\(.*?\\)\\B/,\n    string: {\n        pattern: /\"(?:\"\"|[^\"])*\"/,\n        greedy: !0\n    },\n    keyword: /\\b[GM]\\d+(?:\\.\\d+)?\\b/,\n    property: /\\b[A-Z]/,\n    checksum: {\n        pattern: /(\\*)\\d+/,\n        lookbehind: !0,\n        alias: \"number\"\n    },\n    punctuation: /[:*]/\n};\nPrism.languages.gdscript = {\n    comment: /#.*/,\n    string: {\n        pattern: /@?(?:(\"|')(?:(?!\\1)[^\\n\\\\]|\\\\[\\s\\S])*\\1(?!\"|')|\"\"\"(?:[^\\\\]|\\\\[\\s\\S])*?\"\"\")/,\n        greedy: !0\n    },\n    \"class-name\": {\n        pattern: /(^(?:class|class_name|extends)[ \\t]+|^export\\([ \\t]*|\\bas[ \\t]+|(?:\\b(?:const|var)[ \\t]|[,(])[ \\t]*\\w+[ \\t]*:[ \\t]*|->[ \\t]*)[a-zA-Z_]\\w*/m,\n        lookbehind: !0\n    },\n    keyword: /\\b(?:and|as|assert|break|breakpoint|class|class_name|const|continue|elif|else|enum|export|extends|for|func|if|in|is|master|mastersync|match|not|null|onready|or|pass|preload|puppet|puppetsync|remote|remotesync|return|self|setget|signal|static|tool|var|while|yield)\\b/,\n    function: /\\b[a-z_]\\w*(?=[ \\t]*\\()/i,\n    variable: /\\$\\w+/,\n    number: [\n        /\\b0b[01_]+\\b|\\b0x[\\da-fA-F_]+\\b|(?:\\b\\d[\\d_]*(?:\\.[\\d_]*)?|\\B\\.[\\d_]+)(?:e[+-]?[\\d_]+)?\\b/,\n        /\\b(?:INF|NAN|PI|TAU)\\b/\n    ],\n    constant: /\\b[A-Z][A-Z_\\d]*\\b/,\n    boolean: /\\b(?:false|true)\\b/,\n    operator: /->|:=|&&|\\|\\||<<|>>|[-+*/%&|!<>=]=?|[~^]/,\n    punctuation: /[.:,;()[\\]{}]/\n};\nPrism.languages.gedcom = {\n    \"line-value\": {\n        pattern: /(^[\\t ]*\\d+ +(?:@\\w[\\w!\"$%&'()*+,\\-./:;<=>?[\\\\\\]^`{|}~\\x80-\\xfe #]*@ +)?\\w+ ).+/m,\n        lookbehind: !0,\n        inside: {\n            pointer: {\n                pattern: /^@\\w[\\w!\"$%&'()*+,\\-./:;<=>?[\\\\\\]^`{|}~\\x80-\\xfe #]*@$/,\n                alias: \"variable\"\n            }\n        }\n    },\n    record: {\n        pattern: /(^[\\t ]*\\d+ +(?:@\\w[\\w!\"$%&'()*+,\\-./:;<=>?[\\\\\\]^`{|}~\\x80-\\xfe #]*@ +)?)\\w+/m,\n        lookbehind: !0,\n        alias: \"tag\"\n    },\n    level: {\n        pattern: /(^[\\t ]*)\\d+/m,\n        lookbehind: !0,\n        alias: \"number\"\n    },\n    pointer: {\n        pattern: /@\\w[\\w!\"$%&'()*+,\\-./:;<=>?[\\\\\\]^`{|}~\\x80-\\xfe #]*@/,\n        alias: \"variable\"\n    }\n};\nPrism.languages.gettext = {\n    comment: [\n        {\n            pattern: /# .*/,\n            greedy: !0,\n            alias: \"translator-comment\"\n        },\n        {\n            pattern: /#\\..*/,\n            greedy: !0,\n            alias: \"extracted-comment\"\n        },\n        {\n            pattern: /#:.*/,\n            greedy: !0,\n            alias: \"reference-comment\"\n        },\n        {\n            pattern: /#,.*/,\n            greedy: !0,\n            alias: \"flag-comment\"\n        },\n        {\n            pattern: /#\\|.*/,\n            greedy: !0,\n            alias: \"previously-untranslated-comment\"\n        },\n        {\n            pattern: /#.*/,\n            greedy: !0\n        }\n    ],\n    string: {\n        pattern: /(^|[^\\\\])\"(?:[^\"\\\\]|\\\\.)*\"/,\n        lookbehind: !0,\n        greedy: !0\n    },\n    keyword: /^msg(?:ctxt|id|id_plural|str)\\b/m,\n    number: /\\b\\d+\\b/,\n    punctuation: /[\\[\\]]/\n}, Prism.languages.po = Prism.languages.gettext;\n!function(a) {\n    var n = \"(?:\\r?\\n|\\r)[ \t]*\\\\|.+\\\\|(?:(?!\\\\|).)*\";\n    a.languages.gherkin = {\n        pystring: {\n            pattern: /(\"\"\"|''')[\\s\\S]+?\\1/,\n            alias: \"string\"\n        },\n        comment: {\n            pattern: /(^[ \\t]*)#.*/m,\n            lookbehind: !0\n        },\n        tag: {\n            pattern: /(^[ \\t]*)@\\S*/m,\n            lookbehind: !0\n        },\n        feature: {\n            pattern: /((?:^|\\r?\\n|\\r)[ \\t]*)(?:Ability|Ahoy matey!|Arwedd|Aspekt|Besigheid Behoefte|Business Need|Caracteristica|Característica|Egenskab|Egenskap|Eiginleiki|Feature|Fīča|Fitur|Fonctionnalité|Fonksyonalite|Funcionalidade|Funcionalitat|Functionalitate|Funcţionalitate|Funcționalitate|Functionaliteit|Fungsi|Funkcia|Funkcija|Funkcionalitāte|Funkcionalnost|Funkcja|Funksie|Funktionalität|Funktionalitéit|Funzionalità|Hwaet|Hwæt|Jellemző|Karakteristik|Lastnost|Mak|Mogucnost|laH|Mogućnost|Moznosti|Možnosti|OH HAI|Omadus|Ominaisuus|Osobina|Özellik|Potrzeba biznesowa|perbogh|poQbogh malja'|Požadavek|Požiadavka|Pretty much|Qap|Qu'meH 'ut|Savybė|Tính năng|Trajto|Vermoë|Vlastnosť|Właściwość|Značilnost|Δυνατότητα|Λειτουργία|Могућност|Мөмкинлек|Особина|Свойство|Үзенчәлеклелек|Функционал|Функционалност|Функция|Функціонал|תכונה|خاصية|خصوصیت|صلاحیت|کاروبار کی ضرورت|وِیژگی|रूप लेख|ਖਾਸੀਅਤ|ਨਕਸ਼ ਨੁਹਾਰ|ਮੁਹਾਂਦਰਾ|గుణము|ಹೆಚ್ಚಳ|ความต้องการทางธุรกิจ|ความสามารถ|โครงหลัก|기능|フィーチャ|功能|機能):(?:[^:\\r\\n]+(?:\\r?\\n|\\r|$))*/,\n            lookbehind: !0,\n            inside: {\n                important: {\n                    pattern: /(:)[^\\r\\n]+/,\n                    lookbehind: !0\n                },\n                keyword: /[^:\\r\\n]+:/\n            }\n        },\n        scenario: {\n            pattern: /(^[ \\t]*)(?:Abstract Scenario|Abstrakt Scenario|Achtergrond|Aer|Ær|Agtergrond|All y'all|Antecedentes|Antecedents|Atburðarás|Atburðarásir|Awww, look mate|B4|Background|Baggrund|Bakgrund|Bakgrunn|Bakgrunnur|Beispiele|Beispiller|Bối cảnh|Cefndir|Cenario|Cenário|Cenario de Fundo|Cenário de Fundo|Cenarios|Cenários|Contesto|Context|Contexte|Contexto|Conto|Contoh|Contone|Dæmi|Dasar|Dead men tell no tales|Delineacao do Cenario|Delineação do Cenário|Dis is what went down|Dữ liệu|Dyagram Senaryo|Dyagram senaryo|Egzanp|Ejemplos|Eksempler|Ekzemploj|Enghreifftiau|Esbozo do escenario|Escenari|Escenario|Esempi|Esquema de l'escenari|Esquema del escenario|Esquema do Cenario|Esquema do Cenário|EXAMPLZ|Examples|Exempel|Exemple|Exemples|Exemplos|First off|Fono|Forgatókönyv|Forgatókönyv vázlat|Fundo|Geçmiş|Grundlage|Hannergrond|ghantoH|Háttér|Heave to|Istorik|Juhtumid|Keadaan|Khung kịch bản|Khung tình huống|Kịch bản|Koncept|Konsep skenario|Kontèks|Kontekst|Kontekstas|Konteksts|Kontext|Konturo de la scenaro|Latar Belakang|lut chovnatlh|lut|lutmey|Lýsing Atburðarásar|Lýsing Dæma|MISHUN SRSLY|MISHUN|Menggariskan Senario|mo'|Náčrt Scenára|Náčrt Scénáře|Náčrt Scenáru|Oris scenarija|Örnekler|Osnova|Osnova Scenára|Osnova scénáře|Osnutek|Ozadje|Paraugs|Pavyzdžiai|Példák|Piemēri|Plan du scénario|Plan du Scénario|Plan Senaryo|Plan senaryo|Plang vum Szenario|Pozadí|Pozadie|Pozadina|Príklady|Příklady|Primer|Primeri|Primjeri|Przykłady|Raamstsenaarium|Reckon it's like|Rerefons|Scenár|Scénář|Scenarie|Scenarij|Scenarijai|Scenarijaus šablonas|Scenariji|Scenārijs|Scenārijs pēc parauga|Scenarijus|Scenario|Scénario|Scenario Amlinellol|Scenario Outline|Scenario Template|Scenariomal|Scenariomall|Scenarios|Scenariu|Scenariusz|Scenaro|Schema dello scenario|Se ðe|Se the|Se þe|Senario|Senaryo Deskripsyon|Senaryo deskripsyon|Senaryo|Senaryo taslağı|Shiver me timbers|Situācija|Situai|Situasie Uiteensetting|Situasie|Skenario konsep|Skenario|Skica|Structura scenariu|Structură scenariu|Struktura scenarija|Stsenaarium|Swa hwaer swa|Swa|Swa hwær swa|Szablon scenariusza|Szenario|Szenariogrundriss|Tapaukset|Tapaus|Tapausaihio|Taust|Tausta|Template Keadaan|Template Senario|Template Situai|The thing of it is|Tình huống|Variantai|Voorbeelde|Voorbeelden|Wharrimean is|Yo-ho-ho|You'll wanna|Założenia|Παραδείγματα|Περιγραφή Σεναρίου|Σενάρια|Σενάριο|Υπόβαθρο|Кереш|Контекст|Концепт|Мисаллар|Мисоллар|Основа|Передумова|Позадина|Предистория|Предыстория|Приклади|Пример|Примери|Примеры|Рамка на сценарий|Скица|Структура сценарија|Структура сценария|Структура сценарію|Сценарий|Сценарий структураси|Сценарийның төзелеше|Сценарији|Сценарио|Сценарій|Тарих|Үрнәкләр|דוגמאות|רקע|תבנית תרחיש|תרחיש|الخلفية|الگوی سناریو|امثلة|پس منظر|زمینه|سناریو|سيناريو|سيناريو مخطط|مثالیں|منظر نامے کا خاکہ|منظرنامہ|نمونه ها|उदाहरण|परिदृश्य|परिदृश्य रूपरेखा|पृष्ठभूमि|ਉਦਾਹਰਨਾਂ|ਪਟਕਥਾ|ਪਟਕਥਾ ਢਾਂਚਾ|ਪਟਕਥਾ ਰੂਪ ਰੇਖਾ|ਪਿਛੋਕੜ|ఉదాహరణలు|కథనం|నేపథ్యం|సన్నివేశం|ಉದಾಹರಣೆಗಳು|ಕಥಾಸಾರಾಂಶ|ವಿವರಣೆ|ಹಿನ್ನೆಲೆ|โครงสร้างของเหตุการณ์|ชุดของตัวอย่าง|ชุดของเหตุการณ์|แนวคิด|สรุปเหตุการณ์|เหตุการณ์|배경|시나리오|시나리오 개요|예|サンプル|シナリオ|シナリオアウトライン|シナリオテンプレ|シナリオテンプレート|テンプレ|例|例子|剧本|剧本大纲|劇本|劇本大綱|场景|场景大纲|場景|場景大綱|背景):[^:\\r\\n]*/m,\n            lookbehind: !0,\n            inside: {\n                important: {\n                    pattern: /(:)[^\\r\\n]*/,\n                    lookbehind: !0\n                },\n                keyword: /[^:\\r\\n]+:/\n            }\n        },\n        \"table-body\": {\n            pattern: RegExp(\"(\" + n + \")(?:\" + n + \")+\"),\n            lookbehind: !0,\n            inside: {\n                outline: {\n                    pattern: /<[^>]+>/,\n                    alias: \"variable\"\n                },\n                td: {\n                    pattern: /\\s*[^\\s|][^|]*/,\n                    alias: \"string\"\n                },\n                punctuation: /\\|/\n            }\n        },\n        \"table-head\": {\n            pattern: RegExp(n),\n            inside: {\n                th: {\n                    pattern: /\\s*[^\\s|][^|]*/,\n                    alias: \"variable\"\n                },\n                punctuation: /\\|/\n            }\n        },\n        atrule: {\n            pattern: /(^[ \\t]+)(?:'a|'ach|'ej|7|a|A také|A taktiež|A tiež|A zároveň|Aber|Ac|Adott|Akkor|Ak|Aleshores|Ale|Ali|Allora|Alors|Als|Ama|Amennyiben|Amikor|Ampak|an|AN|Ananging|And y'all|And|Angenommen|Anrhegedig a|An|Apabila|Atès|Atesa|Atunci|Avast!|Aye|A|awer|Bagi|Banjur|Bet|Biết|Blimey!|Buh|But at the end of the day I reckon|But y'all|But|BUT|Cal|Când|Cand|Cando|Ce|Cuando|Če|Ða ðe|Ða|Dadas|Dada|Dados|Dado|DaH ghu' bejlu'|dann|Dann|Dano|Dan|Dar|Dat fiind|Data|Date fiind|Date|Dati fiind|Dati|Daţi fiind|Dați fiind|DEN|Dato|De|Den youse gotta|Dengan|Diberi|Diyelim ki|Donada|Donat|Donitaĵo|Do|Dun|Duota|Ðurh|Eeldades|Ef|Eğer ki|Entao|Então|Entón|E|En|Entonces|Epi|És|Etant donnée|Etant donné|Et|Étant données|Étant donnée|Étant donné|Etant données|Etant donnés|Étant donnés|Fakat|Gangway!|Gdy|Gegeben seien|Gegeben sei|Gegeven|Gegewe|ghu' noblu'|Gitt|Given y'all|Given|Givet|Givun|Ha|Cho|I CAN HAZ|In|Ir|It's just unbelievable|I|Ja|Jeśli|Jeżeli|Kad|Kada|Kadar|Kai|Kaj|Když|Keď|Kemudian|Ketika|Khi|Kiedy|Ko|Kuid|Kui|Kun|Lan|latlh|Le sa a|Let go and haul|Le|Lè sa a|Lè|Logo|Lorsqu'<|Lorsque|mä|Maar|Mais|Mając|Ma|Majd|Maka|Manawa|Mas|Men|Menawa|Mutta|Nalika|Nalikaning|Nanging|Når|När|Nato|Nhưng|Niin|Njuk|O zaman|Och|Og|Oletetaan|Ond|Onda|Oraz|Pak|Pero|Però|Podano|Pokiaľ|Pokud|Potem|Potom|Privzeto|Pryd|Quan|Quand|Quando|qaSDI'|Så|Sed|Se|Siis|Sipoze ke|Sipoze Ke|Sipoze|Si|Şi|Și|Soit|Stel|Tada|Tad|Takrat|Tak|Tapi|Ter|Tetapi|Tha the|Tha|Then y'all|Then|Thì|Thurh|Toda|Too right|Un|Und|ugeholl|Và|vaj|Vendar|Ve|wann|Wanneer|WEN|Wenn|When y'all|When|Wtedy|Wun|Y'know|Yeah nah|Yna|Youse know like when|Youse know when youse got|Y|Za predpokladu|Za předpokladu|Zadan|Zadani|Zadano|Zadate|Zadato|Zakładając|Zaradi|Zatati|Þa þe|Þa|Þá|Þegar|Þurh|Αλλά|Δεδομένου|Και|Όταν|Τότε|А також|Агар|Але|Али|Аммо|А|Әгәр|Әйтик|Әмма|Бирок|Ва|Вә|Дадено|Дано|Допустим|Если|Задате|Задати|Задато|И|І|К тому же|Када|Кад|Когато|Когда|Коли|Ләкин|Лекин|Нәтиҗәдә|Нехай|Но|Онда|Припустимо, що|Припустимо|Пусть|Также|Та|Тогда|Тоді|То|Унда|Һәм|Якщо|אבל|אזי|אז|בהינתן|וגם|כאשר|آنگاه|اذاً|اگر|اما|اور|با فرض|بالفرض|بفرض|پھر|تب|ثم|جب|عندما|فرض کیا|لكن|لیکن|متى|هنگامی|و|अगर|और|कदा|किन्तु|चूंकि|जब|तथा|तदा|तब|परन्तु|पर|यदि|ਅਤੇ|ਜਦੋਂ|ਜਿਵੇਂ ਕਿ|ਜੇਕਰ|ਤਦ|ਪਰ|అప్పుడు|ఈ పరిస్థితిలో|కాని|చెప్పబడినది|మరియు|ಆದರೆ|ನಂತರ|ನೀಡಿದ|ಮತ್ತು|ಸ್ಥಿತಿಯನ್ನು|กำหนดให้|ดังนั้น|แต่|เมื่อ|และ|그러면<|그리고<|단<|만약<|만일<|먼저<|조건<|하지만<|かつ<|しかし<|ただし<|ならば<|もし<|並且<|但し<|但是<|假如<|假定<|假設<|假设<|前提<|同时<|同時<|并且<|当<|當<|而且<|那么<|那麼<)(?=[ \\t])/m,\n            lookbehind: !0\n        },\n        string: {\n            pattern: /\"(?:\\\\.|[^\"\\\\\\r\\n])*\"|'(?:\\\\.|[^'\\\\\\r\\n])*'/,\n            inside: {\n                outline: {\n                    pattern: /<[^>]+>/,\n                    alias: \"variable\"\n                }\n            }\n        },\n        outline: {\n            pattern: /<[^>]+>/,\n            alias: \"variable\"\n        }\n    };\n}(Prism);\nPrism.languages.git = {\n    comment: /^#.*/m,\n    deleted: /^[-–].*/m,\n    inserted: /^\\+.*/m,\n    string: /(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    command: {\n        pattern: /^.*\\$ git .*$/m,\n        inside: {\n            parameter: /\\s--?\\w+/\n        }\n    },\n    coord: /^@@.*@@$/m,\n    \"commit-sha1\": /^commit \\w{40}$/m\n};\nPrism.languages.glsl = Prism.languages.extend(\"c\", {\n    keyword: /\\b(?:active|asm|atomic_uint|attribute|[ibdu]?vec[234]|bool|break|buffer|case|cast|centroid|class|coherent|common|const|continue|d?mat[234](?:x[234])?|default|discard|do|double|else|enum|extern|external|false|filter|fixed|flat|float|for|fvec[234]|goto|half|highp|hvec[234]|[iu]?sampler2DMS(?:Array)?|[iu]?sampler2DRect|[iu]?samplerBuffer|[iu]?samplerCube|[iu]?samplerCubeArray|[iu]?sampler[123]D|[iu]?sampler[12]DArray|[iu]?image2DMS(?:Array)?|[iu]?image2DRect|[iu]?imageBuffer|[iu]?imageCube|[iu]?imageCubeArray|[iu]?image[123]D|[iu]?image[12]DArray|if|in|inline|inout|input|int|interface|invariant|layout|long|lowp|mediump|namespace|noinline|noperspective|out|output|partition|patch|precise|precision|public|readonly|resource|restrict|return|sample|sampler[12]DArrayShadow|sampler[12]DShadow|sampler2DRectShadow|sampler3DRect|samplerCubeArrayShadow|samplerCubeShadow|shared|short|sizeof|smooth|static|struct|subroutine|superp|switch|template|this|true|typedef|uint|uniform|union|unsigned|using|varying|void|volatile|while|writeonly)\\b/\n});\nPrism.languages.gn = {\n    comment: {\n        pattern: /#.*/,\n        greedy: !0\n    },\n    \"string-literal\": {\n        pattern: /(^|[^\\\\\"])\"(?:[^\\r\\n\"\\\\]|\\\\.)*\"/,\n        lookbehind: !0,\n        greedy: !0,\n        inside: {\n            interpolation: {\n                pattern: /((?:^|[^\\\\])(?:\\\\{2})*)\\$(?:\\{[\\s\\S]*?\\}|[a-zA-Z_]\\w*|0x[a-fA-F0-9]{2})/,\n                lookbehind: !0,\n                inside: {\n                    number: /^\\$0x[\\s\\S]{2}$/,\n                    variable: /^\\$\\w+$/,\n                    \"interpolation-punctuation\": {\n                        pattern: /^\\$\\{|\\}$/,\n                        alias: \"punctuation\"\n                    },\n                    expression: {\n                        pattern: /[\\s\\S]+/,\n                        inside: null\n                    }\n                }\n            },\n            string: /[\\s\\S]+/\n        }\n    },\n    keyword: /\\b(?:else|if)\\b/,\n    boolean: /\\b(?:false|true)\\b/,\n    \"builtin-function\": {\n        pattern: /\\b(?:assert|defined|foreach|import|pool|print|template|tool|toolchain)(?=\\s*\\()/i,\n        alias: \"keyword\"\n    },\n    function: /\\b[a-z_]\\w*(?=\\s*\\()/i,\n    constant: /\\b(?:current_cpu|current_os|current_toolchain|default_toolchain|host_cpu|host_os|root_build_dir|root_gen_dir|root_out_dir|target_cpu|target_gen_dir|target_os|target_out_dir)\\b/,\n    number: /-?\\b\\d+\\b/,\n    operator: /[-+!=<>]=?|&&|\\|\\|/,\n    punctuation: /[(){}[\\],.]/\n}, Prism.languages.gn[\"string-literal\"].inside.interpolation.inside.expression.inside = Prism.languages.gn, Prism.languages.gni = Prism.languages.gn;\nPrism.languages[\"linker-script\"] = {\n    comment: {\n        pattern: /(^|\\s)\\/\\*[\\s\\S]*?(?:$|\\*\\/)/,\n        lookbehind: !0,\n        greedy: !0\n    },\n    identifier: {\n        pattern: /\"[^\"\\r\\n]*\"/,\n        greedy: !0\n    },\n    \"location-counter\": {\n        pattern: /\\B\\.\\B/,\n        alias: \"important\"\n    },\n    section: {\n        pattern: /(^|[^\\w*])\\.\\w+\\b/,\n        lookbehind: !0,\n        alias: \"keyword\"\n    },\n    function: /\\b[A-Z][A-Z_]*(?=\\s*\\()/,\n    number: /\\b(?:0[xX][a-fA-F0-9]+|\\d+)[KM]?\\b/,\n    operator: />>=?|<<=?|->|\\+\\+|--|&&|\\|\\||::|[?:~]|[-+*/%&|^!=<>]=?/,\n    punctuation: /[(){},;]/\n}, Prism.languages.ld = Prism.languages[\"linker-script\"];\nPrism.languages.go = Prism.languages.extend(\"clike\", {\n    string: {\n        pattern: /(^|[^\\\\])\"(?:\\\\.|[^\"\\\\\\r\\n])*\"|`[^`]*`/,\n        lookbehind: !0,\n        greedy: !0\n    },\n    keyword: /\\b(?:break|case|chan|const|continue|default|defer|else|fallthrough|for|func|go(?:to)?|if|import|interface|map|package|range|return|select|struct|switch|type|var)\\b/,\n    boolean: /\\b(?:_|false|iota|nil|true)\\b/,\n    number: [\n        /\\b0(?:b[01_]+|o[0-7_]+)i?\\b/i,\n        /\\b0x(?:[a-f\\d_]+(?:\\.[a-f\\d_]*)?|\\.[a-f\\d_]+)(?:p[+-]?\\d+(?:_\\d+)*)?i?(?!\\w)/i,\n        /(?:\\b\\d[\\d_]*(?:\\.[\\d_]*)?|\\B\\.\\d[\\d_]*)(?:e[+-]?[\\d_]+)?i?(?!\\w)/i\n    ],\n    operator: /[*\\/%^!=]=?|\\+[=+]?|-[=-]?|\\|[=|]?|&(?:=|&|\\^=?)?|>(?:>=?|=)?|<(?:<=?|=|-)?|:=|\\.\\.\\./,\n    builtin: /\\b(?:append|bool|byte|cap|close|complex|complex(?:64|128)|copy|delete|error|float(?:32|64)|u?int(?:8|16|32|64)?|imag|len|make|new|panic|print(?:ln)?|real|recover|rune|string|uintptr)\\b/\n}), Prism.languages.insertBefore(\"go\", \"string\", {\n    char: {\n        pattern: /'(?:\\\\.|[^'\\\\\\r\\n]){0,10}'/,\n        greedy: !0\n    }\n}), delete Prism.languages.go[\"class-name\"];\nPrism.languages[\"go-mod\"] = Prism.languages[\"go-module\"] = {\n    comment: {\n        pattern: /\\/\\/.*/,\n        greedy: !0\n    },\n    version: {\n        pattern: /(^|[\\s()[\\],])v\\d+\\.\\d+\\.\\d+(?:[+-][-+.\\w]*)?(?![^\\s()[\\],])/,\n        lookbehind: !0,\n        alias: \"number\"\n    },\n    \"go-version\": {\n        pattern: /((?:^|\\s)go\\s+)\\d+(?:\\.\\d+){1,2}/,\n        lookbehind: !0,\n        alias: \"number\"\n    },\n    keyword: {\n        pattern: /^([ \\t]*)(?:exclude|go|module|replace|require|retract)\\b/m,\n        lookbehind: !0\n    },\n    operator: /=>/,\n    punctuation: /[()[\\],]/\n};\n!function(e) {\n    var n = {\n        pattern: /((?:^|[^\\\\$])(?:\\\\{2})*)\\$(?:\\w+|\\{[^{}]*\\})/,\n        lookbehind: !0,\n        inside: {\n            \"interpolation-punctuation\": {\n                pattern: /^\\$\\{?|\\}$/,\n                alias: \"punctuation\"\n            },\n            expression: {\n                pattern: /[\\s\\S]+/,\n                inside: null\n            }\n        }\n    };\n    e.languages.gradle = e.languages.extend(\"clike\", {\n        string: {\n            pattern: /'''(?:[^\\\\]|\\\\[\\s\\S])*?'''|'(?:\\\\.|[^\\\\'\\r\\n])*'/,\n            greedy: !0\n        },\n        keyword: /\\b(?:apply|def|dependencies|else|if|implementation|import|plugin|plugins|project|repositories|repository|sourceSets|tasks|val)\\b/,\n        number: /\\b(?:0b[01_]+|0x[\\da-f_]+(?:\\.[\\da-f_p\\-]+)?|[\\d_]+(?:\\.[\\d_]+)?(?:e[+-]?\\d+)?)[glidf]?\\b/i,\n        operator: {\n            pattern: /(^|[^.])(?:~|==?~?|\\?[.:]?|\\*(?:[.=]|\\*=?)?|\\.[@&]|\\.\\.<|\\.\\.(?!\\.)|-[-=>]?|\\+[+=]?|!=?|<(?:<=?|=>?)?|>(?:>>?=?|=)?|&[&=]?|\\|[|=]?|\\/=?|\\^=?|%=?)/,\n            lookbehind: !0\n        },\n        punctuation: /\\.+|[{}[\\];(),:$]/\n    }), e.languages.insertBefore(\"gradle\", \"string\", {\n        shebang: {\n            pattern: /#!.+/,\n            alias: \"comment\",\n            greedy: !0\n        },\n        \"interpolation-string\": {\n            pattern: /\"\"\"(?:[^\\\\]|\\\\[\\s\\S])*?\"\"\"|([\"/])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1|\\$\\/(?:[^/$]|\\$(?:[/$]|(?![/$]))|\\/(?!\\$))*\\/\\$/,\n            greedy: !0,\n            inside: {\n                interpolation: n,\n                string: /[\\s\\S]+/\n            }\n        }\n    }), e.languages.insertBefore(\"gradle\", \"punctuation\", {\n        \"spock-block\": /\\b(?:and|cleanup|expect|given|setup|then|when|where):/\n    }), e.languages.insertBefore(\"gradle\", \"function\", {\n        annotation: {\n            pattern: /(^|[^.])@\\w+/,\n            lookbehind: !0,\n            alias: \"punctuation\"\n        }\n    }), n.inside.expression.inside = e.languages.gradle;\n}(Prism);\nPrism.languages.graphql = {\n    comment: /#.*/,\n    description: {\n        pattern: /(?:\"\"\"(?:[^\"]|(?!\"\"\")\")*\"\"\"|\"(?:\\\\.|[^\\\\\"\\r\\n])*\")(?=\\s*[a-z_])/i,\n        greedy: !0,\n        alias: \"string\",\n        inside: {\n            \"language-markdown\": {\n                pattern: /(^\"(?:\"\")?)(?!\\1)[\\s\\S]+(?=\\1$)/,\n                lookbehind: !0,\n                inside: Prism.languages.markdown\n            }\n        }\n    },\n    string: {\n        pattern: /\"\"\"(?:[^\"]|(?!\"\"\")\")*\"\"\"|\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/,\n        greedy: !0\n    },\n    number: /(?:\\B-|\\b)\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?\\b/i,\n    boolean: /\\b(?:false|true)\\b/,\n    variable: /\\$[a-z_]\\w*/i,\n    directive: {\n        pattern: /@[a-z_]\\w*/i,\n        alias: \"function\"\n    },\n    \"attr-name\": {\n        pattern: /\\b[a-z_]\\w*(?=\\s*(?:\\((?:[^()\"]|\"(?:\\\\.|[^\\\\\"\\r\\n])*\")*\\))?:)/i,\n        greedy: !0\n    },\n    \"atom-input\": {\n        pattern: /\\b[A-Z]\\w*Input\\b/,\n        alias: \"class-name\"\n    },\n    scalar: /\\b(?:Boolean|Float|ID|Int|String)\\b/,\n    constant: /\\b[A-Z][A-Z_\\d]*\\b/,\n    \"class-name\": {\n        pattern: /(\\b(?:enum|implements|interface|on|scalar|type|union)\\s+|&\\s*|:\\s*|\\[)[A-Z_]\\w*/,\n        lookbehind: !0\n    },\n    fragment: {\n        pattern: /(\\bfragment\\s+|\\.{3}\\s*(?!on\\b))[a-zA-Z_]\\w*/,\n        lookbehind: !0,\n        alias: \"function\"\n    },\n    \"definition-mutation\": {\n        pattern: /(\\bmutation\\s+)[a-zA-Z_]\\w*/,\n        lookbehind: !0,\n        alias: \"function\"\n    },\n    \"definition-query\": {\n        pattern: /(\\bquery\\s+)[a-zA-Z_]\\w*/,\n        lookbehind: !0,\n        alias: \"function\"\n    },\n    keyword: /\\b(?:directive|enum|extend|fragment|implements|input|interface|mutation|on|query|repeatable|scalar|schema|subscription|type|union)\\b/,\n    operator: /[!=|&]|\\.{3}/,\n    \"property-query\": /\\w+(?=\\s*\\()/,\n    object: /\\w+(?=\\s*\\{)/,\n    punctuation: /[!(){}\\[\\]:=,]/,\n    property: /\\w+/\n}, Prism.hooks.add(\"after-tokenize\", function(n) {\n    if (\"graphql\" === n.language) for(var t = n.tokens.filter(function(n) {\n        return \"string\" != typeof n && \"comment\" !== n.type && \"scalar\" !== n.type;\n    }), e = 0; e < t.length;){\n        var a = t[e++];\n        if (\"keyword\" === a.type && \"mutation\" === a.content) {\n            var r = [];\n            if (c([\n                \"definition-mutation\",\n                \"punctuation\"\n            ]) && \"(\" === l(1).content) {\n                e += 2;\n                var i = f(/^\\($/, /^\\)$/);\n                if (-1 === i) continue;\n                for(; e < i; e++){\n                    var o = l(0);\n                    \"variable\" === o.type && (b(o, \"variable-input\"), r.push(o.content));\n                }\n                e = i + 1;\n            }\n            if (c([\n                \"punctuation\",\n                \"property-query\"\n            ]) && \"{\" === l(0).content && (e++, b(l(0), \"property-mutation\"), r.length > 0)) {\n                var s = f(/^\\{$/, /^\\}$/);\n                if (-1 === s) continue;\n                for(var u = e; u < s; u++){\n                    var p = t[u];\n                    \"variable\" === p.type && r.indexOf(p.content) >= 0 && b(p, \"variable-input\");\n                }\n            }\n        }\n    }\n    function l(n) {\n        return t[e + n];\n    }\n    function c(n, t) {\n        t = t || 0;\n        for(var e = 0; e < n.length; e++){\n            var a = l(e + t);\n            if (!a || a.type !== n[e]) return !1;\n        }\n        return !0;\n    }\n    function f(n, a) {\n        for(var r = 1, i = e; i < t.length; i++){\n            var o = t[i], s = o.content;\n            if (\"punctuation\" === o.type && \"string\" == typeof s) {\n                if (n.test(s)) r++;\n                else if (a.test(s) && 0 == --r) return i;\n            }\n        }\n        return -1;\n    }\n    function b(n, t) {\n        var e = n.alias;\n        e ? Array.isArray(e) || (n.alias = e = [\n            e\n        ]) : n.alias = e = [], e.push(t);\n    }\n});\n!function(e) {\n    var n = {\n        pattern: /((?:^|[^\\\\$])(?:\\\\{2})*)\\$(?:\\w+|\\{[^{}]*\\})/,\n        lookbehind: !0,\n        inside: {\n            \"interpolation-punctuation\": {\n                pattern: /^\\$\\{?|\\}$/,\n                alias: \"punctuation\"\n            },\n            expression: {\n                pattern: /[\\s\\S]+/,\n                inside: null\n            }\n        }\n    };\n    e.languages.groovy = e.languages.extend(\"clike\", {\n        string: {\n            pattern: /'''(?:[^\\\\]|\\\\[\\s\\S])*?'''|'(?:\\\\.|[^\\\\'\\r\\n])*'/,\n            greedy: !0\n        },\n        keyword: /\\b(?:abstract|as|assert|boolean|break|byte|case|catch|char|class|const|continue|def|default|do|double|else|enum|extends|final|finally|float|for|goto|if|implements|import|in|instanceof|int|interface|long|native|new|package|private|protected|public|return|short|static|strictfp|super|switch|synchronized|this|throw|throws|trait|transient|try|void|volatile|while)\\b/,\n        number: /\\b(?:0b[01_]+|0x[\\da-f_]+(?:\\.[\\da-f_p\\-]+)?|[\\d_]+(?:\\.[\\d_]+)?(?:e[+-]?\\d+)?)[glidf]?\\b/i,\n        operator: {\n            pattern: /(^|[^.])(?:~|==?~?|\\?[.:]?|\\*(?:[.=]|\\*=?)?|\\.[@&]|\\.\\.<|\\.\\.(?!\\.)|-[-=>]?|\\+[+=]?|!=?|<(?:<=?|=>?)?|>(?:>>?=?|=)?|&[&=]?|\\|[|=]?|\\/=?|\\^=?|%=?)/,\n            lookbehind: !0\n        },\n        punctuation: /\\.+|[{}[\\];(),:$]/\n    }), e.languages.insertBefore(\"groovy\", \"string\", {\n        shebang: {\n            pattern: /#!.+/,\n            alias: \"comment\",\n            greedy: !0\n        },\n        \"interpolation-string\": {\n            pattern: /\"\"\"(?:[^\\\\]|\\\\[\\s\\S])*?\"\"\"|([\"/])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1|\\$\\/(?:[^/$]|\\$(?:[/$]|(?![/$]))|\\/(?!\\$))*\\/\\$/,\n            greedy: !0,\n            inside: {\n                interpolation: n,\n                string: /[\\s\\S]+/\n            }\n        }\n    }), e.languages.insertBefore(\"groovy\", \"punctuation\", {\n        \"spock-block\": /\\b(?:and|cleanup|expect|given|setup|then|when|where):/\n    }), e.languages.insertBefore(\"groovy\", \"function\", {\n        annotation: {\n            pattern: /(^|[^.])@\\w+/,\n            lookbehind: !0,\n            alias: \"punctuation\"\n        }\n    }), n.inside.expression.inside = e.languages.groovy;\n}(Prism);\n!function(n) {\n    n.languages.haml = {\n        \"multiline-comment\": {\n            pattern: /((?:^|\\r?\\n|\\r)([\\t ]*))(?:\\/|-#).*(?:(?:\\r?\\n|\\r)\\2[\\t ].+)*/,\n            lookbehind: !0,\n            alias: \"comment\"\n        },\n        \"multiline-code\": [\n            {\n                pattern: /((?:^|\\r?\\n|\\r)([\\t ]*)(?:[~-]|[&!]?=)).*,[\\t ]*(?:(?:\\r?\\n|\\r)\\2[\\t ].*,[\\t ]*)*(?:(?:\\r?\\n|\\r)\\2[\\t ].+)/,\n                lookbehind: !0,\n                inside: n.languages.ruby\n            },\n            {\n                pattern: /((?:^|\\r?\\n|\\r)([\\t ]*)(?:[~-]|[&!]?=)).*\\|[\\t ]*(?:(?:\\r?\\n|\\r)\\2[\\t ].*\\|[\\t ]*)*/,\n                lookbehind: !0,\n                inside: n.languages.ruby\n            }\n        ],\n        filter: {\n            pattern: /((?:^|\\r?\\n|\\r)([\\t ]*)):[\\w-]+(?:(?:\\r?\\n|\\r)(?:\\2[\\t ].+|\\s*?(?=\\r?\\n|\\r)))+/,\n            lookbehind: !0,\n            inside: {\n                \"filter-name\": {\n                    pattern: /^:[\\w-]+/,\n                    alias: \"symbol\"\n                }\n            }\n        },\n        markup: {\n            pattern: /((?:^|\\r?\\n|\\r)[\\t ]*)<.+/,\n            lookbehind: !0,\n            inside: n.languages.markup\n        },\n        doctype: {\n            pattern: /((?:^|\\r?\\n|\\r)[\\t ]*)!!!(?: .+)?/,\n            lookbehind: !0\n        },\n        tag: {\n            pattern: /((?:^|\\r?\\n|\\r)[\\t ]*)[%.#][\\w\\-#.]*[\\w\\-](?:\\([^)]+\\)|\\{(?:\\{[^}]+\\}|[^{}])+\\}|\\[[^\\]]+\\])*[\\/<>]*/,\n            lookbehind: !0,\n            inside: {\n                attributes: [\n                    {\n                        pattern: /(^|[^#])\\{(?:\\{[^}]+\\}|[^{}])+\\}/,\n                        lookbehind: !0,\n                        inside: n.languages.ruby\n                    },\n                    {\n                        pattern: /\\([^)]+\\)/,\n                        inside: {\n                            \"attr-value\": {\n                                pattern: /(=\\s*)(?:\"(?:\\\\.|[^\\\\\"\\r\\n])*\"|[^)\\s]+)/,\n                                lookbehind: !0\n                            },\n                            \"attr-name\": /[\\w:-]+(?=\\s*!?=|\\s*[,)])/,\n                            punctuation: /[=(),]/\n                        }\n                    },\n                    {\n                        pattern: /\\[[^\\]]+\\]/,\n                        inside: n.languages.ruby\n                    }\n                ],\n                punctuation: /[<>]/\n            }\n        },\n        code: {\n            pattern: /((?:^|\\r?\\n|\\r)[\\t ]*(?:[~-]|[&!]?=)).+/,\n            lookbehind: !0,\n            inside: n.languages.ruby\n        },\n        interpolation: {\n            pattern: /#\\{[^}]+\\}/,\n            inside: {\n                delimiter: {\n                    pattern: /^#\\{|\\}$/,\n                    alias: \"punctuation\"\n                },\n                ruby: {\n                    pattern: /[\\s\\S]+/,\n                    inside: n.languages.ruby\n                }\n            }\n        },\n        punctuation: {\n            pattern: /((?:^|\\r?\\n|\\r)[\\t ]*)[~=\\-&!]+/,\n            lookbehind: !0\n        }\n    };\n    for(var e = [\n        \"css\",\n        {\n            filter: \"coffee\",\n            language: \"coffeescript\"\n        },\n        \"erb\",\n        \"javascript\",\n        \"less\",\n        \"markdown\",\n        \"ruby\",\n        \"scss\",\n        \"textile\"\n    ], t = {}, r = 0, a = e.length; r < a; r++){\n        var i = e[r];\n        i = \"string\" == typeof i ? {\n            filter: i,\n            language: i\n        } : i, n.languages[i.language] && (t[\"filter-\" + i.filter] = {\n            pattern: RegExp(\"((?:^|\\\\r?\\\\n|\\\\r)([\\\\t ]*)):{{filter_name}}(?:(?:\\\\r?\\\\n|\\\\r)(?:\\\\2[\\\\t ].+|\\\\s*?(?=\\\\r?\\\\n|\\\\r)))+\".replace(\"{{filter_name}}\", function() {\n                return i.filter;\n            })),\n            lookbehind: !0,\n            inside: {\n                \"filter-name\": {\n                    pattern: /^:[\\w-]+/,\n                    alias: \"symbol\"\n                },\n                text: {\n                    pattern: /[\\s\\S]+/,\n                    alias: [\n                        i.language,\n                        \"language-\" + i.language\n                    ],\n                    inside: n.languages[i.language]\n                }\n            }\n        });\n    }\n    n.languages.insertBefore(\"haml\", \"filter\", t);\n}(Prism);\n!function(a) {\n    a.languages.handlebars = {\n        comment: /\\{\\{![\\s\\S]*?\\}\\}/,\n        delimiter: {\n            pattern: /^\\{\\{\\{?|\\}\\}\\}?$/,\n            alias: \"punctuation\"\n        },\n        string: /([\"'])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n        number: /\\b0x[\\dA-Fa-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[Ee][+-]?\\d+)?/,\n        boolean: /\\b(?:false|true)\\b/,\n        block: {\n            pattern: /^(\\s*(?:~\\s*)?)[#\\/]\\S+?(?=\\s*(?:~\\s*)?$|\\s)/,\n            lookbehind: !0,\n            alias: \"keyword\"\n        },\n        brackets: {\n            pattern: /\\[[^\\]]+\\]/,\n            inside: {\n                punctuation: /\\[|\\]/,\n                variable: /[\\s\\S]+/\n            }\n        },\n        punctuation: /[!\"#%&':()*+,.\\/;<=>@\\[\\\\\\]^`{|}~]/,\n        variable: /[^!\"#%&'()*+,\\/;<=>@\\[\\\\\\]^`{|}~\\s]+/\n    }, a.hooks.add(\"before-tokenize\", function(e) {\n        a.languages[\"markup-templating\"].buildPlaceholders(e, \"handlebars\", /\\{\\{\\{[\\s\\S]+?\\}\\}\\}|\\{\\{[\\s\\S]+?\\}\\}/g);\n    }), a.hooks.add(\"after-tokenize\", function(e) {\n        a.languages[\"markup-templating\"].tokenizePlaceholders(e, \"handlebars\");\n    }), a.languages.hbs = a.languages.handlebars, a.languages.mustache = a.languages.handlebars;\n}(Prism);\nPrism.languages.haskell = {\n    comment: {\n        pattern: /(^|[^-!#$%*+=?&@|~.:<>^\\\\\\/])(?:--(?:(?=.)[^-!#$%*+=?&@|~.:<>^\\\\\\/].*|$)|\\{-[\\s\\S]*?-\\})/m,\n        lookbehind: !0\n    },\n    char: {\n        pattern: /'(?:[^\\\\']|\\\\(?:[abfnrtv\\\\\"'&]|\\^[A-Z@[\\]^_]|ACK|BEL|BS|CAN|CR|DC1|DC2|DC3|DC4|DEL|DLE|EM|ENQ|EOT|ESC|ETB|ETX|FF|FS|GS|HT|LF|NAK|NUL|RS|SI|SO|SOH|SP|STX|SUB|SYN|US|VT|\\d+|o[0-7]+|x[0-9a-fA-F]+))'/,\n        alias: \"string\"\n    },\n    string: {\n        pattern: /\"(?:[^\\\\\"]|\\\\(?:\\S|\\s+\\\\))*\"/,\n        greedy: !0\n    },\n    keyword: /\\b(?:case|class|data|deriving|do|else|if|in|infixl|infixr|instance|let|module|newtype|of|primitive|then|type|where)\\b/,\n    \"import-statement\": {\n        pattern: /(^[\\t ]*)import\\s+(?:qualified\\s+)?(?:[A-Z][\\w']*)(?:\\.[A-Z][\\w']*)*(?:\\s+as\\s+(?:[A-Z][\\w']*)(?:\\.[A-Z][\\w']*)*)?(?:\\s+hiding\\b)?/m,\n        lookbehind: !0,\n        inside: {\n            keyword: /\\b(?:as|hiding|import|qualified)\\b/,\n            punctuation: /\\./\n        }\n    },\n    builtin: /\\b(?:abs|acos|acosh|all|and|any|appendFile|approxRational|asTypeOf|asin|asinh|atan|atan2|atanh|basicIORun|break|catch|ceiling|chr|compare|concat|concatMap|const|cos|cosh|curry|cycle|decodeFloat|denominator|digitToInt|div|divMod|drop|dropWhile|either|elem|encodeFloat|enumFrom|enumFromThen|enumFromThenTo|enumFromTo|error|even|exp|exponent|fail|filter|flip|floatDigits|floatRadix|floatRange|floor|fmap|foldl|foldl1|foldr|foldr1|fromDouble|fromEnum|fromInt|fromInteger|fromIntegral|fromRational|fst|gcd|getChar|getContents|getLine|group|head|id|inRange|index|init|intToDigit|interact|ioError|isAlpha|isAlphaNum|isAscii|isControl|isDenormalized|isDigit|isHexDigit|isIEEE|isInfinite|isLower|isNaN|isNegativeZero|isOctDigit|isPrint|isSpace|isUpper|iterate|last|lcm|length|lex|lexDigits|lexLitChar|lines|log|logBase|lookup|map|mapM|mapM_|max|maxBound|maximum|maybe|min|minBound|minimum|mod|negate|not|notElem|null|numerator|odd|or|ord|otherwise|pack|pi|pred|primExitWith|print|product|properFraction|putChar|putStr|putStrLn|quot|quotRem|range|rangeSize|read|readDec|readFile|readFloat|readHex|readIO|readInt|readList|readLitChar|readLn|readOct|readParen|readSigned|reads|readsPrec|realToFrac|recip|rem|repeat|replicate|return|reverse|round|scaleFloat|scanl|scanl1|scanr|scanr1|seq|sequence|sequence_|show|showChar|showInt|showList|showLitChar|showParen|showSigned|showString|shows|showsPrec|significand|signum|sin|sinh|snd|sort|span|splitAt|sqrt|subtract|succ|sum|tail|take|takeWhile|tan|tanh|threadToIOResult|toEnum|toInt|toInteger|toLower|toRational|toUpper|truncate|uncurry|undefined|unlines|until|unwords|unzip|unzip3|userError|words|writeFile|zip|zip3|zipWith|zipWith3)\\b/,\n    number: /\\b(?:\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?|0o[0-7]+|0x[0-9a-f]+)\\b/i,\n    operator: [\n        {\n            pattern: /`(?:[A-Z][\\w']*\\.)*[_a-z][\\w']*`/,\n            greedy: !0\n        },\n        {\n            pattern: /(\\s)\\.(?=\\s)/,\n            lookbehind: !0\n        },\n        /[-!#$%*+=?&@|~:<>^\\\\\\/][-!#$%*+=?&@|~.:<>^\\\\\\/]*|\\.[-!#$%*+=?&@|~.:<>^\\\\\\/]+/\n    ],\n    hvariable: {\n        pattern: /\\b(?:[A-Z][\\w']*\\.)*[_a-z][\\w']*/,\n        inside: {\n            punctuation: /\\./\n        }\n    },\n    constant: {\n        pattern: /\\b(?:[A-Z][\\w']*\\.)*[A-Z][\\w']*/,\n        inside: {\n            punctuation: /\\./\n        }\n    },\n    punctuation: /[{}[\\];(),.:]/\n}, Prism.languages.hs = Prism.languages.haskell;\nPrism.languages.haxe = Prism.languages.extend(\"clike\", {\n    string: {\n        pattern: /\"(?:[^\"\\\\]|\\\\[\\s\\S])*\"/,\n        greedy: !0\n    },\n    \"class-name\": [\n        {\n            pattern: /(\\b(?:abstract|class|enum|extends|implements|interface|new|typedef)\\s+)[A-Z_]\\w*/,\n            lookbehind: !0\n        },\n        /\\b[A-Z]\\w*/\n    ],\n    keyword: /\\bthis\\b|\\b(?:abstract|as|break|case|cast|catch|class|continue|default|do|dynamic|else|enum|extends|extern|final|for|from|function|if|implements|import|in|inline|interface|macro|new|null|operator|overload|override|package|private|public|return|static|super|switch|throw|to|try|typedef|untyped|using|var|while)(?!\\.)\\b/,\n    function: {\n        pattern: /\\b[a-z_]\\w*(?=\\s*(?:<[^<>]*>\\s*)?\\()/i,\n        greedy: !0\n    },\n    operator: /\\.{3}|\\+\\+|--|&&|\\|\\||->|=>|(?:<<?|>{1,3}|[-+*/%!=&|^])=?|[?:~]/\n}), Prism.languages.insertBefore(\"haxe\", \"string\", {\n    \"string-interpolation\": {\n        pattern: /'(?:[^'\\\\]|\\\\[\\s\\S])*'/,\n        greedy: !0,\n        inside: {\n            interpolation: {\n                pattern: /(^|[^\\\\])\\$(?:\\w+|\\{[^{}]+\\})/,\n                lookbehind: !0,\n                inside: {\n                    \"interpolation-punctuation\": {\n                        pattern: /^\\$\\{?|\\}$/,\n                        alias: \"punctuation\"\n                    },\n                    expression: {\n                        pattern: /[\\s\\S]+/,\n                        inside: Prism.languages.haxe\n                    }\n                }\n            },\n            string: /[\\s\\S]+/\n        }\n    }\n}), Prism.languages.insertBefore(\"haxe\", \"class-name\", {\n    regex: {\n        pattern: /~\\/(?:[^\\/\\\\\\r\\n]|\\\\.)+\\/[a-z]*/,\n        greedy: !0,\n        inside: {\n            \"regex-flags\": /\\b[a-z]+$/,\n            \"regex-source\": {\n                pattern: /^(~\\/)[\\s\\S]+(?=\\/$)/,\n                lookbehind: !0,\n                alias: \"language-regex\",\n                inside: Prism.languages.regex\n            },\n            \"regex-delimiter\": /^~\\/|\\/$/\n        }\n    }\n}), Prism.languages.insertBefore(\"haxe\", \"keyword\", {\n    preprocessor: {\n        pattern: /#(?:else|elseif|end|if)\\b.*/,\n        alias: \"property\"\n    },\n    metadata: {\n        pattern: /@:?[\\w.]+/,\n        alias: \"symbol\"\n    },\n    reification: {\n        pattern: /\\$(?:\\w+|(?=\\{))/,\n        alias: \"important\"\n    }\n});\nPrism.languages.hcl = {\n    comment: /(?:\\/\\/|#).*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n    heredoc: {\n        pattern: /<<-?(\\w+\\b)[\\s\\S]*?^[ \\t]*\\1/m,\n        greedy: !0,\n        alias: \"string\"\n    },\n    keyword: [\n        {\n            pattern: /(?:data|resource)\\s+(?:\"(?:\\\\[\\s\\S]|[^\\\\\"])*\")(?=\\s+\"[\\w-]+\"\\s+\\{)/i,\n            inside: {\n                type: {\n                    pattern: /(resource|data|\\s+)(?:\"(?:\\\\[\\s\\S]|[^\\\\\"])*\")/i,\n                    lookbehind: !0,\n                    alias: \"variable\"\n                }\n            }\n        },\n        {\n            pattern: /(?:backend|module|output|provider|provisioner|variable)\\s+(?:[\\w-]+|\"(?:\\\\[\\s\\S]|[^\\\\\"])*\")\\s+(?=\\{)/i,\n            inside: {\n                type: {\n                    pattern: /(backend|module|output|provider|provisioner|variable)\\s+(?:[\\w-]+|\"(?:\\\\[\\s\\S]|[^\\\\\"])*\")\\s+/i,\n                    lookbehind: !0,\n                    alias: \"variable\"\n                }\n            }\n        },\n        /[\\w-]+(?=\\s+\\{)/\n    ],\n    property: [\n        /[-\\w\\.]+(?=\\s*=(?!=))/,\n        /\"(?:\\\\[\\s\\S]|[^\\\\\"])+\"(?=\\s*[:=])/\n    ],\n    string: {\n        pattern: /\"(?:[^\\\\$\"]|\\\\[\\s\\S]|\\$(?:(?=\")|\\$+(?!\\$)|[^\"${])|\\$\\{(?:[^{}\"]|\"(?:[^\\\\\"]|\\\\[\\s\\S])*\")*\\})*\"/,\n        greedy: !0,\n        inside: {\n            interpolation: {\n                pattern: /(^|[^$])\\$\\{(?:[^{}\"]|\"(?:[^\\\\\"]|\\\\[\\s\\S])*\")*\\}/,\n                lookbehind: !0,\n                inside: {\n                    type: {\n                        pattern: /(\\b(?:count|data|local|module|path|self|terraform|var)\\b\\.)[\\w\\*]+/i,\n                        lookbehind: !0,\n                        alias: \"variable\"\n                    },\n                    keyword: /\\b(?:count|data|local|module|path|self|terraform|var)\\b/i,\n                    function: /\\w+(?=\\()/,\n                    string: {\n                        pattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,\n                        greedy: !0\n                    },\n                    number: /\\b0x[\\da-f]+\\b|\\b\\d+(?:\\.\\d*)?(?:e[+-]?\\d+)?/i,\n                    punctuation: /[!\\$#%&'()*+,.\\/;<=>@\\[\\\\\\]^`{|}~?:]/\n                }\n            }\n        }\n    },\n    number: /\\b0x[\\da-f]+\\b|\\b\\d+(?:\\.\\d*)?(?:e[+-]?\\d+)?/i,\n    boolean: /\\b(?:false|true)\\b/i,\n    punctuation: /[=\\[\\]{}]/\n};\nPrism.languages.hlsl = Prism.languages.extend(\"c\", {\n    \"class-name\": [\n        Prism.languages.c[\"class-name\"],\n        /\\b(?:AppendStructuredBuffer|BlendState|Buffer|ByteAddressBuffer|CompileShader|ComputeShader|ConsumeStructuredBuffer|DepthStencilState|DepthStencilView|DomainShader|GeometryShader|Hullshader|InputPatch|LineStream|OutputPatch|PixelShader|PointStream|RWBuffer|RWByteAddressBuffer|RWStructuredBuffer|RWTexture(?:1D|1DArray|2D|2DArray|3D)|RasterizerState|RenderTargetView|SamplerComparisonState|SamplerState|StructuredBuffer|Texture(?:1D|1DArray|2D|2DArray|2DMS|2DMSArray|3D|Cube|CubeArray)|TriangleStream|VertexShader)\\b/\n    ],\n    keyword: [\n        /\\b(?:asm|asm_fragment|auto|break|case|catch|cbuffer|centroid|char|class|column_major|compile|compile_fragment|const|const_cast|continue|default|delete|discard|do|dynamic_cast|else|enum|explicit|export|extern|for|friend|fxgroup|goto|groupshared|if|in|inline|inout|interface|line|lineadj|linear|long|matrix|mutable|namespace|new|nointerpolation|noperspective|operator|out|packoffset|pass|pixelfragment|point|precise|private|protected|public|register|reinterpret_cast|return|row_major|sample|sampler|shared|short|signed|sizeof|snorm|stateblock|stateblock_state|static|static_cast|string|struct|switch|tbuffer|technique|technique10|technique11|template|texture|this|throw|triangle|triangleadj|try|typedef|typename|uniform|union|unorm|unsigned|using|vector|vertexfragment|virtual|void|volatile|while)\\b/,\n        /\\b(?:bool|double|dword|float|half|int|min(?:10float|12int|16(?:float|int|uint))|uint)(?:[1-4](?:x[1-4])?)?\\b/\n    ],\n    number: /(?:(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[eE][+-]?\\d+)?|\\b0x[\\da-fA-F]+)[fFhHlLuU]?\\b/,\n    boolean: /\\b(?:false|true)\\b/\n});\nPrism.languages.hoon = {\n    comment: {\n        pattern: /::.*/,\n        greedy: !0\n    },\n    string: {\n        pattern: /\"(?:[^\"\\\\]|\\\\.)*\"|'(?:[^'\\\\]|\\\\.)*'/,\n        greedy: !0\n    },\n    constant: /%(?:\\.[ny]|[\\w-]+)/,\n    \"class-name\": /@(?:[a-z0-9-]*[a-z0-9])?|\\*/i,\n    function: /(?:\\+[-+] {2})?(?:[a-z](?:[a-z0-9-]*[a-z0-9])?)/,\n    keyword: /\\.[\\^\\+\\*=\\?]|![><:\\.=\\?!]|=[>|:,\\.\\-\\^<+;/~\\*\\?]|\\?[>|:\\.\\-\\^<\\+&~=@!]|\\|[\\$_%:\\.\\-\\^~\\*=@\\?]|\\+[|\\$\\+\\*]|:[_\\-\\^\\+~\\*]|%[_:\\.\\-\\^\\+~\\*=]|\\^[|:\\.\\-\\+&~\\*=\\?]|\\$[|_%:<>\\-\\^&~@=\\?]|;[:<\\+;\\/~\\*=]|~[>|\\$_%<\\+\\/&=\\?!]|--|==/\n};\n!function(t) {\n    function a(t) {\n        return RegExp(\"(^(?:\" + t + \"):[ \t]*(?![ \t]))[^]+\", \"i\");\n    }\n    t.languages.http = {\n        \"request-line\": {\n            pattern: /^(?:CONNECT|DELETE|GET|HEAD|OPTIONS|PATCH|POST|PRI|PUT|SEARCH|TRACE)\\s(?:https?:\\/\\/|\\/)\\S*\\sHTTP\\/[\\d.]+/m,\n            inside: {\n                method: {\n                    pattern: /^[A-Z]+\\b/,\n                    alias: \"property\"\n                },\n                \"request-target\": {\n                    pattern: /^(\\s)(?:https?:\\/\\/|\\/)\\S*(?=\\s)/,\n                    lookbehind: !0,\n                    alias: \"url\",\n                    inside: t.languages.uri\n                },\n                \"http-version\": {\n                    pattern: /^(\\s)HTTP\\/[\\d.]+/,\n                    lookbehind: !0,\n                    alias: \"property\"\n                }\n            }\n        },\n        \"response-status\": {\n            pattern: /^HTTP\\/[\\d.]+ \\d+ .+/m,\n            inside: {\n                \"http-version\": {\n                    pattern: /^HTTP\\/[\\d.]+/,\n                    alias: \"property\"\n                },\n                \"status-code\": {\n                    pattern: /^(\\s)\\d+(?=\\s)/,\n                    lookbehind: !0,\n                    alias: \"number\"\n                },\n                \"reason-phrase\": {\n                    pattern: /^(\\s).+/,\n                    lookbehind: !0,\n                    alias: \"string\"\n                }\n            }\n        },\n        header: {\n            pattern: /^[\\w-]+:.+(?:(?:\\r\\n?|\\n)[ \\t].+)*/m,\n            inside: {\n                \"header-value\": [\n                    {\n                        pattern: a(\"Content-Security-Policy\"),\n                        lookbehind: !0,\n                        alias: [\n                            \"csp\",\n                            \"languages-csp\"\n                        ],\n                        inside: t.languages.csp\n                    },\n                    {\n                        pattern: a(\"Public-Key-Pins(?:-Report-Only)?\"),\n                        lookbehind: !0,\n                        alias: [\n                            \"hpkp\",\n                            \"languages-hpkp\"\n                        ],\n                        inside: t.languages.hpkp\n                    },\n                    {\n                        pattern: a(\"Strict-Transport-Security\"),\n                        lookbehind: !0,\n                        alias: [\n                            \"hsts\",\n                            \"languages-hsts\"\n                        ],\n                        inside: t.languages.hsts\n                    },\n                    {\n                        pattern: a(\"[^:]+\"),\n                        lookbehind: !0\n                    }\n                ],\n                \"header-name\": {\n                    pattern: /^[^:]+/,\n                    alias: \"keyword\"\n                },\n                punctuation: /^:/\n            }\n        }\n    };\n    var e, n = t.languages, s = {\n        \"application/javascript\": n.javascript,\n        \"application/json\": n.json || n.javascript,\n        \"application/xml\": n.xml,\n        \"text/xml\": n.xml,\n        \"text/html\": n.html,\n        \"text/css\": n.css,\n        \"text/plain\": n.plain\n    }, i = {\n        \"application/json\": !0,\n        \"application/xml\": !0\n    };\n    function r(t) {\n        var a = t.replace(/^[a-z]+\\//, \"\");\n        return \"(?:\" + t + \"|\\\\w+/(?:[\\\\w.-]+\\\\+)+\" + a + \"(?![+\\\\w.-]))\";\n    }\n    for(var p in s)if (s[p]) {\n        e = e || {};\n        var l = i[p] ? r(p) : p;\n        e[p.replace(/\\//g, \"-\")] = {\n            pattern: RegExp(\"(content-type:\\\\s*\" + l + \"(?:(?:\\r\\n?|\\n)[\\\\w-].*)*(?:\\r(?:\\n|(?!\\n))|\\n))[^ \t\\\\w-][^]*\", \"i\"),\n            lookbehind: !0,\n            inside: s[p]\n        };\n    }\n    e && t.languages.insertBefore(\"http\", \"header\", e);\n}(Prism);\nPrism.languages.hpkp = {\n    directive: {\n        pattern: /\\b(?:includeSubDomains|max-age|pin-sha256|preload|report-to|report-uri|strict)(?=[\\s;=]|$)/i,\n        alias: \"property\"\n    },\n    operator: /=/,\n    punctuation: /;/\n};\nPrism.languages.hsts = {\n    directive: {\n        pattern: /\\b(?:includeSubDomains|max-age|preload)(?=[\\s;=]|$)/i,\n        alias: \"property\"\n    },\n    operator: /=/,\n    punctuation: /;/\n};\nPrism.languages.ichigojam = {\n    comment: /(?:\\B'|REM)(?:[^\\n\\r]*)/i,\n    string: {\n        pattern: /\"(?:\"\"|[!#$%&'()*,\\/:;<=>?^\\w +\\-.])*\"/,\n        greedy: !0\n    },\n    number: /\\B#[0-9A-F]+|\\B`[01]+|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:E[+-]?\\d+)?/i,\n    keyword: /\\b(?:BEEP|BPS|CASE|CLEAR|CLK|CLO|CLP|CLS|CLT|CLV|CONT|COPY|ELSE|END|FILE|FILES|FOR|GOSUB|GOTO|GSB|IF|INPUT|KBD|LED|LET|LIST|LOAD|LOCATE|LRUN|NEW|NEXT|OUT|PLAY|POKE|PRINT|PWM|REM|RENUM|RESET|RETURN|RIGHT|RTN|RUN|SAVE|SCROLL|SLEEP|SRND|STEP|STOP|SUB|TEMPO|THEN|TO|UART|VIDEO|WAIT)(?:\\$|\\b)/i,\n    function: /\\b(?:ABS|ANA|ASC|BIN|BTN|DEC|END|FREE|HELP|HEX|I2CR|I2CW|IN|INKEY|LEN|LINE|PEEK|RND|SCR|SOUND|STR|TICK|USR|VER|VPEEK|ZER)(?:\\$|\\b)/i,\n    label: /(?:\\B@\\S+)/,\n    operator: /<[=>]?|>=?|\\|\\||&&|[+\\-*\\/=|&^~!]|\\b(?:AND|NOT|OR)\\b/i,\n    punctuation: /[\\[,;:()\\]]/\n};\nPrism.languages.icon = {\n    comment: /#.*/,\n    string: {\n        pattern: /([\"'])(?:(?!\\1)[^\\\\\\r\\n_]|\\\\.|_(?!\\1)(?:\\r\\n|[\\s\\S]))*\\1/,\n        greedy: !0\n    },\n    number: /\\b(?:\\d+r[a-z\\d]+|\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?)\\b|\\.\\d+\\b/i,\n    \"builtin-keyword\": {\n        pattern: /&(?:allocated|ascii|clock|collections|cset|current|date|dateline|digits|dump|e|error(?:number|text|value)?|errout|fail|features|file|host|input|lcase|letters|level|line|main|null|output|phi|pi|pos|progname|random|regions|source|storage|subject|time|trace|ucase|version)\\b/,\n        alias: \"variable\"\n    },\n    directive: {\n        pattern: /\\$\\w+/,\n        alias: \"builtin\"\n    },\n    keyword: /\\b(?:break|by|case|create|default|do|else|end|every|fail|global|if|initial|invocable|link|local|next|not|of|procedure|record|repeat|return|static|suspend|then|to|until|while)\\b/,\n    function: /\\b(?!\\d)\\w+(?=\\s*[({]|\\s*!\\s*\\[)/,\n    operator: /[+-]:(?!=)|(?:[\\/?@^%&]|\\+\\+?|--?|==?=?|~==?=?|\\*\\*?|\\|\\|\\|?|<(?:->?|<?=?)|>>?=?)(?::=)?|:(?:=:?)?|[!.\\\\|~]/,\n    punctuation: /[\\[\\](){},;]/\n};\n!function(e) {\n    function t(e, s) {\n        return s <= 0 ? \"[]\" : e.replace(/<SELF>/g, function() {\n            return t(e, s - 1);\n        });\n    }\n    var s = /'[{}:=,](?:[^']|'')*'(?!')/, n = {\n        pattern: /''/,\n        greedy: !0,\n        alias: \"operator\"\n    }, r = {\n        pattern: s,\n        greedy: !0,\n        inside: {\n            escape: n\n        }\n    }, a = t(\"\\\\{(?:[^{}']|'(?![{},'])|''|<STR>|<SELF>)*\\\\}\".replace(/<STR>/g, function() {\n        return s.source;\n    }), 8), i = {\n        pattern: RegExp(a),\n        inside: {\n            message: {\n                pattern: /^(\\{)[\\s\\S]+(?=\\}$)/,\n                lookbehind: !0,\n                inside: null\n            },\n            \"message-delimiter\": {\n                pattern: /./,\n                alias: \"punctuation\"\n            }\n        }\n    };\n    e.languages[\"icu-message-format\"] = {\n        argument: {\n            pattern: RegExp(a),\n            greedy: !0,\n            inside: {\n                content: {\n                    pattern: /^(\\{)[\\s\\S]+(?=\\}$)/,\n                    lookbehind: !0,\n                    inside: {\n                        \"argument-name\": {\n                            pattern: /^(\\s*)[^{}:=,\\s]+/,\n                            lookbehind: !0\n                        },\n                        \"choice-style\": {\n                            pattern: /^(\\s*,\\s*choice\\s*,\\s*)\\S(?:[\\s\\S]*\\S)?/,\n                            lookbehind: !0,\n                            inside: {\n                                punctuation: /\\|/,\n                                range: {\n                                    pattern: /^(\\s*)[+-]?(?:\\d+(?:\\.\\d*)?|\\u221e)\\s*[<#\\u2264]/,\n                                    lookbehind: !0,\n                                    inside: {\n                                        operator: /[<#\\u2264]/,\n                                        number: /\\S+/\n                                    }\n                                },\n                                rest: null\n                            }\n                        },\n                        \"plural-style\": {\n                            pattern: /^(\\s*,\\s*(?:plural|selectordinal)\\s*,\\s*)\\S(?:[\\s\\S]*\\S)?/,\n                            lookbehind: !0,\n                            inside: {\n                                offset: /^offset:\\s*\\d+/,\n                                \"nested-message\": i,\n                                selector: {\n                                    pattern: /=\\d+|[^{}:=,\\s]+/,\n                                    inside: {\n                                        keyword: /^(?:few|many|one|other|two|zero)$/\n                                    }\n                                }\n                            }\n                        },\n                        \"select-style\": {\n                            pattern: /^(\\s*,\\s*select\\s*,\\s*)\\S(?:[\\s\\S]*\\S)?/,\n                            lookbehind: !0,\n                            inside: {\n                                \"nested-message\": i,\n                                selector: {\n                                    pattern: /[^{}:=,\\s]+/,\n                                    inside: {\n                                        keyword: /^other$/\n                                    }\n                                }\n                            }\n                        },\n                        keyword: /\\b(?:choice|plural|select|selectordinal)\\b/,\n                        \"arg-type\": {\n                            pattern: /\\b(?:date|duration|number|ordinal|spellout|time)\\b/,\n                            alias: \"keyword\"\n                        },\n                        \"arg-skeleton\": {\n                            pattern: /(,\\s*)::[^{}:=,\\s]+/,\n                            lookbehind: !0\n                        },\n                        \"arg-style\": {\n                            pattern: /(,\\s*)(?:currency|full|integer|long|medium|percent|short)(?=\\s*$)/,\n                            lookbehind: !0\n                        },\n                        \"arg-style-text\": {\n                            pattern: RegExp(\"(^\\\\s*,\\\\s*(?=\\\\S))\" + t(\"(?:[^{}']|'[^']*'|\\\\{(?:<SELF>)?\\\\})+\", 8) + \"$\"),\n                            lookbehind: !0,\n                            alias: \"string\"\n                        },\n                        punctuation: /,/\n                    }\n                },\n                \"argument-delimiter\": {\n                    pattern: /./,\n                    alias: \"operator\"\n                }\n            }\n        },\n        escape: n,\n        string: r\n    }, i.inside.message.inside = e.languages[\"icu-message-format\"], e.languages[\"icu-message-format\"].argument.inside.content.inside[\"choice-style\"].inside.rest = e.languages[\"icu-message-format\"];\n}(Prism);\nPrism.languages.idris = Prism.languages.extend(\"haskell\", {\n    comment: {\n        pattern: /(?:(?:--|\\|\\|\\|).*$|\\{-[\\s\\S]*?-\\})/m\n    },\n    keyword: /\\b(?:Type|case|class|codata|constructor|corecord|data|do|dsl|else|export|if|implementation|implicit|import|impossible|in|infix|infixl|infixr|instance|interface|let|module|mutual|namespace|of|parameters|partial|postulate|private|proof|public|quoteGoal|record|rewrite|syntax|then|total|using|where|with)\\b/,\n    builtin: void 0\n}), Prism.languages.insertBefore(\"idris\", \"keyword\", {\n    \"import-statement\": {\n        pattern: /(^\\s*import\\s+)(?:[A-Z][\\w']*)(?:\\.[A-Z][\\w']*)*/m,\n        lookbehind: !0,\n        inside: {\n            punctuation: /\\./\n        }\n    }\n}), Prism.languages.idr = Prism.languages.idris;\n!function(n) {\n    n.languages.ignore = {\n        comment: /^#.*/m,\n        entry: {\n            pattern: /\\S(?:.*(?:(?:\\\\ )|\\S))?/,\n            alias: \"string\",\n            inside: {\n                operator: /^!|\\*\\*?|\\?/,\n                regex: {\n                    pattern: /(^|[^\\\\])\\[[^\\[\\]]*\\]/,\n                    lookbehind: !0\n                },\n                punctuation: /\\//\n            }\n        }\n    }, n.languages.gitignore = n.languages.ignore, n.languages.hgignore = n.languages.ignore, n.languages.npmignore = n.languages.ignore;\n}(Prism);\nPrism.languages.inform7 = {\n    string: {\n        pattern: /\"[^\"]*\"/,\n        inside: {\n            substitution: {\n                pattern: /\\[[^\\[\\]]+\\]/,\n                inside: {\n                    delimiter: {\n                        pattern: /\\[|\\]/,\n                        alias: \"punctuation\"\n                    }\n                }\n            }\n        }\n    },\n    comment: {\n        pattern: /\\[[^\\[\\]]+\\]/,\n        greedy: !0\n    },\n    title: {\n        pattern: /^[ \\t]*(?:book|chapter|part(?! of)|section|table|volume)\\b.+/im,\n        alias: \"important\"\n    },\n    number: {\n        pattern: /(^|[^-])(?:\\b\\d+(?:\\.\\d+)?(?:\\^\\d+)?(?:(?!\\d)\\w+)?|\\b(?:eight|eleven|five|four|nine|one|seven|six|ten|three|twelve|two))\\b(?!-)/i,\n        lookbehind: !0\n    },\n    verb: {\n        pattern: /(^|[^-])\\b(?:answering|applying to|are|asking|attacking|be(?:ing)?|burning|buying|called|carries|carry(?! out)|carrying|climbing|closing|conceal(?:ing|s)?|consulting|contain(?:ing|s)?|cutting|drinking|dropping|eating|enclos(?:es?|ing)|entering|examining|exiting|getting|giving|going|ha(?:s|ve|ving)|hold(?:ing|s)?|impl(?:ies|y)|incorporat(?:es?|ing)|inserting|is|jumping|kissing|listening|locking|looking|mean(?:ing|s)?|opening|provid(?:es?|ing)|pulling|pushing|putting|relat(?:es?|ing)|removing|searching|see(?:ing|s)?|setting|showing|singing|sleeping|smelling|squeezing|support(?:ing|s)?|swearing|switching|taking|tasting|telling|thinking|throwing|touching|turning|tying|unlock(?:ing|s)?|var(?:ies|y|ying)|waiting|waking|waving|wear(?:ing|s)?)\\b(?!-)/i,\n        lookbehind: !0,\n        alias: \"operator\"\n    },\n    keyword: {\n        pattern: /(^|[^-])\\b(?:after|before|carry out|check|continue the action|definition(?= *:)|do nothing|else|end (?:if|the story|unless)|every turn|if|include|instead(?: of)?|let|move|no|now|otherwise|repeat|report|resume the story|rule for|running through|say(?:ing)?|stop the action|test|try(?:ing)?|understand|unless|use|when|while|yes)\\b(?!-)/i,\n        lookbehind: !0\n    },\n    property: {\n        pattern: /(^|[^-])\\b(?:adjacent(?! to)|carried|closed|concealed|contained|dark|described|edible|empty|enclosed|enterable|even|female|fixed in place|full|handled|held|improper-named|incorporated|inedible|invisible|lighted|lit|lock(?:able|ed)|male|marked for listing|mentioned|negative|neuter|non-(?:empty|full|recurring)|odd|opaque|open(?:able)?|plural-named|portable|positive|privately-named|proper-named|provided|publically-named|pushable between rooms|recurring|related|rubbing|scenery|seen|singular-named|supported|swinging|switch(?:able|ed(?: off| on)?)|touch(?:able|ed)|transparent|unconcealed|undescribed|unlit|unlocked|unmarked for listing|unmentioned|unopenable|untouchable|unvisited|variable|visible|visited|wearable|worn)\\b(?!-)/i,\n        lookbehind: !0,\n        alias: \"symbol\"\n    },\n    position: {\n        pattern: /(^|[^-])\\b(?:above|adjacent to|back side of|below|between|down|east|everywhere|front side|here|in|inside(?: from)?|north(?:east|west)?|nowhere|on(?: top of)?|other side|outside(?: from)?|parts? of|regionally in|south(?:east|west)?|through|up|west|within)\\b(?!-)/i,\n        lookbehind: !0,\n        alias: \"keyword\"\n    },\n    type: {\n        pattern: /(^|[^-])\\b(?:actions?|activit(?:ies|y)|actors?|animals?|backdrops?|containers?|devices?|directions?|doors?|holders?|kinds?|lists?|m[ae]n|nobody|nothing|nouns?|numbers?|objects?|people|persons?|player(?:'s holdall)?|regions?|relations?|rooms?|rule(?:book)?s?|scenes?|someone|something|supporters?|tables?|texts?|things?|time|vehicles?|wom[ae]n)\\b(?!-)/i,\n        lookbehind: !0,\n        alias: \"variable\"\n    },\n    punctuation: /[.,:;(){}]/\n}, Prism.languages.inform7.string.inside.substitution.inside.rest = Prism.languages.inform7, Prism.languages.inform7.string.inside.substitution.inside.rest.text = {\n    pattern: /\\S(?:\\s*\\S)*/,\n    alias: \"comment\"\n};\nPrism.languages.ini = {\n    comment: {\n        pattern: /(^[ \\f\\t\\v]*)[#;][^\\n\\r]*/m,\n        lookbehind: !0\n    },\n    section: {\n        pattern: /(^[ \\f\\t\\v]*)\\[[^\\n\\r\\]]*\\]?/m,\n        lookbehind: !0,\n        inside: {\n            \"section-name\": {\n                pattern: /(^\\[[ \\f\\t\\v]*)[^ \\f\\t\\v\\]]+(?:[ \\f\\t\\v]+[^ \\f\\t\\v\\]]+)*/,\n                lookbehind: !0,\n                alias: \"selector\"\n            },\n            punctuation: /\\[|\\]/\n        }\n    },\n    key: {\n        pattern: /(^[ \\f\\t\\v]*)[^ \\f\\n\\r\\t\\v=]+(?:[ \\f\\t\\v]+[^ \\f\\n\\r\\t\\v=]+)*(?=[ \\f\\t\\v]*=)/m,\n        lookbehind: !0,\n        alias: \"attr-name\"\n    },\n    value: {\n        pattern: /(=[ \\f\\t\\v]*)[^ \\f\\n\\r\\t\\v]+(?:[ \\f\\t\\v]+[^ \\f\\n\\r\\t\\v]+)*/,\n        lookbehind: !0,\n        alias: \"attr-value\",\n        inside: {\n            \"inner-value\": {\n                pattern: /^(\"|').+(?=\\1$)/,\n                lookbehind: !0\n            }\n        }\n    },\n    punctuation: /=/\n};\nPrism.languages.io = {\n    comment: {\n        pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?(?:\\*\\/|$)|\\/\\/.*|#.*)/,\n        lookbehind: !0,\n        greedy: !0\n    },\n    \"triple-quoted-string\": {\n        pattern: /\"\"\"(?:\\\\[\\s\\S]|(?!\"\"\")[^\\\\])*\"\"\"/,\n        greedy: !0,\n        alias: \"string\"\n    },\n    string: {\n        pattern: /\"(?:\\\\.|[^\\\\\\r\\n\"])*\"/,\n        greedy: !0\n    },\n    keyword: /\\b(?:activate|activeCoroCount|asString|block|break|call|catch|clone|collectGarbage|compileString|continue|do|doFile|doMessage|doString|else|elseif|exit|for|foreach|forward|getEnvironmentVariable|getSlot|hasSlot|if|ifFalse|ifNil|ifNilEval|ifTrue|active_state|isNil|isResumable|list|message|method|parent|pass|pause|perform|performWithArgList|print|println|proto|raise|raiseResumable|removeSlot|resend|resume|schedulerSleepSeconds|self|sender|setSchedulerSleepSeconds|setSlot|shallowCopy|slotNames|super|system|then|thisBlock|thisContext|try|type|uniqueId|updateSlot|wait|while|write|yield)\\b/,\n    builtin: /\\b(?:Array|AudioDevice|AudioMixer|BigNum|Block|Box|Buffer|CFunction|CGI|Color|Curses|DBM|DNSResolver|DOConnection|DOProxy|DOServer|Date|Directory|Duration|DynLib|Error|Exception|FFT|File|Fnmatch|Font|Future|GL|GLE|GLScissor|GLU|GLUCylinder|GLUQuadric|GLUSphere|GLUT|Host|Image|Importer|LinkList|List|Lobby|Locals|MD5|MP3Decoder|MP3Encoder|Map|Message|Movie|Notification|Number|Object|OpenGL|Point|Protos|Random|Regex|SGML|SGMLElement|SGMLParser|SQLite|Sequence|Server|ShowMessage|SleepyCat|SleepyCatCursor|Socket|SocketManager|Sound|Soup|Store|String|Tree|UDPSender|UPDReceiver|URL|User|Warning|WeakLink)\\b/,\n    boolean: /\\b(?:false|nil|true)\\b/,\n    number: /\\b0x[\\da-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e-?\\d+)?/i,\n    operator: /[=!*/%+\\-^&|]=|>>?=?|<<?=?|:?:?=|\\+\\+?|--?|\\*\\*?|\\/\\/?|%|\\|\\|?|&&?|\\b(?:and|not|or|return)\\b|@@?|\\?\\??|\\.\\./,\n    punctuation: /[{}[\\];(),.:]/\n};\nPrism.languages.j = {\n    comment: {\n        pattern: /\\bNB\\..*/,\n        greedy: !0\n    },\n    string: {\n        pattern: /'(?:''|[^'\\r\\n])*'/,\n        greedy: !0\n    },\n    keyword: /\\b(?:(?:CR|LF|adverb|conjunction|def|define|dyad|monad|noun|verb)\\b|(?:assert|break|case|catch[dt]?|continue|do|else|elseif|end|fcase|for|for_\\w+|goto_\\w+|if|label_\\w+|return|select|throw|try|while|whilst)\\.)/,\n    verb: {\n        pattern: /(?!\\^:|;\\.|[=!][.:])(?:\\{(?:\\.|::?)?|p(?:\\.\\.?|:)|[=!\\]]|[<>+*\\-%$|,#][.:]?|[?^]\\.?|[;\\[]:?|[~}\"i][.:]|[ACeEIjLor]\\.|(?:[_\\/\\\\qsux]|_?\\d):)/,\n        alias: \"keyword\"\n    },\n    number: /\\b_?(?:(?!\\d:)\\d+(?:\\.\\d+)?(?:(?:ad|ar|[ejpx])_?\\d+(?:\\.\\d+)?)*(?:b_?[\\da-z]+(?:\\.[\\da-z]+)?)?|_\\b(?!\\.))/,\n    adverb: {\n        pattern: /[~}]|[\\/\\\\]\\.?|[bfM]\\.|t[.:]/,\n        alias: \"builtin\"\n    },\n    operator: /[=a][.:]|_\\./,\n    conjunction: {\n        pattern: /&(?:\\.:?|:)?|[.:@][.:]?|[!D][.:]|[;dHT]\\.|`:?|[\\^LS]:|\"/,\n        alias: \"variable\"\n    },\n    punctuation: /[()]/\n};\n!function(e) {\n    var n = /\\b(?:abstract|assert|boolean|break|byte|case|catch|char|class|const|continue|default|do|double|else|enum|exports|extends|final|finally|float|for|goto|if|implements|import|instanceof|int|interface|long|module|native|new|non-sealed|null|open|opens|package|permits|private|protected|provides|public|record(?!\\s*[(){}[\\]<>=%~.:,;?+\\-*/&|^])|requires|return|sealed|short|static|strictfp|super|switch|synchronized|this|throw|throws|to|transient|transitive|try|uses|var|void|volatile|while|with|yield)\\b/, t = \"(?:[a-z]\\\\w*\\\\s*\\\\.\\\\s*)*(?:[A-Z]\\\\w*\\\\s*\\\\.\\\\s*)*\", s = {\n        pattern: RegExp(\"(^|[^\\\\w.])\" + t + \"[A-Z](?:[\\\\d_A-Z]*[a-z]\\\\w*)?\\\\b\"),\n        lookbehind: !0,\n        inside: {\n            namespace: {\n                pattern: /^[a-z]\\w*(?:\\s*\\.\\s*[a-z]\\w*)*(?:\\s*\\.)?/,\n                inside: {\n                    punctuation: /\\./\n                }\n            },\n            punctuation: /\\./\n        }\n    };\n    e.languages.java = e.languages.extend(\"clike\", {\n        string: {\n            pattern: /(^|[^\\\\])\"(?:\\\\.|[^\"\\\\\\r\\n])*\"/,\n            lookbehind: !0,\n            greedy: !0\n        },\n        \"class-name\": [\n            s,\n            {\n                pattern: RegExp(\"(^|[^\\\\w.])\" + t + \"[A-Z]\\\\w*(?=\\\\s+\\\\w+\\\\s*[;,=()]|\\\\s*(?:\\\\[[\\\\s,]*\\\\]\\\\s*)?::\\\\s*new\\\\b)\"),\n                lookbehind: !0,\n                inside: s.inside\n            },\n            {\n                pattern: RegExp(\"(\\\\b(?:class|enum|extends|implements|instanceof|interface|new|record|throws)\\\\s+)\" + t + \"[A-Z]\\\\w*\\\\b\"),\n                lookbehind: !0,\n                inside: s.inside\n            }\n        ],\n        keyword: n,\n        function: [\n            e.languages.clike.function,\n            {\n                pattern: /(::\\s*)[a-z_]\\w*/,\n                lookbehind: !0\n            }\n        ],\n        number: /\\b0b[01][01_]*L?\\b|\\b0x(?:\\.[\\da-f_p+-]+|[\\da-f_]+(?:\\.[\\da-f_p+-]+)?)\\b|(?:\\b\\d[\\d_]*(?:\\.[\\d_]*)?|\\B\\.\\d[\\d_]*)(?:e[+-]?\\d[\\d_]*)?[dfl]?/i,\n        operator: {\n            pattern: /(^|[^.])(?:<<=?|>>>?=?|->|--|\\+\\+|&&|\\|\\||::|[?:~]|[-+*/%&|^!=<>]=?)/m,\n            lookbehind: !0\n        },\n        constant: /\\b[A-Z][A-Z_\\d]+\\b/\n    }), e.languages.insertBefore(\"java\", \"string\", {\n        \"triple-quoted-string\": {\n            pattern: /\"\"\"[ \\t]*[\\r\\n](?:(?:\"|\"\")?(?:\\\\.|[^\"\\\\]))*\"\"\"/,\n            greedy: !0,\n            alias: \"string\"\n        },\n        char: {\n            pattern: /'(?:\\\\.|[^'\\\\\\r\\n]){1,6}'/,\n            greedy: !0\n        }\n    }), e.languages.insertBefore(\"java\", \"class-name\", {\n        annotation: {\n            pattern: /(^|[^.])@\\w+(?:\\s*\\.\\s*\\w+)*/,\n            lookbehind: !0,\n            alias: \"punctuation\"\n        },\n        generics: {\n            pattern: /<(?:[\\w\\s,.?]|&(?!&)|<(?:[\\w\\s,.?]|&(?!&)|<(?:[\\w\\s,.?]|&(?!&)|<(?:[\\w\\s,.?]|&(?!&))*>)*>)*>)*>/,\n            inside: {\n                \"class-name\": s,\n                keyword: n,\n                punctuation: /[<>(),.:]/,\n                operator: /[?&|]/\n            }\n        },\n        import: [\n            {\n                pattern: RegExp(\"(\\\\bimport\\\\s+)\" + t + \"(?:[A-Z]\\\\w*|\\\\*)(?=\\\\s*;)\"),\n                lookbehind: !0,\n                inside: {\n                    namespace: s.inside.namespace,\n                    punctuation: /\\./,\n                    operator: /\\*/,\n                    \"class-name\": /\\w+/\n                }\n            },\n            {\n                pattern: RegExp(\"(\\\\bimport\\\\s+static\\\\s+)\" + t + \"(?:\\\\w+|\\\\*)(?=\\\\s*;)\"),\n                lookbehind: !0,\n                alias: \"static\",\n                inside: {\n                    namespace: s.inside.namespace,\n                    static: /\\b\\w+$/,\n                    punctuation: /\\./,\n                    operator: /\\*/,\n                    \"class-name\": /\\w+/\n                }\n            }\n        ],\n        namespace: {\n            pattern: RegExp(\"(\\\\b(?:exports|import(?:\\\\s+static)?|module|open|opens|package|provides|requires|to|transitive|uses|with)\\\\s+)(?!<keyword>)[a-z]\\\\w*(?:\\\\.[a-z]\\\\w*)*\\\\.?\".replace(/<keyword>/g, function() {\n                return n.source;\n            })),\n            lookbehind: !0,\n            inside: {\n                punctuation: /\\./\n            }\n        }\n    });\n}(Prism);\n!function(e) {\n    var a = /\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*|#(?!\\[).*/, t = [\n        {\n            pattern: /\\b(?:false|true)\\b/i,\n            alias: \"boolean\"\n        },\n        {\n            pattern: /(::\\s*)\\b[a-z_]\\w*\\b(?!\\s*\\()/i,\n            greedy: !0,\n            lookbehind: !0\n        },\n        {\n            pattern: /(\\b(?:case|const)\\s+)\\b[a-z_]\\w*(?=\\s*[;=])/i,\n            greedy: !0,\n            lookbehind: !0\n        },\n        /\\b(?:null)\\b/i,\n        /\\b[A-Z_][A-Z0-9_]*\\b(?!\\s*\\()/\n    ], i = /\\b0b[01]+(?:_[01]+)*\\b|\\b0o[0-7]+(?:_[0-7]+)*\\b|\\b0x[\\da-f]+(?:_[\\da-f]+)*\\b|(?:\\b\\d+(?:_\\d+)*\\.?(?:\\d+(?:_\\d+)*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?/i, n = /<?=>|\\?\\?=?|\\.{3}|\\??->|[!=]=?=?|::|\\*\\*=?|--|\\+\\+|&&|\\|\\||<<|>>|[?~]|[/^|%*&<>.+-]=?/, s = /[{}\\[\\](),:;]/;\n    e.languages.php = {\n        delimiter: {\n            pattern: /\\?>$|^<\\?(?:php(?=\\s)|=)?/i,\n            alias: \"important\"\n        },\n        comment: a,\n        variable: /\\$+(?:\\w+\\b|(?=\\{))/,\n        package: {\n            pattern: /(namespace\\s+|use\\s+(?:function\\s+)?)(?:\\\\?\\b[a-z_]\\w*)+\\b(?!\\\\)/i,\n            lookbehind: !0,\n            inside: {\n                punctuation: /\\\\/\n            }\n        },\n        \"class-name-definition\": {\n            pattern: /(\\b(?:class|enum|interface|trait)\\s+)\\b[a-z_]\\w*(?!\\\\)\\b/i,\n            lookbehind: !0,\n            alias: \"class-name\"\n        },\n        \"function-definition\": {\n            pattern: /(\\bfunction\\s+)[a-z_]\\w*(?=\\s*\\()/i,\n            lookbehind: !0,\n            alias: \"function\"\n        },\n        keyword: [\n            {\n                pattern: /(\\(\\s*)\\b(?:array|bool|boolean|float|int|integer|object|string)\\b(?=\\s*\\))/i,\n                alias: \"type-casting\",\n                greedy: !0,\n                lookbehind: !0\n            },\n            {\n                pattern: /([(,?]\\s*)\\b(?:array(?!\\s*\\()|bool|callable|(?:false|null)(?=\\s*\\|)|float|int|iterable|mixed|object|self|static|string)\\b(?=\\s*\\$)/i,\n                alias: \"type-hint\",\n                greedy: !0,\n                lookbehind: !0\n            },\n            {\n                pattern: /(\\)\\s*:\\s*(?:\\?\\s*)?)\\b(?:array(?!\\s*\\()|bool|callable|(?:false|null)(?=\\s*\\|)|float|int|iterable|mixed|never|object|self|static|string|void)\\b/i,\n                alias: \"return-type\",\n                greedy: !0,\n                lookbehind: !0\n            },\n            {\n                pattern: /\\b(?:array(?!\\s*\\()|bool|float|int|iterable|mixed|object|string|void)\\b/i,\n                alias: \"type-declaration\",\n                greedy: !0\n            },\n            {\n                pattern: /(\\|\\s*)(?:false|null)\\b|\\b(?:false|null)(?=\\s*\\|)/i,\n                alias: \"type-declaration\",\n                greedy: !0,\n                lookbehind: !0\n            },\n            {\n                pattern: /\\b(?:parent|self|static)(?=\\s*::)/i,\n                alias: \"static-context\",\n                greedy: !0\n            },\n            {\n                pattern: /(\\byield\\s+)from\\b/i,\n                lookbehind: !0\n            },\n            /\\bclass\\b/i,\n            {\n                pattern: /((?:^|[^\\s>:]|(?:^|[^-])>|(?:^|[^:]):)\\s*)\\b(?:abstract|and|array|as|break|callable|case|catch|clone|const|continue|declare|default|die|do|echo|else|elseif|empty|enddeclare|endfor|endforeach|endif|endswitch|endwhile|enum|eval|exit|extends|final|finally|fn|for|foreach|function|global|goto|if|implements|include|include_once|instanceof|insteadof|interface|isset|list|match|namespace|never|new|or|parent|print|private|protected|public|readonly|require|require_once|return|self|static|switch|throw|trait|try|unset|use|var|while|xor|yield|__halt_compiler)\\b/i,\n                lookbehind: !0\n            }\n        ],\n        \"argument-name\": {\n            pattern: /([(,]\\s*)\\b[a-z_]\\w*(?=\\s*:(?!:))/i,\n            lookbehind: !0\n        },\n        \"class-name\": [\n            {\n                pattern: /(\\b(?:extends|implements|instanceof|new(?!\\s+self|\\s+static))\\s+|\\bcatch\\s*\\()\\b[a-z_]\\w*(?!\\\\)\\b/i,\n                greedy: !0,\n                lookbehind: !0\n            },\n            {\n                pattern: /(\\|\\s*)\\b[a-z_]\\w*(?!\\\\)\\b/i,\n                greedy: !0,\n                lookbehind: !0\n            },\n            {\n                pattern: /\\b[a-z_]\\w*(?!\\\\)\\b(?=\\s*\\|)/i,\n                greedy: !0\n            },\n            {\n                pattern: /(\\|\\s*)(?:\\\\?\\b[a-z_]\\w*)+\\b/i,\n                alias: \"class-name-fully-qualified\",\n                greedy: !0,\n                lookbehind: !0,\n                inside: {\n                    punctuation: /\\\\/\n                }\n            },\n            {\n                pattern: /(?:\\\\?\\b[a-z_]\\w*)+\\b(?=\\s*\\|)/i,\n                alias: \"class-name-fully-qualified\",\n                greedy: !0,\n                inside: {\n                    punctuation: /\\\\/\n                }\n            },\n            {\n                pattern: /(\\b(?:extends|implements|instanceof|new(?!\\s+self\\b|\\s+static\\b))\\s+|\\bcatch\\s*\\()(?:\\\\?\\b[a-z_]\\w*)+\\b(?!\\\\)/i,\n                alias: \"class-name-fully-qualified\",\n                greedy: !0,\n                lookbehind: !0,\n                inside: {\n                    punctuation: /\\\\/\n                }\n            },\n            {\n                pattern: /\\b[a-z_]\\w*(?=\\s*\\$)/i,\n                alias: \"type-declaration\",\n                greedy: !0\n            },\n            {\n                pattern: /(?:\\\\?\\b[a-z_]\\w*)+(?=\\s*\\$)/i,\n                alias: [\n                    \"class-name-fully-qualified\",\n                    \"type-declaration\"\n                ],\n                greedy: !0,\n                inside: {\n                    punctuation: /\\\\/\n                }\n            },\n            {\n                pattern: /\\b[a-z_]\\w*(?=\\s*::)/i,\n                alias: \"static-context\",\n                greedy: !0\n            },\n            {\n                pattern: /(?:\\\\?\\b[a-z_]\\w*)+(?=\\s*::)/i,\n                alias: [\n                    \"class-name-fully-qualified\",\n                    \"static-context\"\n                ],\n                greedy: !0,\n                inside: {\n                    punctuation: /\\\\/\n                }\n            },\n            {\n                pattern: /([(,?]\\s*)[a-z_]\\w*(?=\\s*\\$)/i,\n                alias: \"type-hint\",\n                greedy: !0,\n                lookbehind: !0\n            },\n            {\n                pattern: /([(,?]\\s*)(?:\\\\?\\b[a-z_]\\w*)+(?=\\s*\\$)/i,\n                alias: [\n                    \"class-name-fully-qualified\",\n                    \"type-hint\"\n                ],\n                greedy: !0,\n                lookbehind: !0,\n                inside: {\n                    punctuation: /\\\\/\n                }\n            },\n            {\n                pattern: /(\\)\\s*:\\s*(?:\\?\\s*)?)\\b[a-z_]\\w*(?!\\\\)\\b/i,\n                alias: \"return-type\",\n                greedy: !0,\n                lookbehind: !0\n            },\n            {\n                pattern: /(\\)\\s*:\\s*(?:\\?\\s*)?)(?:\\\\?\\b[a-z_]\\w*)+\\b(?!\\\\)/i,\n                alias: [\n                    \"class-name-fully-qualified\",\n                    \"return-type\"\n                ],\n                greedy: !0,\n                lookbehind: !0,\n                inside: {\n                    punctuation: /\\\\/\n                }\n            }\n        ],\n        constant: t,\n        function: {\n            pattern: /(^|[^\\\\\\w])\\\\?[a-z_](?:[\\w\\\\]*\\w)?(?=\\s*\\()/i,\n            lookbehind: !0,\n            inside: {\n                punctuation: /\\\\/\n            }\n        },\n        property: {\n            pattern: /(->\\s*)\\w+/,\n            lookbehind: !0\n        },\n        number: i,\n        operator: n,\n        punctuation: s\n    };\n    var l = {\n        pattern: /\\{\\$(?:\\{(?:\\{[^{}]+\\}|[^{}]+)\\}|[^{}])+\\}|(^|[^\\\\{])\\$+(?:\\w+(?:\\[[^\\r\\n\\[\\]]+\\]|->\\w+)?)/,\n        lookbehind: !0,\n        inside: e.languages.php\n    }, r = [\n        {\n            pattern: /<<<'([^']+)'[\\r\\n](?:.*[\\r\\n])*?\\1;/,\n            alias: \"nowdoc-string\",\n            greedy: !0,\n            inside: {\n                delimiter: {\n                    pattern: /^<<<'[^']+'|[a-z_]\\w*;$/i,\n                    alias: \"symbol\",\n                    inside: {\n                        punctuation: /^<<<'?|[';]$/\n                    }\n                }\n            }\n        },\n        {\n            pattern: /<<<(?:\"([^\"]+)\"[\\r\\n](?:.*[\\r\\n])*?\\1;|([a-z_]\\w*)[\\r\\n](?:.*[\\r\\n])*?\\2;)/i,\n            alias: \"heredoc-string\",\n            greedy: !0,\n            inside: {\n                delimiter: {\n                    pattern: /^<<<(?:\"[^\"]+\"|[a-z_]\\w*)|[a-z_]\\w*;$/i,\n                    alias: \"symbol\",\n                    inside: {\n                        punctuation: /^<<<\"?|[\";]$/\n                    }\n                },\n                interpolation: l\n            }\n        },\n        {\n            pattern: /`(?:\\\\[\\s\\S]|[^\\\\`])*`/,\n            alias: \"backtick-quoted-string\",\n            greedy: !0\n        },\n        {\n            pattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/,\n            alias: \"single-quoted-string\",\n            greedy: !0\n        },\n        {\n            pattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,\n            alias: \"double-quoted-string\",\n            greedy: !0,\n            inside: {\n                interpolation: l\n            }\n        }\n    ];\n    e.languages.insertBefore(\"php\", \"variable\", {\n        string: r,\n        attribute: {\n            pattern: /#\\[(?:[^\"'\\/#]|\\/(?![*/])|\\/\\/.*$|#(?!\\[).*$|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/|\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|'(?:\\\\[\\s\\S]|[^\\\\'])*')+\\](?=\\s*[a-z$#])/im,\n            greedy: !0,\n            inside: {\n                \"attribute-content\": {\n                    pattern: /^(#\\[)[\\s\\S]+(?=\\]$)/,\n                    lookbehind: !0,\n                    inside: {\n                        comment: a,\n                        string: r,\n                        \"attribute-class-name\": [\n                            {\n                                pattern: /([^:]|^)\\b[a-z_]\\w*(?!\\\\)\\b/i,\n                                alias: \"class-name\",\n                                greedy: !0,\n                                lookbehind: !0\n                            },\n                            {\n                                pattern: /([^:]|^)(?:\\\\?\\b[a-z_]\\w*)+/i,\n                                alias: [\n                                    \"class-name\",\n                                    \"class-name-fully-qualified\"\n                                ],\n                                greedy: !0,\n                                lookbehind: !0,\n                                inside: {\n                                    punctuation: /\\\\/\n                                }\n                            }\n                        ],\n                        constant: t,\n                        number: i,\n                        operator: n,\n                        punctuation: s\n                    }\n                },\n                delimiter: {\n                    pattern: /^#\\[|\\]$/,\n                    alias: \"punctuation\"\n                }\n            }\n        }\n    }), e.hooks.add(\"before-tokenize\", function(a) {\n        /<\\?/.test(a.code) && e.languages[\"markup-templating\"].buildPlaceholders(a, \"php\", /<\\?(?:[^\"'/#]|\\/(?![*/])|(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|(?:\\/\\/|#(?!\\[))(?:[^?\\n\\r]|\\?(?!>))*(?=$|\\?>|[\\r\\n])|#\\[|\\/\\*(?:[^*]|\\*(?!\\/))*(?:\\*\\/|$))*?(?:\\?>|$)/g);\n    }), e.hooks.add(\"after-tokenize\", function(a) {\n        e.languages[\"markup-templating\"].tokenizePlaceholders(a, \"php\");\n    });\n}(Prism);\n!function(a) {\n    var e = a.languages.javadoclike = {\n        parameter: {\n            pattern: /(^[\\t ]*(?:\\/{3}|\\*|\\/\\*\\*)\\s*@(?:arg|arguments|param)\\s+)\\w+/m,\n            lookbehind: !0\n        },\n        keyword: {\n            pattern: /(^[\\t ]*(?:\\/{3}|\\*|\\/\\*\\*)\\s*|\\{)@[a-z][a-zA-Z-]+\\b/m,\n            lookbehind: !0\n        },\n        punctuation: /[{}]/\n    };\n    Object.defineProperty(e, \"addSupport\", {\n        value: function(e, n) {\n            \"string\" == typeof e && (e = [\n                e\n            ]), e.forEach(function(e) {\n                !function(e, n) {\n                    var t = \"doc-comment\", r = a.languages[e];\n                    if (r) {\n                        var o = r[t];\n                        if (o || (o = (r = a.languages.insertBefore(e, \"comment\", {\n                            \"doc-comment\": {\n                                pattern: /(^|[^\\\\])\\/\\*\\*[^/][\\s\\S]*?(?:\\*\\/|$)/,\n                                lookbehind: !0,\n                                alias: \"comment\"\n                            }\n                        }))[t]), o instanceof RegExp && (o = r[t] = {\n                            pattern: o\n                        }), Array.isArray(o)) for(var i = 0, s = o.length; i < s; i++)o[i] instanceof RegExp && (o[i] = {\n                            pattern: o[i]\n                        }), n(o[i]);\n                        else n(o);\n                    }\n                }(e, function(a) {\n                    a.inside || (a.inside = {}), a.inside.rest = n;\n                });\n            });\n        }\n    }), e.addSupport([\n        \"java\",\n        \"javascript\",\n        \"php\"\n    ], e);\n}(Prism);\n!function(a) {\n    var e = /(^(?:[\\t ]*(?:\\*\\s*)*))[^*\\s].*$/m, n = \"(?:\\\\b[a-zA-Z]\\\\w+\\\\s*\\\\.\\\\s*)*\\\\b[A-Z]\\\\w*(?:\\\\s*<mem>)?|<mem>\".replace(/<mem>/g, function() {\n        return \"#\\\\s*\\\\w+(?:\\\\s*\\\\([^()]*\\\\))?\";\n    });\n    a.languages.javadoc = a.languages.extend(\"javadoclike\", {}), a.languages.insertBefore(\"javadoc\", \"keyword\", {\n        reference: {\n            pattern: RegExp(\"(@(?:exception|link|linkplain|see|throws|value)\\\\s+(?:\\\\*\\\\s*)?)(?:\" + n + \")\"),\n            lookbehind: !0,\n            inside: {\n                function: {\n                    pattern: /(#\\s*)\\w+(?=\\s*\\()/,\n                    lookbehind: !0\n                },\n                field: {\n                    pattern: /(#\\s*)\\w+/,\n                    lookbehind: !0\n                },\n                namespace: {\n                    pattern: /\\b(?:[a-z]\\w*\\s*\\.\\s*)+/,\n                    inside: {\n                        punctuation: /\\./\n                    }\n                },\n                \"class-name\": /\\b[A-Z]\\w*/,\n                keyword: a.languages.java.keyword,\n                punctuation: /[#()[\\],.]/\n            }\n        },\n        \"class-name\": {\n            pattern: /(@param\\s+)<[A-Z]\\w*>/,\n            lookbehind: !0,\n            inside: {\n                punctuation: /[.<>]/\n            }\n        },\n        \"code-section\": [\n            {\n                pattern: /(\\{@code\\s+(?!\\s))(?:[^\\s{}]|\\s+(?![\\s}])|\\{(?:[^{}]|\\{(?:[^{}]|\\{(?:[^{}]|\\{[^{}]*\\})*\\})*\\})*\\})+(?=\\s*\\})/,\n                lookbehind: !0,\n                inside: {\n                    code: {\n                        pattern: e,\n                        lookbehind: !0,\n                        inside: a.languages.java,\n                        alias: \"language-java\"\n                    }\n                }\n            },\n            {\n                pattern: /(<(code|pre|tt)>(?!<code>)\\s*)\\S(?:\\S|\\s+\\S)*?(?=\\s*<\\/\\2>)/,\n                lookbehind: !0,\n                inside: {\n                    line: {\n                        pattern: e,\n                        lookbehind: !0,\n                        inside: {\n                            tag: a.languages.markup.tag,\n                            entity: a.languages.markup.entity,\n                            code: {\n                                pattern: /.+/,\n                                inside: a.languages.java,\n                                alias: \"language-java\"\n                            }\n                        }\n                    }\n                }\n            }\n        ],\n        tag: a.languages.markup.tag,\n        entity: a.languages.markup.entity\n    }), a.languages.javadoclike.addSupport(\"java\", a.languages.javadoc);\n}(Prism);\nPrism.languages.javastacktrace = {\n    summary: {\n        pattern: /^([\\t ]*)(?:(?:Caused by:|Suppressed:|Exception in thread \"[^\"]*\")[\\t ]+)?[\\w$.]+(?::.*)?$/m,\n        lookbehind: !0,\n        inside: {\n            keyword: {\n                pattern: /^([\\t ]*)(?:(?:Caused by|Suppressed)(?=:)|Exception in thread)/m,\n                lookbehind: !0\n            },\n            string: {\n                pattern: /^(\\s*)\"[^\"]*\"/,\n                lookbehind: !0\n            },\n            exceptions: {\n                pattern: /^(:?\\s*)[\\w$.]+(?=:|$)/,\n                lookbehind: !0,\n                inside: {\n                    \"class-name\": /[\\w$]+$/,\n                    namespace: /\\b[a-z]\\w*\\b/,\n                    punctuation: /\\./\n                }\n            },\n            message: {\n                pattern: /(:\\s*)\\S.*/,\n                lookbehind: !0,\n                alias: \"string\"\n            },\n            punctuation: /:/\n        }\n    },\n    \"stack-frame\": {\n        pattern: /^([\\t ]*)at (?:[\\w$./]|@[\\w$.+-]*\\/)+(?:<init>)?\\([^()]*\\)/m,\n        lookbehind: !0,\n        inside: {\n            keyword: {\n                pattern: /^(\\s*)at(?= )/,\n                lookbehind: !0\n            },\n            source: [\n                {\n                    pattern: /(\\()\\w+\\.\\w+:\\d+(?=\\))/,\n                    lookbehind: !0,\n                    inside: {\n                        file: /^\\w+\\.\\w+/,\n                        punctuation: /:/,\n                        \"line-number\": {\n                            pattern: /\\b\\d+\\b/,\n                            alias: \"number\"\n                        }\n                    }\n                },\n                {\n                    pattern: /(\\()[^()]*(?=\\))/,\n                    lookbehind: !0,\n                    inside: {\n                        keyword: /^(?:Native Method|Unknown Source)$/\n                    }\n                }\n            ],\n            \"class-name\": /[\\w$]+(?=\\.(?:<init>|[\\w$]+)\\()/,\n            function: /(?:<init>|[\\w$]+)(?=\\()/,\n            \"class-loader\": {\n                pattern: /(\\s)[a-z]\\w*(?:\\.[a-z]\\w*)*(?=\\/[\\w@$.]*\\/)/,\n                lookbehind: !0,\n                alias: \"namespace\",\n                inside: {\n                    punctuation: /\\./\n                }\n            },\n            module: {\n                pattern: /([\\s/])[a-z]\\w*(?:\\.[a-z]\\w*)*(?:@[\\w$.+-]*)?(?=\\/)/,\n                lookbehind: !0,\n                inside: {\n                    version: {\n                        pattern: /(@)[\\s\\S]+/,\n                        lookbehind: !0,\n                        alias: \"number\"\n                    },\n                    punctuation: /[@.]/\n                }\n            },\n            namespace: {\n                pattern: /(?:\\b[a-z]\\w*\\.)+/,\n                inside: {\n                    punctuation: /\\./\n                }\n            },\n            punctuation: /[()/.]/\n        }\n    },\n    more: {\n        pattern: /^([\\t ]*)\\.{3} \\d+ [a-z]+(?: [a-z]+)*/m,\n        lookbehind: !0,\n        inside: {\n            punctuation: /\\.{3}/,\n            number: /\\d+/,\n            keyword: /\\b[a-z]+(?: [a-z]+)*\\b/\n        }\n    }\n};\nPrism.languages.jexl = {\n    string: /([\"'])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/,\n    transform: {\n        pattern: /(\\|\\s*)[a-zA-Zа-яА-Я_\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u00FF$][\\wа-яА-Я\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u00FF$]*/,\n        alias: \"function\",\n        lookbehind: !0\n    },\n    function: /[a-zA-Zа-яА-Я_\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u00FF$][\\wа-яА-Я\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u00FF$]*\\s*(?=\\()/,\n    number: /\\b\\d+(?:\\.\\d+)?\\b|\\B\\.\\d+\\b/,\n    operator: /[<>!]=?|-|\\+|&&|==|\\|\\|?|\\/\\/?|[?:*^%]/,\n    boolean: /\\b(?:false|true)\\b/,\n    keyword: /\\bin\\b/,\n    punctuation: /[{}[\\](),.]/\n};\nPrism.languages.jolie = Prism.languages.extend(\"clike\", {\n    string: {\n        pattern: /(^|[^\\\\])\"(?:\\\\[\\s\\S]|[^\"\\\\])*\"/,\n        lookbehind: !0,\n        greedy: !0\n    },\n    \"class-name\": {\n        pattern: /((?:\\b(?:as|courier|embed|in|inputPort|outputPort|service)\\b|@)[ \\t]*)\\w+/,\n        lookbehind: !0\n    },\n    keyword: /\\b(?:as|cH|comp|concurrent|constants|courier|cset|csets|default|define|else|embed|embedded|execution|exit|extender|for|foreach|forward|from|global|if|import|in|include|init|inputPort|install|instanceof|interface|is_defined|linkIn|linkOut|main|new|nullProcess|outputPort|over|private|provide|public|scope|sequential|service|single|spawn|synchronized|this|throw|throws|type|undef|until|while|with)\\b/,\n    function: /\\b[a-z_]\\w*(?=[ \\t]*[@(])/i,\n    number: /(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?l?/i,\n    operator: /-[-=>]?|\\+[+=]?|<[<=]?|[>=*!]=?|&&|\\|\\||[?\\/%^@|]/,\n    punctuation: /[()[\\]{},;.:]/,\n    builtin: /\\b(?:Byte|any|bool|char|double|enum|float|int|length|long|ranges|regex|string|undefined|void)\\b/\n}), Prism.languages.insertBefore(\"jolie\", \"keyword\", {\n    aggregates: {\n        pattern: /(\\bAggregates\\s*:\\s*)(?:\\w+(?:\\s+with\\s+\\w+)?\\s*,\\s*)*\\w+(?:\\s+with\\s+\\w+)?/,\n        lookbehind: !0,\n        inside: {\n            keyword: /\\bwith\\b/,\n            \"class-name\": /\\w+/,\n            punctuation: /,/\n        }\n    },\n    redirects: {\n        pattern: /(\\bRedirects\\s*:\\s*)(?:\\w+\\s*=>\\s*\\w+\\s*,\\s*)*(?:\\w+\\s*=>\\s*\\w+)/,\n        lookbehind: !0,\n        inside: {\n            punctuation: /,/,\n            \"class-name\": /\\w+/,\n            operator: /=>/\n        }\n    },\n    property: {\n        pattern: /\\b(?:Aggregates|[Ii]nterfaces|Java|Javascript|Jolie|[Ll]ocation|OneWay|[Pp]rotocol|Redirects|RequestResponse)\\b(?=[ \\t]*:)/\n    }\n});\n!function(e) {\n    var n = \"\\\\\\\\\\\\((?:[^()]|\\\\([^()]*\\\\))*\\\\)\", t = RegExp('(^|[^\\\\\\\\])\"(?:[^\"\\r\\n\\\\\\\\]|\\\\\\\\[^\\r\\n(]|__)*\"'.replace(/__/g, function() {\n        return n;\n    })), i = {\n        interpolation: {\n            pattern: RegExp(\"((?:^|[^\\\\\\\\])(?:\\\\\\\\{2})*)\" + n),\n            lookbehind: !0,\n            inside: {\n                content: {\n                    pattern: /^(\\\\\\()[\\s\\S]+(?=\\)$)/,\n                    lookbehind: !0,\n                    inside: null\n                },\n                punctuation: /^\\\\\\(|\\)$/\n            }\n        }\n    }, a = e.languages.jq = {\n        comment: /#.*/,\n        property: {\n            pattern: RegExp(t.source + \"(?=\\\\s*:(?!:))\"),\n            lookbehind: !0,\n            greedy: !0,\n            inside: i\n        },\n        string: {\n            pattern: t,\n            lookbehind: !0,\n            greedy: !0,\n            inside: i\n        },\n        function: {\n            pattern: /(\\bdef\\s+)[a-z_]\\w+/i,\n            lookbehind: !0\n        },\n        variable: /\\B\\$\\w+/,\n        \"property-literal\": {\n            pattern: /\\b[a-z_]\\w*(?=\\s*:(?!:))/i,\n            alias: \"property\"\n        },\n        keyword: /\\b(?:as|break|catch|def|elif|else|end|foreach|if|import|include|label|module|modulemeta|null|reduce|then|try|while)\\b/,\n        boolean: /\\b(?:false|true)\\b/,\n        number: /(?:\\b\\d+\\.|\\B\\.)?\\b\\d+(?:[eE][+-]?\\d+)?\\b/,\n        operator: [\n            {\n                pattern: /\\|=?/,\n                alias: \"pipe\"\n            },\n            /\\.\\.|[!=<>]?=|\\?\\/\\/|\\/\\/=?|[-+*/%]=?|[<>?]|\\b(?:and|not|or)\\b/\n        ],\n        \"c-style-function\": {\n            pattern: /\\b[a-z_]\\w*(?=\\s*\\()/i,\n            alias: \"function\"\n        },\n        punctuation: /::|[()\\[\\]{},:;]|\\.(?=\\s*[\\[\\w$])/,\n        dot: {\n            pattern: /\\./,\n            alias: \"important\"\n        }\n    };\n    i.interpolation.inside.content.inside = a;\n}(Prism);\n!function(e) {\n    e.languages.typescript = e.languages.extend(\"javascript\", {\n        \"class-name\": {\n            pattern: /(\\b(?:class|extends|implements|instanceof|interface|new|type)\\s+)(?!keyof\\b)(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?:\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>)?/,\n            lookbehind: !0,\n            greedy: !0,\n            inside: null\n        },\n        builtin: /\\b(?:Array|Function|Promise|any|boolean|console|never|number|string|symbol|unknown)\\b/\n    }), e.languages.typescript.keyword.push(/\\b(?:abstract|declare|is|keyof|readonly|require)\\b/, /\\b(?:asserts|infer|interface|module|namespace|type)\\b(?=\\s*(?:[{_$a-zA-Z\\xA0-\\uFFFF]|$))/, /\\btype\\b(?=\\s*(?:[\\{*]|$))/), delete e.languages.typescript.parameter, delete e.languages.typescript[\"literal-property\"];\n    var s = e.languages.extend(\"typescript\", {});\n    delete s[\"class-name\"], e.languages.typescript[\"class-name\"].inside = s, e.languages.insertBefore(\"typescript\", \"function\", {\n        decorator: {\n            pattern: /@[$\\w\\xA0-\\uFFFF]+/,\n            inside: {\n                at: {\n                    pattern: /^@/,\n                    alias: \"operator\"\n                },\n                function: /^[\\s\\S]+/\n            }\n        },\n        \"generic-function\": {\n            pattern: /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>(?=\\s*\\()/,\n            greedy: !0,\n            inside: {\n                function: /^#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*/,\n                generic: {\n                    pattern: /<[\\s\\S]+/,\n                    alias: \"class-name\",\n                    inside: s\n                }\n            }\n        }\n    }), e.languages.ts = e.languages.typescript;\n}(Prism);\n!function(e) {\n    var a = e.languages.javascript, n = \"\\\\{(?:[^{}]|\\\\{(?:[^{}]|\\\\{[^{}]*\\\\})*\\\\})+\\\\}\", t = \"(@(?:arg|argument|param|property)\\\\s+(?:\" + n + \"\\\\s+)?)\";\n    e.languages.jsdoc = e.languages.extend(\"javadoclike\", {\n        parameter: {\n            pattern: RegExp(t + \"(?:(?!\\\\s)[$\\\\w\\\\xA0-\\\\uFFFF.])+(?=\\\\s|$)\"),\n            lookbehind: !0,\n            inside: {\n                punctuation: /\\./\n            }\n        }\n    }), e.languages.insertBefore(\"jsdoc\", \"keyword\", {\n        \"optional-parameter\": {\n            pattern: RegExp(t + \"\\\\[(?:(?!\\\\s)[$\\\\w\\\\xA0-\\\\uFFFF.])+(?:=[^[\\\\]]+)?\\\\](?=\\\\s|$)\"),\n            lookbehind: !0,\n            inside: {\n                parameter: {\n                    pattern: /(^\\[)[$\\w\\xA0-\\uFFFF\\.]+/,\n                    lookbehind: !0,\n                    inside: {\n                        punctuation: /\\./\n                    }\n                },\n                code: {\n                    pattern: /(=)[\\s\\S]*(?=\\]$)/,\n                    lookbehind: !0,\n                    inside: a,\n                    alias: \"language-javascript\"\n                },\n                punctuation: /[=[\\]]/\n            }\n        },\n        \"class-name\": [\n            {\n                pattern: RegExp(\"(@(?:augments|class|extends|interface|memberof!?|template|this|typedef)\\\\s+(?:<TYPE>\\\\s+)?)[A-Z]\\\\w*(?:\\\\.[A-Z]\\\\w*)*\".replace(/<TYPE>/g, function() {\n                    return n;\n                })),\n                lookbehind: !0,\n                inside: {\n                    punctuation: /\\./\n                }\n            },\n            {\n                pattern: RegExp(\"(@[a-z]+\\\\s+)\" + n),\n                lookbehind: !0,\n                inside: {\n                    string: a.string,\n                    number: a.number,\n                    boolean: a.boolean,\n                    keyword: e.languages.typescript.keyword,\n                    operator: /=>|\\.\\.\\.|[&|?:*]/,\n                    punctuation: /[.,;=<>{}()[\\]]/\n                }\n            }\n        ],\n        example: {\n            pattern: /(@example\\s+(?!\\s))(?:[^@\\s]|\\s+(?!\\s))+?(?=\\s*(?:\\*\\s*)?(?:@\\w|\\*\\/))/,\n            lookbehind: !0,\n            inside: {\n                code: {\n                    pattern: /^([\\t ]*(?:\\*\\s*)?)\\S.*$/m,\n                    lookbehind: !0,\n                    inside: a,\n                    alias: \"language-javascript\"\n                }\n            }\n        }\n    }), e.languages.javadoclike.addSupport(\"javascript\", e.languages.jsdoc);\n}(Prism);\n!function(a) {\n    function e(a, e) {\n        return RegExp(a.replace(/<ID>/g, function() {\n            return \"(?!\\\\s)[_$a-zA-Z\\\\xA0-\\\\uFFFF](?:(?!\\\\s)[$\\\\w\\\\xA0-\\\\uFFFF])*\";\n        }), e);\n    }\n    a.languages.insertBefore(\"javascript\", \"function-variable\", {\n        \"method-variable\": {\n            pattern: RegExp(\"(\\\\.\\\\s*)\" + a.languages.javascript[\"function-variable\"].pattern.source),\n            lookbehind: !0,\n            alias: [\n                \"function-variable\",\n                \"method\",\n                \"function\",\n                \"property-access\"\n            ]\n        }\n    }), a.languages.insertBefore(\"javascript\", \"function\", {\n        method: {\n            pattern: RegExp(\"(\\\\.\\\\s*)\" + a.languages.javascript.function.source),\n            lookbehind: !0,\n            alias: [\n                \"function\",\n                \"property-access\"\n            ]\n        }\n    }), a.languages.insertBefore(\"javascript\", \"constant\", {\n        \"known-class-name\": [\n            {\n                pattern: /\\b(?:(?:Float(?:32|64)|(?:Int|Uint)(?:8|16|32)|Uint8Clamped)?Array|ArrayBuffer|BigInt|Boolean|DataView|Date|Error|Function|Intl|JSON|(?:Weak)?(?:Map|Set)|Math|Number|Object|Promise|Proxy|Reflect|RegExp|String|Symbol|WebAssembly)\\b/,\n                alias: \"class-name\"\n            },\n            {\n                pattern: /\\b(?:[A-Z]\\w*)Error\\b/,\n                alias: \"class-name\"\n            }\n        ]\n    }), a.languages.insertBefore(\"javascript\", \"keyword\", {\n        imports: {\n            pattern: e(\"(\\\\bimport\\\\b\\\\s*)(?:<ID>(?:\\\\s*,\\\\s*(?:\\\\*\\\\s*as\\\\s+<ID>|\\\\{[^{}]*\\\\}))?|\\\\*\\\\s*as\\\\s+<ID>|\\\\{[^{}]*\\\\})(?=\\\\s*\\\\bfrom\\\\b)\"),\n            lookbehind: !0,\n            inside: a.languages.javascript\n        },\n        exports: {\n            pattern: e(\"(\\\\bexport\\\\b\\\\s*)(?:\\\\*(?:\\\\s*as\\\\s+<ID>)?(?=\\\\s*\\\\bfrom\\\\b)|\\\\{[^{}]*\\\\})\"),\n            lookbehind: !0,\n            inside: a.languages.javascript\n        }\n    }), a.languages.javascript.keyword.unshift({\n        pattern: /\\b(?:as|default|export|from|import)\\b/,\n        alias: \"module\"\n    }, {\n        pattern: /\\b(?:await|break|catch|continue|do|else|finally|for|if|return|switch|throw|try|while|yield)\\b/,\n        alias: \"control-flow\"\n    }, {\n        pattern: /\\bnull\\b/,\n        alias: [\n            \"null\",\n            \"nil\"\n        ]\n    }, {\n        pattern: /\\bundefined\\b/,\n        alias: \"nil\"\n    }), a.languages.insertBefore(\"javascript\", \"operator\", {\n        spread: {\n            pattern: /\\.{3}/,\n            alias: \"operator\"\n        },\n        arrow: {\n            pattern: /=>/,\n            alias: \"operator\"\n        }\n    }), a.languages.insertBefore(\"javascript\", \"punctuation\", {\n        \"property-access\": {\n            pattern: e(\"(\\\\.\\\\s*)#?<ID>\"),\n            lookbehind: !0\n        },\n        \"maybe-class-name\": {\n            pattern: /(^|[^$\\w\\xA0-\\uFFFF])[A-Z][$\\w\\xA0-\\uFFFF]+/,\n            lookbehind: !0\n        },\n        dom: {\n            pattern: /\\b(?:document|(?:local|session)Storage|location|navigator|performance|window)\\b/,\n            alias: \"variable\"\n        },\n        console: {\n            pattern: /\\bconsole(?=\\s*\\.)/,\n            alias: \"class-name\"\n        }\n    });\n    for(var t = [\n        \"function\",\n        \"function-variable\",\n        \"method\",\n        \"method-variable\",\n        \"property-access\"\n    ], r = 0; r < t.length; r++){\n        var n = t[r], s = a.languages.javascript[n];\n        \"RegExp\" === a.util.type(s) && (s = a.languages.javascript[n] = {\n            pattern: s\n        });\n        var o = s.inside || {};\n        s.inside = o, o[\"maybe-class-name\"] = /^[A-Z][\\s\\S]*/;\n    }\n}(Prism);\nPrism.languages.json = {\n    property: {\n        pattern: /(^|[^\\\\])\"(?:\\\\.|[^\\\\\"\\r\\n])*\"(?=\\s*:)/,\n        lookbehind: !0,\n        greedy: !0\n    },\n    string: {\n        pattern: /(^|[^\\\\])\"(?:\\\\.|[^\\\\\"\\r\\n])*\"(?!\\s*:)/,\n        lookbehind: !0,\n        greedy: !0\n    },\n    comment: {\n        pattern: /\\/\\/.*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n        greedy: !0\n    },\n    number: /-?\\b\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?\\b/i,\n    punctuation: /[{}[\\],]/,\n    operator: /:/,\n    boolean: /\\b(?:false|true)\\b/,\n    null: {\n        pattern: /\\bnull\\b/,\n        alias: \"keyword\"\n    }\n}, Prism.languages.webmanifest = Prism.languages.json;\n!function(n) {\n    var e = /(\"|')(?:\\\\(?:\\r\\n?|\\n|.)|(?!\\1)[^\\\\\\r\\n])*\\1/;\n    n.languages.json5 = n.languages.extend(\"json\", {\n        property: [\n            {\n                pattern: RegExp(e.source + \"(?=\\\\s*:)\"),\n                greedy: !0\n            },\n            {\n                pattern: /(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*:)/,\n                alias: \"unquoted\"\n            }\n        ],\n        string: {\n            pattern: e,\n            greedy: !0\n        },\n        number: /[+-]?\\b(?:NaN|Infinity|0x[a-fA-F\\d]+)\\b|[+-]?(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[eE][+-]?\\d+\\b)?/\n    });\n}(Prism);\nPrism.languages.jsonp = Prism.languages.extend(\"json\", {\n    punctuation: /[{}[\\]();,.]/\n}), Prism.languages.insertBefore(\"jsonp\", \"punctuation\", {\n    function: /(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*\\()/\n});\nPrism.languages.jsstacktrace = {\n    \"error-message\": {\n        pattern: /^\\S.*/m,\n        alias: \"string\"\n    },\n    \"stack-frame\": {\n        pattern: /(^[ \\t]+)at[ \\t].*/m,\n        lookbehind: !0,\n        inside: {\n            \"not-my-code\": {\n                pattern: /^at[ \\t]+(?!\\s)(?:node\\.js|<unknown>|.*(?:node_modules|\\(<anonymous>\\)|\\(<unknown>|<anonymous>$|\\(internal\\/|\\(node\\.js)).*/m,\n                alias: \"comment\"\n            },\n            filename: {\n                pattern: /(\\bat\\s+(?!\\s)|\\()(?:[a-zA-Z]:)?[^():]+(?=:)/,\n                lookbehind: !0,\n                alias: \"url\"\n            },\n            function: {\n                pattern: /(\\bat\\s+(?:new\\s+)?)(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF<][.$\\w\\xA0-\\uFFFF<>]*/,\n                lookbehind: !0,\n                inside: {\n                    punctuation: /\\./\n                }\n            },\n            punctuation: /[()]/,\n            keyword: /\\b(?:at|new)\\b/,\n            alias: {\n                pattern: /\\[(?:as\\s+)?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*\\]/,\n                alias: \"variable\"\n            },\n            \"line-number\": {\n                pattern: /:\\d+(?::\\d+)?\\b/,\n                alias: \"number\",\n                inside: {\n                    punctuation: /:/\n                }\n            }\n        }\n    }\n};\n!function(e) {\n    var t = e.languages.javascript[\"template-string\"], n = t.pattern.source, r = t.inside.interpolation, a = r.inside[\"interpolation-punctuation\"], i = r.pattern.source;\n    function o(t, r) {\n        if (e.languages[t]) return {\n            pattern: RegExp(\"((?:\" + r + \")\\\\s*)\" + n),\n            lookbehind: !0,\n            greedy: !0,\n            inside: {\n                \"template-punctuation\": {\n                    pattern: /^`|`$/,\n                    alias: \"string\"\n                },\n                \"embedded-code\": {\n                    pattern: /[\\s\\S]+/,\n                    alias: t\n                }\n            }\n        };\n    }\n    function s(e, t) {\n        return \"___\" + t.toUpperCase() + \"_\" + e + \"___\";\n    }\n    function p(t, n, r) {\n        var a = {\n            code: t,\n            grammar: n,\n            language: r\n        };\n        return e.hooks.run(\"before-tokenize\", a), a.tokens = e.tokenize(a.code, a.grammar), e.hooks.run(\"after-tokenize\", a), a.tokens;\n    }\n    function l(t) {\n        var n = {};\n        n[\"interpolation-punctuation\"] = a;\n        var i = e.tokenize(t, n);\n        if (3 === i.length) {\n            var o = [\n                1,\n                1\n            ];\n            o.push.apply(o, p(i[1], e.languages.javascript, \"javascript\")), i.splice.apply(i, o);\n        }\n        return new e.Token(\"interpolation\", i, r.alias, t);\n    }\n    function g(t, n, r) {\n        var a = e.tokenize(t, {\n            interpolation: {\n                pattern: RegExp(i),\n                lookbehind: !0\n            }\n        }), o = 0, g = {}, u = p(a.map(function(e) {\n            if (\"string\" == typeof e) return e;\n            for(var n, a = e.content; -1 !== t.indexOf(n = s(o++, r)););\n            return g[n] = a, n;\n        }).join(\"\"), n, r), c = Object.keys(g);\n        return o = 0, function e(t) {\n            for(var n = 0; n < t.length; n++){\n                if (o >= c.length) return;\n                var r = t[n];\n                if (\"string\" == typeof r || \"string\" == typeof r.content) {\n                    var a = c[o], i = \"string\" == typeof r ? r : r.content, s = i.indexOf(a);\n                    if (-1 !== s) {\n                        ++o;\n                        var p = i.substring(0, s), u = l(g[a]), f = i.substring(s + a.length), y = [];\n                        if (p && y.push(p), y.push(u), f) {\n                            var v = [\n                                f\n                            ];\n                            e(v), y.push.apply(y, v);\n                        }\n                        \"string\" == typeof r ? (t.splice.apply(t, [\n                            n,\n                            1\n                        ].concat(y)), n += y.length - 1) : r.content = y;\n                    }\n                } else {\n                    var d = r.content;\n                    Array.isArray(d) ? e(d) : e([\n                        d\n                    ]);\n                }\n            }\n        }(u), new e.Token(r, u, \"language-\" + r, t);\n    }\n    e.languages.javascript[\"template-string\"] = [\n        o(\"css\", \"\\\\b(?:styled(?:\\\\([^)]*\\\\))?(?:\\\\s*\\\\.\\\\s*\\\\w+(?:\\\\([^)]*\\\\))*)*|css(?:\\\\s*\\\\.\\\\s*(?:global|resolve))?|createGlobalStyle|keyframes)\"),\n        o(\"html\", \"\\\\bhtml|\\\\.\\\\s*(?:inner|outer)HTML\\\\s*\\\\+?=\"),\n        o(\"svg\", \"\\\\bsvg\"),\n        o(\"markdown\", \"\\\\b(?:markdown|md)\"),\n        o(\"graphql\", \"\\\\b(?:gql|graphql(?:\\\\s*\\\\.\\\\s*experimental)?)\"),\n        o(\"sql\", \"\\\\bsql\"),\n        t\n    ].filter(Boolean);\n    var u = {\n        javascript: !0,\n        js: !0,\n        typescript: !0,\n        ts: !0,\n        jsx: !0,\n        tsx: !0\n    };\n    function c(e) {\n        return \"string\" == typeof e ? e : Array.isArray(e) ? e.map(c).join(\"\") : c(e.content);\n    }\n    e.hooks.add(\"after-tokenize\", function(t) {\n        t.language in u && function t(n) {\n            for(var r = 0, a = n.length; r < a; r++){\n                var i = n[r];\n                if (\"string\" != typeof i) {\n                    var o = i.content;\n                    if (Array.isArray(o)) if (\"template-string\" === i.type) {\n                        var s = o[1];\n                        if (3 === o.length && \"string\" != typeof s && \"embedded-code\" === s.type) {\n                            var p = c(s), l = s.alias, u = Array.isArray(l) ? l[0] : l, f = e.languages[u];\n                            if (!f) continue;\n                            o[1] = g(p, f, u);\n                        }\n                    } else t(o);\n                    else \"string\" != typeof o && t([\n                        o\n                    ]);\n                }\n            }\n        }(t.tokens);\n    });\n}(Prism);\nPrism.languages.julia = {\n    comment: {\n        pattern: /(^|[^\\\\])(?:#=(?:[^#=]|=(?!#)|#(?!=)|#=(?:[^#=]|=(?!#)|#(?!=))*=#)*=#|#.*)/,\n        lookbehind: !0\n    },\n    regex: {\n        pattern: /r\"(?:\\\\.|[^\"\\\\\\r\\n])*\"[imsx]{0,4}/,\n        greedy: !0\n    },\n    string: {\n        pattern: /\"\"\"[\\s\\S]+?\"\"\"|(?:\\b\\w+)?\"(?:\\\\.|[^\"\\\\\\r\\n])*\"|`(?:[^\\\\`\\r\\n]|\\\\.)*`/,\n        greedy: !0\n    },\n    char: {\n        pattern: /(^|[^\\w'])'(?:\\\\[^\\r\\n][^'\\r\\n]*|[^\\\\\\r\\n])'/,\n        lookbehind: !0,\n        greedy: !0\n    },\n    keyword: /\\b(?:abstract|baremodule|begin|bitstype|break|catch|ccall|const|continue|do|else|elseif|end|export|finally|for|function|global|if|immutable|import|importall|in|let|local|macro|module|print|println|quote|return|struct|try|type|typealias|using|while)\\b/,\n    boolean: /\\b(?:false|true)\\b/,\n    number: /(?:\\b(?=\\d)|\\B(?=\\.))(?:0[box])?(?:[\\da-f]+(?:_[\\da-f]+)*(?:\\.(?:\\d+(?:_\\d+)*)?)?|\\.\\d+(?:_\\d+)*)(?:[efp][+-]?\\d+(?:_\\d+)*)?j?/i,\n    operator: /&&|\\|\\||[-+*^%÷⊻&$\\\\]=?|\\/[\\/=]?|!=?=?|\\|[=>]?|<(?:<=?|[=:|])?|>(?:=|>>?=?)?|==?=?|[~≠≤≥'√∛]/,\n    punctuation: /::?|[{}[\\]();,.?]/,\n    constant: /\\b(?:(?:Inf|NaN)(?:16|32|64)?|im|pi)\\b|[πℯ]/\n};\nPrism.languages.keepalived = {\n    comment: {\n        pattern: /[#!].*/,\n        greedy: !0\n    },\n    string: {\n        pattern: /(^|[^\\\\])(?:\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"|'(?:\\\\(?:\\r\\n|[\\s\\S])|[^'\\\\\\r\\n])*')/,\n        lookbehind: !0,\n        greedy: !0\n    },\n    ip: {\n        pattern: RegExp(\"\\\\b(?:(?:(?:[\\\\da-f]{1,4}:){7}[\\\\da-f]{1,4}|(?:[\\\\da-f]{1,4}:){6}:[\\\\da-f]{1,4}|(?:[\\\\da-f]{1,4}:){5}:(?:[\\\\da-f]{1,4}:)?[\\\\da-f]{1,4}|(?:[\\\\da-f]{1,4}:){4}:(?:[\\\\da-f]{1,4}:){0,2}[\\\\da-f]{1,4}|(?:[\\\\da-f]{1,4}:){3}:(?:[\\\\da-f]{1,4}:){0,3}[\\\\da-f]{1,4}|(?:[\\\\da-f]{1,4}:){2}:(?:[\\\\da-f]{1,4}:){0,4}[\\\\da-f]{1,4}|(?:[\\\\da-f]{1,4}:){6}<ipv4>|(?:[\\\\da-f]{1,4}:){0,5}:<ipv4>|::(?:[\\\\da-f]{1,4}:){0,5}<ipv4>|[\\\\da-f]{1,4}::(?:[\\\\da-f]{1,4}:){0,5}[\\\\da-f]{1,4}|::(?:[\\\\da-f]{1,4}:){0,6}[\\\\da-f]{1,4}|(?:[\\\\da-f]{1,4}:){1,7}:)(?:/\\\\d{1,3})?|<ipv4>(?:/\\\\d{1,2})?)\\\\b\".replace(/<ipv4>/g, function() {\n            return \"(?:(?:(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)\\\\.){3}(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d))\";\n        }), \"i\"),\n        alias: \"number\"\n    },\n    path: {\n        pattern: /(\\s)\\/(?:[^\\/\\s]+\\/)*[^\\/\\s]*|\\b[a-zA-Z]:\\\\(?:[^\\\\\\s]+\\\\)*[^\\\\\\s]*/,\n        lookbehind: !0,\n        alias: \"string\"\n    },\n    variable: /\\$\\{?\\w+\\}?/,\n    email: {\n        pattern: /[\\w-]+@[\\w-]+(?:\\.[\\w-]{2,3}){1,2}/,\n        alias: \"string\"\n    },\n    \"conditional-configuration\": {\n        pattern: /@\\^?[\\w-]+/,\n        alias: \"variable\"\n    },\n    operator: /=/,\n    property: /\\b(?:BFD_CHECK|DNS_CHECK|FILE_CHECK|HTTP_GET|MISC_CHECK|NAME|PING_CHECK|SCRIPTS|SMTP_CHECK|SSL|SSL_GET|TCP_CHECK|UDP_CHECK|accept|advert_int|alpha|auth_pass|auth_type|authentication|bfd_cpu_affinity|bfd_instance|bfd_no_swap|bfd_priority|bfd_process_name|bfd_rlimit_rttime|bfd_rt_priority|bind_if|bind_port|bindto|ca|certificate|check_unicast_src|checker|checker_cpu_affinity|checker_log_all_failures|checker_no_swap|checker_priority|checker_rlimit_rttime|checker_rt_priority|child_wait_time|connect_ip|connect_port|connect_timeout|dbus_service_name|debug|default_interface|delay|delay_before_retry|delay_loop|digest|dont_track_primary|dynamic|dynamic_interfaces|enable_(?:dbus|script_security|sni|snmp_checker|snmp_rfc|snmp_rfcv2|snmp_rfcv3|snmp_vrrp|traps)|end|fall|fast_recovery|file|flag-[123]|fork_delay|full_command|fwmark|garp_group|garp_interval|garp_lower_prio_delay|garp_lower_prio_repeat|garp_master_delay|garp_master_refresh|garp_master_refresh_repeat|garp_master_repeat|global_defs|global_tracking|gna_interval|group|ha_suspend|hashed|helo_name|higher_prio_send_advert|hoplimit|http_protocol|hysteresis|idle_tx|include|inhibit_on_failure|init_fail|init_file|instance|interface|interfaces|interval|ip_family|ipvs_process_name|keepalived.conf|kernel_rx_buf_size|key|linkbeat_interfaces|linkbeat_use_polling|log_all_failures|log_unknown_vrids|lower_prio_no_advert|lthreshold|lvs_flush|lvs_flush_onstop|lvs_method|lvs_netlink_cmd_rcv_bufs|lvs_netlink_cmd_rcv_bufs_force|lvs_netlink_monitor_rcv_bufs|lvs_netlink_monitor_rcv_bufs_force|lvs_notify_fifo|lvs_notify_fifo_script|lvs_sched|lvs_sync_daemon|max_auto_priority|max_hops|mcast_src_ip|mh-fallback|mh-port|min_auto_priority_delay|min_rx|min_tx|misc_dynamic|misc_path|misc_timeout|multiplier|name|namespace_with_ipsets|native_ipv6|neighbor_ip|net_namespace|net_namespace_ipvs|nftables|nftables_counters|nftables_ifindex|nftables_priority|no_accept|no_checker_emails|no_email_faults|nopreempt|notification_email|notification_email_from|notify|notify_backup|notify_deleted|notify_down|notify_fault|notify_fifo|notify_fifo_script|notify_master|notify_master_rx_lower_pri|notify_priority_changes|notify_stop|notify_up|old_unicast_checksum|omega|ops|param_match|passive|password|path|persistence_engine|persistence_granularity|persistence_timeout|preempt|preempt_delay|priority|process|process_monitor_rcv_bufs|process_monitor_rcv_bufs_force|process_name|process_names|promote_secondaries|protocol|proxy_arp|proxy_arp_pvlan|quorum|quorum_down|quorum_max|quorum_up|random_seed|real_server|regex|regex_max_offset|regex_min_offset|regex_no_match|regex_options|regex_stack|reload_repeat|reload_time_file|require_reply|retry|rise|router_id|rs_init_notifies|script|script_user|sh-fallback|sh-port|shutdown_script|shutdown_script_timeout|skip_check_adv_addr|smtp_alert|smtp_alert_checker|smtp_alert_vrrp|smtp_connect_timeout|smtp_helo_name|smtp_server|snmp_socket|sorry_server|sorry_server_inhibit|sorry_server_lvs_method|source_ip|start|startup_script|startup_script_timeout|state|static_ipaddress|static_routes|static_rules|status_code|step|strict_mode|sync_group_tracking_weight|terminate_delay|timeout|track_bfd|track_file|track_group|track_interface|track_process|track_script|track_src_ip|ttl|type|umask|unicast_peer|unicast_src_ip|unicast_ttl|url|use_ipvlan|use_pid_dir|use_vmac|user|uthreshold|val[123]|version|virtual_ipaddress|virtual_ipaddress_excluded|virtual_router_id|virtual_routes|virtual_rules|virtual_server|virtual_server_group|virtualhost|vmac_xmit_base|vrrp|vrrp_(?:check_unicast_src|cpu_affinity|garp_interval|garp_lower_prio_delay|garp_lower_prio_repeat|garp_master_delay|garp_master_refresh|garp_master_refresh_repeat|garp_master_repeat|gna_interval|higher_prio_send_advert|instance|ipsets|iptables|lower_prio_no_advert|mcast_group4|mcast_group6|min_garp|netlink_cmd_rcv_bufs|netlink_cmd_rcv_bufs_force|netlink_monitor_rcv_bufs|netlink_monitor_rcv_bufs_force|no_swap|notify_fifo|notify_fifo_script|notify_priority_changes|priority|process_name|rlimit_rttime|rt_priority|rx_bufs_multiplier|rx_bufs_policy|script|skip_check_adv_addr|startup_delay|strict|sync_group|track_process|version)|warmup|weight)\\b/,\n    constant: /\\b(?:A|AAAA|AH|BACKUP|CNAME|DR|MASTER|MX|NAT|NS|PASS|SCTP|SOA|TCP|TUN|TXT|UDP|dh|fo|lblc|lblcr|lc|mh|nq|ovf|rr|sed|sh|wlc|wrr)\\b/,\n    number: {\n        pattern: /(^|[^\\w.-])-?\\d+(?:\\.\\d+)?/,\n        lookbehind: !0\n    },\n    boolean: /\\b(?:false|no|off|on|true|yes)\\b/,\n    punctuation: /[\\{\\}]/\n};\nPrism.languages.keyman = {\n    comment: {\n        pattern: /\\bc .*/i,\n        greedy: !0\n    },\n    string: {\n        pattern: /\"[^\"\\r\\n]*\"|'[^'\\r\\n]*'/,\n        greedy: !0\n    },\n    \"virtual-key\": {\n        pattern: /\\[\\s*(?:(?:ALT|CAPS|CTRL|LALT|LCTRL|NCAPS|RALT|RCTRL|SHIFT)\\s+)*(?:[TKU]_[\\w?]+|[A-E]\\d\\d?|\"[^\"\\r\\n]*\"|'[^'\\r\\n]*')\\s*\\]/i,\n        greedy: !0,\n        alias: \"function\"\n    },\n    \"header-keyword\": {\n        pattern: /&\\w+/,\n        alias: \"bold\"\n    },\n    \"header-statement\": {\n        pattern: /\\b(?:bitmap|bitmaps|caps always off|caps on only|copyright|hotkey|language|layout|message|name|shift frees caps|version)\\b/i,\n        alias: \"bold\"\n    },\n    \"rule-keyword\": {\n        pattern: /\\b(?:any|baselayout|beep|call|context|deadkey|dk|if|index|layer|notany|nul|outs|platform|reset|return|save|set|store|use)\\b/i,\n        alias: \"keyword\"\n    },\n    \"structural-keyword\": {\n        pattern: /\\b(?:ansi|begin|group|match|newcontext|nomatch|postkeystroke|readonly|unicode|using keys)\\b/i,\n        alias: \"keyword\"\n    },\n    \"compile-target\": {\n        pattern: /\\$(?:keyman|keymanonly|keymanweb|kmfl|weaver):/i,\n        alias: \"property\"\n    },\n    number: /\\b(?:U\\+[\\dA-F]+|d\\d+|x[\\da-f]+|\\d+)\\b/i,\n    operator: /[+>\\\\$]|\\.\\./,\n    punctuation: /[()=,]/\n};\n!function(n) {\n    n.languages.kotlin = n.languages.extend(\"clike\", {\n        keyword: {\n            pattern: /(^|[^.])\\b(?:abstract|actual|annotation|as|break|by|catch|class|companion|const|constructor|continue|crossinline|data|do|dynamic|else|enum|expect|external|final|finally|for|fun|get|if|import|in|infix|init|inline|inner|interface|internal|is|lateinit|noinline|null|object|open|operator|out|override|package|private|protected|public|reified|return|sealed|set|super|suspend|tailrec|this|throw|to|try|typealias|val|var|vararg|when|where|while)\\b/,\n            lookbehind: !0\n        },\n        function: [\n            {\n                pattern: /(?:`[^\\r\\n`]+`|\\b\\w+)(?=\\s*\\()/,\n                greedy: !0\n            },\n            {\n                pattern: /(\\.)(?:`[^\\r\\n`]+`|\\w+)(?=\\s*\\{)/,\n                lookbehind: !0,\n                greedy: !0\n            }\n        ],\n        number: /\\b(?:0[xX][\\da-fA-F]+(?:_[\\da-fA-F]+)*|0[bB][01]+(?:_[01]+)*|\\d+(?:_\\d+)*(?:\\.\\d+(?:_\\d+)*)?(?:[eE][+-]?\\d+(?:_\\d+)*)?[fFL]?)\\b/,\n        operator: /\\+[+=]?|-[-=>]?|==?=?|!(?:!|==?)?|[\\/*%<>]=?|[?:]:?|\\.\\.|&&|\\|\\||\\b(?:and|inv|or|shl|shr|ushr|xor)\\b/\n    }), delete n.languages.kotlin[\"class-name\"];\n    var e = {\n        \"interpolation-punctuation\": {\n            pattern: /^\\$\\{?|\\}$/,\n            alias: \"punctuation\"\n        },\n        expression: {\n            pattern: /[\\s\\S]+/,\n            inside: n.languages.kotlin\n        }\n    };\n    n.languages.insertBefore(\"kotlin\", \"string\", {\n        \"string-literal\": [\n            {\n                pattern: /\"\"\"(?:[^$]|\\$(?:(?!\\{)|\\{[^{}]*\\}))*?\"\"\"/,\n                alias: \"multiline\",\n                inside: {\n                    interpolation: {\n                        pattern: /\\$(?:[a-z_]\\w*|\\{[^{}]*\\})/i,\n                        inside: e\n                    },\n                    string: /[\\s\\S]+/\n                }\n            },\n            {\n                pattern: /\"(?:[^\"\\\\\\r\\n$]|\\\\.|\\$(?:(?!\\{)|\\{[^{}]*\\}))*\"/,\n                alias: \"singleline\",\n                inside: {\n                    interpolation: {\n                        pattern: /((?:^|[^\\\\])(?:\\\\{2})*)\\$(?:[a-z_]\\w*|\\{[^{}]*\\})/i,\n                        lookbehind: !0,\n                        inside: e\n                    },\n                    string: /[\\s\\S]+/\n                }\n            }\n        ],\n        char: {\n            pattern: /'(?:[^'\\\\\\r\\n]|\\\\(?:.|u[a-fA-F0-9]{0,4}))'/,\n            greedy: !0\n        }\n    }), delete n.languages.kotlin.string, n.languages.insertBefore(\"kotlin\", \"keyword\", {\n        annotation: {\n            pattern: /\\B@(?:\\w+:)?(?:[A-Z]\\w*|\\[[^\\]]+\\])/,\n            alias: \"builtin\"\n        }\n    }), n.languages.insertBefore(\"kotlin\", \"function\", {\n        label: {\n            pattern: /\\b\\w+@|@\\w+\\b/,\n            alias: \"symbol\"\n        }\n    }), n.languages.kt = n.languages.kotlin, n.languages.kts = n.languages.kotlin;\n}(Prism);\n!function(n) {\n    function o(n, o) {\n        return RegExp(n.replace(/<nonId>/g, \"\\\\s\\\\x00-\\\\x1f\\\\x22-\\\\x2f\\\\x3a-\\\\x3f\\\\x5b-\\\\x5e\\\\x60\\\\x7b-\\\\x7e\"), o);\n    }\n    n.languages.kumir = {\n        comment: {\n            pattern: /\\|.*/\n        },\n        prolog: {\n            pattern: /#.*/,\n            greedy: !0\n        },\n        string: {\n            pattern: /\"[^\\n\\r\"]*\"|'[^\\n\\r']*'/,\n            greedy: !0\n        },\n        boolean: {\n            pattern: o(\"(^|[<nonId>])(?:да|нет)(?=[<nonId>]|$)\"),\n            lookbehind: !0\n        },\n        \"operator-word\": {\n            pattern: o(\"(^|[<nonId>])(?:и|или|не)(?=[<nonId>]|$)\"),\n            lookbehind: !0,\n            alias: \"keyword\"\n        },\n        \"system-variable\": {\n            pattern: o(\"(^|[<nonId>])знач(?=[<nonId>]|$)\"),\n            lookbehind: !0,\n            alias: \"keyword\"\n        },\n        type: [\n            {\n                pattern: o(\"(^|[<nonId>])(?:вещ|лит|лог|сим|цел)(?:\\\\x20*таб)?(?=[<nonId>]|$)\"),\n                lookbehind: !0,\n                alias: \"builtin\"\n            },\n            {\n                pattern: o(\"(^|[<nonId>])(?:компл|сканкод|файл|цвет)(?=[<nonId>]|$)\"),\n                lookbehind: !0,\n                alias: \"important\"\n            }\n        ],\n        keyword: {\n            pattern: o(\"(^|[<nonId>])(?:алг|арг(?:\\\\x20*рез)?|ввод|ВКЛЮЧИТЬ|вс[её]|выбор|вывод|выход|дано|для|до|дс|если|иначе|исп|использовать|кон(?:(?:\\\\x20+|_)исп)?|кц(?:(?:\\\\x20+|_)при)?|надо|нач|нс|нц|от|пауза|пока|при|раза?|рез|стоп|таб|то|утв|шаг)(?=[<nonId>]|$)\"),\n            lookbehind: !0\n        },\n        name: {\n            pattern: o(\"(^|[<nonId>])[^\\\\d<nonId>][^<nonId>]*(?:\\\\x20+[^<nonId>]+)*(?=[<nonId>]|$)\"),\n            lookbehind: !0\n        },\n        number: {\n            pattern: o(\"(^|[<nonId>])(?:\\\\B\\\\$[\\\\da-f]+\\\\b|(?:\\\\b\\\\d+(?:\\\\.\\\\d*)?|\\\\B\\\\.\\\\d+)(?:e[+-]?\\\\d+)?)(?=[<nonId>]|$)\", \"i\"),\n            lookbehind: !0\n        },\n        punctuation: /:=|[(),:;\\[\\]]/,\n        \"operator-char\": {\n            pattern: /\\*\\*?|<[=>]?|>=?|[-+/=]/,\n            alias: \"operator\"\n        }\n    }, n.languages.kum = n.languages.kumir;\n}(Prism);\nPrism.languages.kusto = {\n    comment: {\n        pattern: /\\/\\/.*/,\n        greedy: !0\n    },\n    string: {\n        pattern: /```[\\s\\S]*?```|[hH]?(?:\"(?:[^\\r\\n\\\\\"]|\\\\.)*\"|'(?:[^\\r\\n\\\\']|\\\\.)*'|@(?:\"[^\\r\\n\"]*\"|'[^\\r\\n']*'))/,\n        greedy: !0\n    },\n    verb: {\n        pattern: /(\\|\\s*)[a-z][\\w-]*/i,\n        lookbehind: !0,\n        alias: \"keyword\"\n    },\n    command: {\n        pattern: /\\.[a-z][a-z\\d-]*\\b/,\n        alias: \"keyword\"\n    },\n    \"class-name\": /\\b(?:bool|datetime|decimal|dynamic|guid|int|long|real|string|timespan)\\b/,\n    keyword: /\\b(?:access|alias|and|anti|as|asc|auto|between|by|(?:contains|(?:ends|starts)with|has(?:perfix|suffix)?)(?:_cs)?|database|declare|desc|external|from|fullouter|has_all|in|ingestion|inline|inner|innerunique|into|(?:left|right)(?:anti(?:semi)?|inner|outer|semi)?|let|like|local|not|of|on|or|pattern|print|query_parameters|range|restrict|schema|set|step|table|tables|to|view|where|with|matches\\s+regex|nulls\\s+(?:first|last))(?![\\w-])/,\n    boolean: /\\b(?:false|null|true)\\b/,\n    function: /\\b[a-z_]\\w*(?=\\s*\\()/,\n    datetime: [\n        {\n            pattern: /\\b(?:(?:Fri|Friday|Mon|Monday|Sat|Saturday|Sun|Sunday|Thu|Thursday|Tue|Tuesday|Wed|Wednesday)\\s*,\\s*)?\\d{1,2}(?:\\s+|-)(?:Apr|Aug|Dec|Feb|Jan|Jul|Jun|Mar|May|Nov|Oct|Sep)(?:\\s+|-)\\d{2}\\s+\\d{2}:\\d{2}(?::\\d{2})?(?:\\s*(?:\\b(?:[A-Z]|(?:[ECMT][DS]|GM|U)T)|[+-]\\d{4}))?\\b/,\n            alias: \"number\"\n        },\n        {\n            pattern: /[+-]?\\b(?:\\d{4}-\\d{2}-\\d{2}(?:[ T]\\d{2}:\\d{2}(?::\\d{2}(?:\\.\\d+)?)?)?|\\d{2}:\\d{2}(?::\\d{2}(?:\\.\\d+)?)?)Z?/,\n            alias: \"number\"\n        }\n    ],\n    number: /\\b(?:0x[0-9A-Fa-f]+|\\d+(?:\\.\\d+)?(?:[Ee][+-]?\\d+)?)(?:(?:min|sec|[mnµ]s|[dhms]|microsecond|tick)\\b)?|[+-]?\\binf\\b/,\n    operator: /=>|[!=]~|[!=<>]=?|[-+*/%|]|\\.\\./,\n    punctuation: /[()\\[\\]{},;.:]/\n};\n!function(a) {\n    var e = /\\\\(?:[^a-z()[\\]]|[a-z*]+)/i, n = {\n        \"equation-command\": {\n            pattern: e,\n            alias: \"regex\"\n        }\n    };\n    a.languages.latex = {\n        comment: /%.*/,\n        cdata: {\n            pattern: /(\\\\begin\\{((?:lstlisting|verbatim)\\*?)\\})[\\s\\S]*?(?=\\\\end\\{\\2\\})/,\n            lookbehind: !0\n        },\n        equation: [\n            {\n                pattern: /\\$\\$(?:\\\\[\\s\\S]|[^\\\\$])+\\$\\$|\\$(?:\\\\[\\s\\S]|[^\\\\$])+\\$|\\\\\\([\\s\\S]*?\\\\\\)|\\\\\\[[\\s\\S]*?\\\\\\]/,\n                inside: n,\n                alias: \"string\"\n            },\n            {\n                pattern: /(\\\\begin\\{((?:align|eqnarray|equation|gather|math|multline)\\*?)\\})[\\s\\S]*?(?=\\\\end\\{\\2\\})/,\n                lookbehind: !0,\n                inside: n,\n                alias: \"string\"\n            }\n        ],\n        keyword: {\n            pattern: /(\\\\(?:begin|cite|documentclass|end|label|ref|usepackage)(?:\\[[^\\]]+\\])?\\{)[^}]+(?=\\})/,\n            lookbehind: !0\n        },\n        url: {\n            pattern: /(\\\\url\\{)[^}]+(?=\\})/,\n            lookbehind: !0\n        },\n        headline: {\n            pattern: /(\\\\(?:chapter|frametitle|paragraph|part|section|subparagraph|subsection|subsubparagraph|subsubsection|subsubsubparagraph)\\*?(?:\\[[^\\]]+\\])?\\{)[^}]+(?=\\})/,\n            lookbehind: !0,\n            alias: \"class-name\"\n        },\n        function: {\n            pattern: e,\n            alias: \"selector\"\n        },\n        punctuation: /[[\\]{}&]/\n    }, a.languages.tex = a.languages.latex, a.languages.context = a.languages.latex;\n}(Prism);\n!function(a) {\n    a.languages.latte = {\n        comment: /^\\{\\*[\\s\\S]*/,\n        \"latte-tag\": {\n            pattern: /(^\\{(?:\\/(?=[a-z]))?)(?:[=_]|[a-z]\\w*\\b(?!\\())/i,\n            lookbehind: !0,\n            alias: \"important\"\n        },\n        delimiter: {\n            pattern: /^\\{\\/?|\\}$/,\n            alias: \"punctuation\"\n        },\n        php: {\n            pattern: /\\S(?:[\\s\\S]*\\S)?/,\n            alias: \"language-php\",\n            inside: a.languages.php\n        }\n    };\n    var t = a.languages.extend(\"markup\", {});\n    a.languages.insertBefore(\"inside\", \"attr-value\", {\n        \"n-attr\": {\n            pattern: /n:[\\w-]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+))?/,\n            inside: {\n                \"attr-name\": {\n                    pattern: /^[^\\s=]+/,\n                    alias: \"important\"\n                },\n                \"attr-value\": {\n                    pattern: /=[\\s\\S]+/,\n                    inside: {\n                        punctuation: [\n                            /^=/,\n                            {\n                                pattern: /^(\\s*)[\"']|[\"']$/,\n                                lookbehind: !0\n                            }\n                        ],\n                        php: {\n                            pattern: /\\S(?:[\\s\\S]*\\S)?/,\n                            inside: a.languages.php\n                        }\n                    }\n                }\n            }\n        }\n    }, t.tag), a.hooks.add(\"before-tokenize\", function(e) {\n        \"latte\" === e.language && (a.languages[\"markup-templating\"].buildPlaceholders(e, \"latte\", /\\{\\*[\\s\\S]*?\\*\\}|\\{[^'\"\\s{}*](?:[^\"'/{}]|\\/(?![*/])|(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/)*\\}/g), e.grammar = t);\n    }), a.hooks.add(\"after-tokenize\", function(t) {\n        a.languages[\"markup-templating\"].tokenizePlaceholders(t, \"latte\");\n    });\n}(Prism);\nPrism.languages.less = Prism.languages.extend(\"css\", {\n    comment: [\n        /\\/\\*[\\s\\S]*?\\*\\//,\n        {\n            pattern: /(^|[^\\\\])\\/\\/.*/,\n            lookbehind: !0\n        }\n    ],\n    atrule: {\n        pattern: /@[\\w-](?:\\((?:[^(){}]|\\([^(){}]*\\))*\\)|[^(){};\\s]|\\s+(?!\\s))*?(?=\\s*\\{)/,\n        inside: {\n            punctuation: /[:()]/\n        }\n    },\n    selector: {\n        pattern: /(?:@\\{[\\w-]+\\}|[^{};\\s@])(?:@\\{[\\w-]+\\}|\\((?:[^(){}]|\\([^(){}]*\\))*\\)|[^(){};@\\s]|\\s+(?!\\s))*?(?=\\s*\\{)/,\n        inside: {\n            variable: /@+[\\w-]+/\n        }\n    },\n    property: /(?:@\\{[\\w-]+\\}|[\\w-])+(?:\\+_?)?(?=\\s*:)/,\n    operator: /[+\\-*\\/]/\n}), Prism.languages.insertBefore(\"less\", \"property\", {\n    variable: [\n        {\n            pattern: /@[\\w-]+\\s*:/,\n            inside: {\n                punctuation: /:/\n            }\n        },\n        /@@?[\\w-]+/\n    ],\n    \"mixin-usage\": {\n        pattern: /([{;]\\s*)[.#](?!\\d)[\\w-].*?(?=[(;])/,\n        lookbehind: !0,\n        alias: \"function\"\n    }\n});\n!function(e) {\n    e.languages.scheme = {\n        comment: /;.*|#;\\s*(?:\\((?:[^()]|\\([^()]*\\))*\\)|\\[(?:[^\\[\\]]|\\[[^\\[\\]]*\\])*\\])|#\\|(?:[^#|]|#(?!\\|)|\\|(?!#)|#\\|(?:[^#|]|#(?!\\|)|\\|(?!#))*\\|#)*\\|#/,\n        string: {\n            pattern: /\"(?:[^\"\\\\]|\\\\.)*\"/,\n            greedy: !0\n        },\n        symbol: {\n            pattern: /'[^()\\[\\]#'\\s]+/,\n            greedy: !0\n        },\n        char: {\n            pattern: /#\\\\(?:[ux][a-fA-F\\d]+\\b|[-a-zA-Z]+\\b|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|\\S)/,\n            greedy: !0\n        },\n        \"lambda-parameter\": [\n            {\n                pattern: /((?:^|[^'`#])[(\\[]lambda\\s+)(?:[^|()\\[\\]'\\s]+|\\|(?:[^\\\\|]|\\\\.)*\\|)/,\n                lookbehind: !0\n            },\n            {\n                pattern: /((?:^|[^'`#])[(\\[]lambda\\s+[(\\[])[^()\\[\\]']+/,\n                lookbehind: !0\n            }\n        ],\n        keyword: {\n            pattern: /((?:^|[^'`#])[(\\[])(?:begin|case(?:-lambda)?|cond(?:-expand)?|define(?:-library|-macro|-record-type|-syntax|-values)?|defmacro|delay(?:-force)?|do|else|except|export|guard|if|import|include(?:-ci|-library-declarations)?|lambda|let(?:rec)?(?:-syntax|-values|\\*)?|let\\*-values|only|parameterize|prefix|(?:quasi-?)?quote|rename|set!|syntax-(?:case|rules)|unless|unquote(?:-splicing)?|when)(?=[()\\[\\]\\s]|$)/,\n            lookbehind: !0\n        },\n        builtin: {\n            pattern: /((?:^|[^'`#])[(\\[])(?:abs|and|append|apply|assoc|ass[qv]|binary-port\\?|boolean=?\\?|bytevector(?:-append|-copy|-copy!|-length|-u8-ref|-u8-set!|\\?)?|caar|cadr|call-with-(?:current-continuation|port|values)|call\\/cc|car|cdar|cddr|cdr|ceiling|char(?:->integer|-ready\\?|\\?|<\\?|<=\\?|=\\?|>\\?|>=\\?)|close-(?:input-port|output-port|port)|complex\\?|cons|current-(?:error|input|output)-port|denominator|dynamic-wind|eof-object\\??|eq\\?|equal\\?|eqv\\?|error|error-object(?:-irritants|-message|\\?)|eval|even\\?|exact(?:-integer-sqrt|-integer\\?|\\?)?|expt|features|file-error\\?|floor(?:-quotient|-remainder|\\/)?|flush-output-port|for-each|gcd|get-output-(?:bytevector|string)|inexact\\??|input-port(?:-open\\?|\\?)|integer(?:->char|\\?)|lcm|length|list(?:->string|->vector|-copy|-ref|-set!|-tail|\\?)?|make-(?:bytevector|list|parameter|string|vector)|map|max|member|memq|memv|min|modulo|negative\\?|newline|not|null\\?|number(?:->string|\\?)|numerator|odd\\?|open-(?:input|output)-(?:bytevector|string)|or|output-port(?:-open\\?|\\?)|pair\\?|peek-char|peek-u8|port\\?|positive\\?|procedure\\?|quotient|raise|raise-continuable|rational\\?|rationalize|read-(?:bytevector|bytevector!|char|error\\?|line|string|u8)|real\\?|remainder|reverse|round|set-c[ad]r!|square|string(?:->list|->number|->symbol|->utf8|->vector|-append|-copy|-copy!|-fill!|-for-each|-length|-map|-ref|-set!|\\?|<\\?|<=\\?|=\\?|>\\?|>=\\?)?|substring|symbol(?:->string|\\?|=\\?)|syntax-error|textual-port\\?|truncate(?:-quotient|-remainder|\\/)?|u8-ready\\?|utf8->string|values|vector(?:->list|->string|-append|-copy|-copy!|-fill!|-for-each|-length|-map|-ref|-set!|\\?)?|with-exception-handler|write-(?:bytevector|char|string|u8)|zero\\?)(?=[()\\[\\]\\s]|$)/,\n            lookbehind: !0\n        },\n        operator: {\n            pattern: /((?:^|[^'`#])[(\\[])(?:[-+*%/]|[<>]=?|=>?)(?=[()\\[\\]\\s]|$)/,\n            lookbehind: !0\n        },\n        number: {\n            pattern: RegExp(function(e) {\n                for(var r in e)e[r] = e[r].replace(/<[\\w\\s]+>/g, function(r) {\n                    return \"(?:\" + e[r].trim() + \")\";\n                });\n                return e[r];\n            }({\n                \"<ureal dec>\": \"\\\\d+(?:/\\\\d+)|(?:\\\\d+(?:\\\\.\\\\d*)?|\\\\.\\\\d+)(?:[esfdl][+-]?\\\\d+)?\",\n                \"<real dec>\": \"[+-]?<ureal dec>|[+-](?:inf|nan)\\\\.0\",\n                \"<imaginary dec>\": \"[+-](?:<ureal dec>|(?:inf|nan)\\\\.0)?i\",\n                \"<complex dec>\": \"<real dec>(?:@<real dec>|<imaginary dec>)?|<imaginary dec>\",\n                \"<num dec>\": \"(?:#d(?:#[ei])?|#[ei](?:#d)?)?<complex dec>\",\n                \"<ureal box>\": \"[0-9a-f]+(?:/[0-9a-f]+)?\",\n                \"<real box>\": \"[+-]?<ureal box>|[+-](?:inf|nan)\\\\.0\",\n                \"<imaginary box>\": \"[+-](?:<ureal box>|(?:inf|nan)\\\\.0)?i\",\n                \"<complex box>\": \"<real box>(?:@<real box>|<imaginary box>)?|<imaginary box>\",\n                \"<num box>\": \"#[box](?:#[ei])?|(?:#[ei])?#[box]<complex box>\",\n                \"<number>\": \"(^|[()\\\\[\\\\]\\\\s])(?:<num dec>|<num box>)(?=[()\\\\[\\\\]\\\\s]|$)\"\n            }), \"i\"),\n            lookbehind: !0\n        },\n        boolean: {\n            pattern: /(^|[()\\[\\]\\s])#(?:[ft]|false|true)(?=[()\\[\\]\\s]|$)/,\n            lookbehind: !0\n        },\n        function: {\n            pattern: /((?:^|[^'`#])[(\\[])(?:[^|()\\[\\]'\\s]+|\\|(?:[^\\\\|]|\\\\.)*\\|)(?=[()\\[\\]\\s]|$)/,\n            lookbehind: !0\n        },\n        identifier: {\n            pattern: /(^|[()\\[\\]\\s])\\|(?:[^\\\\|]|\\\\.)*\\|(?=[()\\[\\]\\s]|$)/,\n            lookbehind: !0,\n            greedy: !0\n        },\n        punctuation: /[()\\[\\]']/\n    };\n}(Prism);\n!function(e) {\n    for(var n = '\\\\((?:[^();\"#\\\\\\\\]|\\\\\\\\[^]|;.*(?!.)|\"(?:[^\"\\\\\\\\]|\\\\\\\\.)*\"|#(?:\\\\{(?:(?!#\\\\})[^])*#\\\\}|[^{])|<expr>)*\\\\)', i = 0; i < 5; i++)n = n.replace(/<expr>/g, function() {\n        return n;\n    });\n    n = n.replace(/<expr>/g, \"[^\\\\s\\\\S]\");\n    var d = e.languages.lilypond = {\n        comment: /%(?:(?!\\{).*|\\{[\\s\\S]*?%\\})/,\n        \"embedded-scheme\": {\n            pattern: RegExp('(^|[=\\\\s])#(?:\"(?:[^\"\\\\\\\\]|\\\\\\\\.)*\"|[^\\\\s()\"]*(?:[^\\\\s()]|<expr>))'.replace(/<expr>/g, function() {\n                return n;\n            }), \"m\"),\n            lookbehind: !0,\n            greedy: !0,\n            inside: {\n                scheme: {\n                    pattern: /^(#)[\\s\\S]+$/,\n                    lookbehind: !0,\n                    alias: \"language-scheme\",\n                    inside: {\n                        \"embedded-lilypond\": {\n                            pattern: /#\\{[\\s\\S]*?#\\}/,\n                            greedy: !0,\n                            inside: {\n                                punctuation: /^#\\{|#\\}$/,\n                                lilypond: {\n                                    pattern: /[\\s\\S]+/,\n                                    alias: \"language-lilypond\",\n                                    inside: null\n                                }\n                            }\n                        },\n                        rest: e.languages.scheme\n                    }\n                },\n                punctuation: /#/\n            }\n        },\n        string: {\n            pattern: /\"(?:[^\"\\\\]|\\\\.)*\"/,\n            greedy: !0\n        },\n        \"class-name\": {\n            pattern: /(\\\\new\\s+)[\\w-]+/,\n            lookbehind: !0\n        },\n        keyword: {\n            pattern: /\\\\[a-z][-\\w]*/i,\n            inside: {\n                punctuation: /^\\\\/\n            }\n        },\n        operator: /[=|]|<<|>>/,\n        punctuation: {\n            pattern: /(^|[a-z\\d])(?:'+|,+|[_^]?-[_^]?(?:[-+^!>._]|(?=\\d))|[_^]\\.?|[.!])|[{}()[\\]<>^~]|\\\\[()[\\]<>\\\\!]|--|__/,\n            lookbehind: !0\n        },\n        number: /\\b\\d+(?:\\/\\d+)?\\b/\n    };\n    d[\"embedded-scheme\"].inside.scheme.inside[\"embedded-lilypond\"].inside.lilypond.inside = d, e.languages.ly = d;\n}(Prism);\nPrism.languages.liquid = {\n    comment: {\n        pattern: /(^\\{%\\s*comment\\s*%\\})[\\s\\S]+(?=\\{%\\s*endcomment\\s*%\\}$)/,\n        lookbehind: !0\n    },\n    delimiter: {\n        pattern: /^\\{(?:\\{\\{|[%\\{])-?|-?(?:\\}\\}|[%\\}])\\}$/,\n        alias: \"punctuation\"\n    },\n    string: {\n        pattern: /\"[^\"]*\"|'[^']*'/,\n        greedy: !0\n    },\n    keyword: /\\b(?:as|assign|break|(?:end)?(?:capture|case|comment|for|form|if|paginate|raw|style|tablerow|unless)|continue|cycle|decrement|echo|else|elsif|in|include|increment|limit|liquid|offset|range|render|reversed|section|when|with)\\b/,\n    object: /\\b(?:address|all_country_option_tags|article|block|blog|cart|checkout|collection|color|country|country_option_tags|currency|current_page|current_tags|customer|customer_address|date|discount_allocation|discount_application|external_video|filter|filter_value|font|forloop|fulfillment|generic_file|gift_card|group|handle|image|line_item|link|linklist|localization|location|measurement|media|metafield|model|model_source|order|page|page_description|page_image|page_title|part|policy|product|product_option|recommendations|request|robots|routes|rule|script|search|selling_plan|selling_plan_allocation|selling_plan_group|shipping_method|shop|shop_locale|sitemap|store_availability|tax_line|template|theme|transaction|unit_price_measurement|user_agent|variant|video|video_source)\\b/,\n    function: [\n        {\n            pattern: /(\\|\\s*)\\w+/,\n            lookbehind: !0,\n            alias: \"filter\"\n        },\n        {\n            pattern: /(\\.\\s*)(?:first|last|size)/,\n            lookbehind: !0\n        }\n    ],\n    boolean: /\\b(?:false|nil|true)\\b/,\n    range: {\n        pattern: /\\.\\./,\n        alias: \"operator\"\n    },\n    number: /\\b\\d+(?:\\.\\d+)?\\b/,\n    operator: /[!=]=|<>|[<>]=?|[|?:=-]|\\b(?:and|contains(?=\\s)|or)\\b/,\n    punctuation: /[.,\\[\\]()]/,\n    empty: {\n        pattern: /\\bempty\\b/,\n        alias: \"keyword\"\n    }\n}, Prism.hooks.add(\"before-tokenize\", function(e) {\n    var t = !1;\n    Prism.languages[\"markup-templating\"].buildPlaceholders(e, \"liquid\", /\\{%\\s*comment\\s*%\\}[\\s\\S]*?\\{%\\s*endcomment\\s*%\\}|\\{(?:%[\\s\\S]*?%|\\{\\{[\\s\\S]*?\\}\\}|\\{[\\s\\S]*?\\})\\}/g, function(e) {\n        var n = /^\\{%-?\\s*(\\w+)/.exec(e);\n        if (n) {\n            var i = n[1];\n            if (\"raw\" === i && !t) return t = !0, !0;\n            if (\"endraw\" === i) return t = !1, !0;\n        }\n        return !t;\n    });\n}), Prism.hooks.add(\"after-tokenize\", function(e) {\n    Prism.languages[\"markup-templating\"].tokenizePlaceholders(e, \"liquid\");\n});\n!function(e) {\n    function n(e) {\n        return RegExp(\"(\\\\()(?:\" + e + \")(?=[\\\\s\\\\)])\");\n    }\n    function a(e) {\n        return RegExp(\"([\\\\s([])(?:\" + e + \")(?=[\\\\s)])\");\n    }\n    var t = \"(?!\\\\d)[-+*/~!@$%^=<>{}\\\\w]+\", r = \"(\\\\()\", i = \"(?:[^()]|\\\\((?:[^()]|\\\\((?:[^()]|\\\\((?:[^()]|\\\\((?:[^()]|\\\\([^()]*\\\\))*\\\\))*\\\\))*\\\\))*\\\\))*\", s = {\n        heading: {\n            pattern: /;;;.*/,\n            alias: [\n                \"comment\",\n                \"title\"\n            ]\n        },\n        comment: /;.*/,\n        string: {\n            pattern: /\"(?:[^\"\\\\]|\\\\.)*\"/,\n            greedy: !0,\n            inside: {\n                argument: /[-A-Z]+(?=[.,\\s])/,\n                symbol: RegExp(\"`\" + t + \"'\")\n            }\n        },\n        \"quoted-symbol\": {\n            pattern: RegExp(\"#?'\" + t),\n            alias: [\n                \"variable\",\n                \"symbol\"\n            ]\n        },\n        \"lisp-property\": {\n            pattern: RegExp(\":\" + t),\n            alias: \"property\"\n        },\n        splice: {\n            pattern: RegExp(\",@?\" + t),\n            alias: [\n                \"symbol\",\n                \"variable\"\n            ]\n        },\n        keyword: [\n            {\n                pattern: RegExp(\"(\\\\()(?:and|(?:cl-)?letf|cl-loop|cond|cons|error|if|(?:lexical-)?let\\\\*?|message|not|null|or|provide|require|setq|unless|use-package|when|while)(?=\\\\s)\"),\n                lookbehind: !0\n            },\n            {\n                pattern: RegExp(\"(\\\\()(?:append|by|collect|concat|do|finally|for|in|return)(?=\\\\s)\"),\n                lookbehind: !0\n            }\n        ],\n        declare: {\n            pattern: n(\"declare\"),\n            lookbehind: !0,\n            alias: \"keyword\"\n        },\n        interactive: {\n            pattern: n(\"interactive\"),\n            lookbehind: !0,\n            alias: \"keyword\"\n        },\n        boolean: {\n            pattern: a(\"nil|t\"),\n            lookbehind: !0\n        },\n        number: {\n            pattern: a(\"[-+]?\\\\d+(?:\\\\.\\\\d*)?\"),\n            lookbehind: !0\n        },\n        defvar: {\n            pattern: RegExp(\"(\\\\()def(?:const|custom|group|var)\\\\s+\" + t),\n            lookbehind: !0,\n            inside: {\n                keyword: /^def[a-z]+/,\n                variable: RegExp(t)\n            }\n        },\n        defun: {\n            pattern: RegExp(\"(\\\\()(?:cl-)?(?:defmacro|defun\\\\*?)\\\\s+\" + t + \"\\\\s+\\\\(\" + i + \"\\\\)\"),\n            lookbehind: !0,\n            greedy: !0,\n            inside: {\n                keyword: /^(?:cl-)?def\\S+/,\n                arguments: null,\n                function: {\n                    pattern: RegExp(\"(^\\\\s)\" + t),\n                    lookbehind: !0\n                },\n                punctuation: /[()]/\n            }\n        },\n        lambda: {\n            pattern: RegExp(\"(\\\\()lambda\\\\s+\\\\(\\\\s*(?:&?\" + t + \"(?:\\\\s+&?\" + t + \")*\\\\s*)?\\\\)\"),\n            lookbehind: !0,\n            greedy: !0,\n            inside: {\n                keyword: /^lambda/,\n                arguments: null,\n                punctuation: /[()]/\n            }\n        },\n        car: {\n            pattern: RegExp(r + t),\n            lookbehind: !0\n        },\n        punctuation: [\n            /(?:['`,]?\\(|[)\\[\\]])/,\n            {\n                pattern: /(\\s)\\.(?=\\s)/,\n                lookbehind: !0\n            }\n        ]\n    }, l = {\n        \"lisp-marker\": RegExp(\"&(?!\\\\d)[-+*/~!@$%^=<>{}\\\\w]+\"),\n        varform: {\n            pattern: RegExp(\"\\\\(\" + t + \"\\\\s+(?=\\\\S)\" + i + \"\\\\)\"),\n            inside: s\n        },\n        argument: {\n            pattern: RegExp(\"(^|[\\\\s(])\" + t),\n            lookbehind: !0,\n            alias: \"variable\"\n        },\n        rest: s\n    }, o = \"\\\\S+(?:\\\\s+\\\\S+)*\", p = {\n        pattern: RegExp(r + i + \"(?=\\\\))\"),\n        lookbehind: !0,\n        inside: {\n            \"rest-vars\": {\n                pattern: RegExp(\"&(?:body|rest)\\\\s+\" + o),\n                inside: l\n            },\n            \"other-marker-vars\": {\n                pattern: RegExp(\"&(?:aux|optional)\\\\s+\" + o),\n                inside: l\n            },\n            keys: {\n                pattern: RegExp(\"&key\\\\s+\" + o + \"(?:\\\\s+&allow-other-keys)?\"),\n                inside: l\n            },\n            argument: {\n                pattern: RegExp(t),\n                alias: \"variable\"\n            },\n            punctuation: /[()]/\n        }\n    };\n    s.lambda.inside.arguments = p, s.defun.inside.arguments = e.util.clone(p), s.defun.inside.arguments.inside.sublist = p, e.languages.lisp = s, e.languages.elisp = s, e.languages.emacs = s, e.languages[\"emacs-lisp\"] = s;\n}(Prism);\nPrism.languages.livescript = {\n    comment: [\n        {\n            pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,\n            lookbehind: !0\n        },\n        {\n            pattern: /(^|[^\\\\])#.*/,\n            lookbehind: !0\n        }\n    ],\n    \"interpolated-string\": {\n        pattern: /(^|[^\"])(\"\"\"|\")(?:\\\\[\\s\\S]|(?!\\2)[^\\\\])*\\2(?!\")/,\n        lookbehind: !0,\n        greedy: !0,\n        inside: {\n            variable: {\n                pattern: /(^|[^\\\\])#[a-z_](?:-?[a-z]|[\\d_])*/m,\n                lookbehind: !0\n            },\n            interpolation: {\n                pattern: /(^|[^\\\\])#\\{[^}]+\\}/m,\n                lookbehind: !0,\n                inside: {\n                    \"interpolation-punctuation\": {\n                        pattern: /^#\\{|\\}$/,\n                        alias: \"variable\"\n                    }\n                }\n            },\n            string: /[\\s\\S]+/\n        }\n    },\n    string: [\n        {\n            pattern: /('''|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/,\n            greedy: !0\n        },\n        {\n            pattern: /<\\[[\\s\\S]*?\\]>/,\n            greedy: !0\n        },\n        /\\\\[^\\s,;\\])}]+/\n    ],\n    regex: [\n        {\n            pattern: /\\/\\/(?:\\[[^\\r\\n\\]]*\\]|\\\\.|(?!\\/\\/)[^\\\\\\[])+\\/\\/[gimyu]{0,5}/,\n            greedy: !0,\n            inside: {\n                comment: {\n                    pattern: /(^|[^\\\\])#.*/,\n                    lookbehind: !0\n                }\n            }\n        },\n        {\n            pattern: /\\/(?:\\[[^\\r\\n\\]]*\\]|\\\\.|[^/\\\\\\r\\n\\[])+\\/[gimyu]{0,5}/,\n            greedy: !0\n        }\n    ],\n    keyword: {\n        pattern: /(^|(?!-).)\\b(?:break|case|catch|class|const|continue|default|do|else|extends|fallthrough|finally|for(?: ever)?|function|if|implements|it|let|loop|new|null|otherwise|own|return|super|switch|that|then|this|throw|try|unless|until|var|void|when|while|yield)(?!-)\\b/m,\n        lookbehind: !0\n    },\n    \"keyword-operator\": {\n        pattern: /(^|[^-])\\b(?:(?:delete|require|typeof)!|(?:and|by|delete|export|from|import(?: all)?|in|instanceof|is(?: not|nt)?|not|of|or|til|to|typeof|with|xor)(?!-)\\b)/m,\n        lookbehind: !0,\n        alias: \"operator\"\n    },\n    boolean: {\n        pattern: /(^|[^-])\\b(?:false|no|off|on|true|yes)(?!-)\\b/m,\n        lookbehind: !0\n    },\n    argument: {\n        pattern: /(^|(?!\\.&\\.)[^&])&(?!&)\\d*/m,\n        lookbehind: !0,\n        alias: \"variable\"\n    },\n    number: /\\b(?:\\d+~[\\da-z]+|\\d[\\d_]*(?:\\.\\d[\\d_]*)?(?:[a-z]\\w*)?)/i,\n    identifier: /[a-z_](?:-?[a-z]|[\\d_])*/i,\n    operator: [\n        {\n            pattern: /( )\\.(?= )/,\n            lookbehind: !0\n        },\n        /\\.(?:[=~]|\\.\\.?)|\\.(?:[&|^]|<<|>>>?)\\.|:(?:=|:=?)|&&|\\|[|>]|<(?:<<?<?|--?!?|~~?!?|[|=?])?|>[>=?]?|-(?:->?|>)?|\\+\\+?|@@?|%%?|\\*\\*?|!(?:~?=|--?>|~?~>)?|~(?:~?>|=)?|==?|\\^\\^?|[\\/?]/\n    ],\n    punctuation: /[(){}\\[\\]|.,:;`]/\n}, Prism.languages.livescript[\"interpolated-string\"].inside.interpolation.inside.rest = Prism.languages.livescript;\n!function(a) {\n    a.languages.llvm = {\n        comment: /;.*/,\n        string: {\n            pattern: /\"[^\"]*\"/,\n            greedy: !0\n        },\n        boolean: /\\b(?:false|true)\\b/,\n        variable: /[%@!#](?:(?!\\d)(?:[-$.\\w]|\\\\[a-f\\d]{2})+|\\d+)/i,\n        label: /(?!\\d)(?:[-$.\\w]|\\\\[a-f\\d]{2})+:/i,\n        type: {\n            pattern: /\\b(?:double|float|fp128|half|i[1-9]\\d*|label|metadata|ppc_fp128|token|void|x86_fp80|x86_mmx)\\b/,\n            alias: \"class-name\"\n        },\n        keyword: /\\b[a-z_][a-z_0-9]*\\b/,\n        number: /[+-]?\\b\\d+(?:\\.\\d+)?(?:[eE][+-]?\\d+)?\\b|\\b0x[\\dA-Fa-f]+\\b|\\b0xK[\\dA-Fa-f]{20}\\b|\\b0x[ML][\\dA-Fa-f]{32}\\b|\\b0xH[\\dA-Fa-f]{4}\\b/,\n        punctuation: /[{}[\\];(),.!*=<>]/\n    };\n}(Prism);\nPrism.languages.log = {\n    string: {\n        pattern: /\"(?:[^\"\\\\\\r\\n]|\\\\.)*\"|'(?![st] | \\w)(?:[^'\\\\\\r\\n]|\\\\.)*'/,\n        greedy: !0\n    },\n    exception: {\n        pattern: /(^|[^\\w.])[a-z][\\w.]*(?:Error|Exception):.*(?:(?:\\r\\n?|\\n)[ \\t]*(?:at[ \\t].+|\\.{3}.*|Caused by:.*))+(?:(?:\\r\\n?|\\n)[ \\t]*\\.\\.\\. .*)?/,\n        lookbehind: !0,\n        greedy: !0,\n        alias: [\n            \"javastacktrace\",\n            \"language-javastacktrace\"\n        ],\n        inside: Prism.languages.javastacktrace || {\n            keyword: /\\bat\\b/,\n            function: /[a-z_][\\w$]*(?=\\()/,\n            punctuation: /[.:()]/\n        }\n    },\n    level: [\n        {\n            pattern: /\\b(?:ALERT|CRIT|CRITICAL|EMERG|EMERGENCY|ERR|ERROR|FAILURE|FATAL|SEVERE)\\b/,\n            alias: [\n                \"error\",\n                \"important\"\n            ]\n        },\n        {\n            pattern: /\\b(?:WARN|WARNING|WRN)\\b/,\n            alias: [\n                \"warning\",\n                \"important\"\n            ]\n        },\n        {\n            pattern: /\\b(?:DISPLAY|INF|INFO|NOTICE|STATUS)\\b/,\n            alias: [\n                \"info\",\n                \"keyword\"\n            ]\n        },\n        {\n            pattern: /\\b(?:DBG|DEBUG|FINE)\\b/,\n            alias: [\n                \"debug\",\n                \"keyword\"\n            ]\n        },\n        {\n            pattern: /\\b(?:FINER|FINEST|TRACE|TRC|VERBOSE|VRB)\\b/,\n            alias: [\n                \"trace\",\n                \"comment\"\n            ]\n        }\n    ],\n    property: {\n        pattern: /((?:^|[\\]|])[ \\t]*)[a-z_](?:[\\w-]|\\b\\/\\b)*(?:[. ]\\(?\\w(?:[\\w-]|\\b\\/\\b)*\\)?)*:(?=\\s)/im,\n        lookbehind: !0\n    },\n    separator: {\n        pattern: /(^|[^-+])-{3,}|={3,}|\\*{3,}|- - /m,\n        lookbehind: !0,\n        alias: \"comment\"\n    },\n    url: /\\b(?:file|ftp|https?):\\/\\/[^\\s|,;'\"]*[^\\s|,;'\">.]/,\n    email: {\n        pattern: /(^|\\s)[-\\w+.]+@[a-z][a-z0-9-]*(?:\\.[a-z][a-z0-9-]*)+(?=\\s)/,\n        lookbehind: !0,\n        alias: \"url\"\n    },\n    \"ip-address\": {\n        pattern: /\\b(?:\\d{1,3}(?:\\.\\d{1,3}){3})\\b/,\n        alias: \"constant\"\n    },\n    \"mac-address\": {\n        pattern: /\\b[a-f0-9]{2}(?::[a-f0-9]{2}){5}\\b/i,\n        alias: \"constant\"\n    },\n    domain: {\n        pattern: /(^|\\s)[a-z][a-z0-9-]*(?:\\.[a-z][a-z0-9-]*)*\\.[a-z][a-z0-9-]+(?=\\s)/,\n        lookbehind: !0,\n        alias: \"constant\"\n    },\n    uuid: {\n        pattern: /\\b[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}\\b/i,\n        alias: \"constant\"\n    },\n    hash: {\n        pattern: /\\b(?:[a-f0-9]{32}){1,2}\\b/i,\n        alias: \"constant\"\n    },\n    \"file-path\": {\n        pattern: /\\b[a-z]:[\\\\/][^\\s|,;:(){}\\[\\]\"']+|(^|[\\s:\\[\\](>|])\\.{0,2}\\/\\w[^\\s|,;:(){}\\[\\]\"']*/i,\n        lookbehind: !0,\n        greedy: !0,\n        alias: \"string\"\n    },\n    date: {\n        pattern: RegExp(\"\\\\b\\\\d{4}[-/]\\\\d{2}[-/]\\\\d{2}(?:T(?=\\\\d{1,2}:)|(?=\\\\s\\\\d{1,2}:))|\\\\b\\\\d{1,4}[-/ ](?:\\\\d{1,2}|Apr|Aug|Dec|Feb|Jan|Jul|Jun|Mar|May|Nov|Oct|Sep)[-/ ]\\\\d{2,4}T?\\\\b|\\\\b(?:(?:Fri|Mon|Sat|Sun|Thu|Tue|Wed)(?:\\\\s{1,2}(?:Apr|Aug|Dec|Feb|Jan|Jul|Jun|Mar|May|Nov|Oct|Sep))?|Apr|Aug|Dec|Feb|Jan|Jul|Jun|Mar|May|Nov|Oct|Sep)\\\\s{1,2}\\\\d{1,2}\\\\b\", \"i\"),\n        alias: \"number\"\n    },\n    time: {\n        pattern: /\\b\\d{1,2}:\\d{1,2}:\\d{1,2}(?:[.,:]\\d+)?(?:\\s?[+-]\\d{2}:?\\d{2}|Z)?\\b/,\n        alias: \"number\"\n    },\n    boolean: /\\b(?:false|null|true)\\b/i,\n    number: {\n        pattern: /(^|[^.\\w])(?:0x[a-f0-9]+|0o[0-7]+|0b[01]+|v?\\d[\\da-f]*(?:\\.\\d+)*(?:e[+-]?\\d+)?[a-z]{0,3}\\b)\\b(?!\\.\\w)/i,\n        lookbehind: !0\n    },\n    operator: /[;:?<=>~/@!$%&+\\-|^(){}*#]/,\n    punctuation: /[\\[\\].,]/\n};\nPrism.languages.lolcode = {\n    comment: [\n        /\\bOBTW\\s[\\s\\S]*?\\sTLDR\\b/,\n        /\\bBTW.+/\n    ],\n    string: {\n        pattern: /\"(?::.|[^\":])*\"/,\n        inside: {\n            variable: /:\\{[^}]+\\}/,\n            symbol: [\n                /:\\([a-f\\d]+\\)/i,\n                /:\\[[^\\]]+\\]/,\n                /:[)>o\":]/\n            ]\n        },\n        greedy: !0\n    },\n    number: /(?:\\B-)?(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)/,\n    symbol: {\n        pattern: /(^|\\s)(?:A )?(?:BUKKIT|NOOB|NUMBAR|NUMBR|TROOF|YARN)(?=\\s|,|$)/,\n        lookbehind: !0,\n        inside: {\n            keyword: /A(?=\\s)/\n        }\n    },\n    label: {\n        pattern: /((?:^|\\s)(?:IM IN YR|IM OUTTA YR) )[a-zA-Z]\\w*/,\n        lookbehind: !0,\n        alias: \"string\"\n    },\n    function: {\n        pattern: /((?:^|\\s)(?:HOW IZ I|I IZ|IZ) )[a-zA-Z]\\w*/,\n        lookbehind: !0\n    },\n    keyword: [\n        {\n            pattern: /(^|\\s)(?:AN|FOUND YR|GIMMEH|GTFO|HAI|HAS A|HOW IZ I|I HAS A|I IZ|IF U SAY SO|IM IN YR|IM OUTTA YR|IS NOW(?: A)?|ITZ(?: A)?|IZ|KTHX|KTHXBYE|LIEK(?: A)?|MAEK|MEBBE|MKAY|NERFIN|NO WAI|O HAI IM|O RLY\\?|OIC|OMG|OMGWTF|R|SMOOSH|SRS|TIL|UPPIN|VISIBLE|WILE|WTF\\?|YA RLY|YR)(?=\\s|,|$)/,\n            lookbehind: !0\n        },\n        /'Z(?=\\s|,|$)/\n    ],\n    boolean: {\n        pattern: /(^|\\s)(?:FAIL|WIN)(?=\\s|,|$)/,\n        lookbehind: !0\n    },\n    variable: {\n        pattern: /(^|\\s)IT(?=\\s|,|$)/,\n        lookbehind: !0\n    },\n    operator: {\n        pattern: /(^|\\s)(?:NOT|BOTH SAEM|DIFFRINT|(?:ALL|ANY|BIGGR|BOTH|DIFF|EITHER|MOD|PRODUKT|QUOSHUNT|SMALLR|SUM|WON) OF)(?=\\s|,|$)/,\n        lookbehind: !0\n    },\n    punctuation: /\\.{3}|…|,|!/\n};\nPrism.languages.magma = {\n    output: {\n        pattern: /^(>.*(?:\\r(?:\\n|(?!\\n))|\\n))(?!>)(?:.+|(?:\\r(?:\\n|(?!\\n))|\\n)(?!>).*)(?:(?:\\r(?:\\n|(?!\\n))|\\n)(?!>).*)*/m,\n        lookbehind: !0,\n        greedy: !0\n    },\n    comment: {\n        pattern: /\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\//,\n        greedy: !0\n    },\n    string: {\n        pattern: /(^|[^\\\\\"])\"(?:[^\\r\\n\\\\\"]|\\\\.)*\"/,\n        lookbehind: !0,\n        greedy: !0\n    },\n    keyword: /\\b(?:_|adj|and|assert|assert2|assert3|assigned|break|by|case|cat|catch|clear|cmpeq|cmpne|continue|declare|default|delete|diff|div|do|elif|else|end|eq|error|eval|exists|exit|for|forall|forward|fprintf|freeze|function|ge|gt|if|iload|import|in|intrinsic|is|join|le|load|local|lt|meet|mod|ne|not|notadj|notin|notsubset|or|print|printf|procedure|quit|random|read|readi|repeat|require|requirege|requirerange|restore|return|save|sdiff|select|subset|then|time|to|try|until|vprint|vprintf|vtime|when|where|while|xor)\\b/,\n    boolean: /\\b(?:false|true)\\b/,\n    generator: {\n        pattern: /\\b[a-z_]\\w*(?=\\s*<)/i,\n        alias: \"class-name\"\n    },\n    function: /\\b[a-z_]\\w*(?=\\s*\\()/i,\n    number: {\n        pattern: /(^|[^\\w.]|\\.\\.)(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:[eE][+-]?\\d+)?(?:_[a-z]?)?(?=$|[^\\w.]|\\.\\.)/,\n        lookbehind: !0\n    },\n    operator: /->|[-+*/^~!|#=]|:=|\\.\\./,\n    punctuation: /[()[\\]{}<>,;.:]/\n};\nPrism.languages.makefile = {\n    comment: {\n        pattern: /(^|[^\\\\])#(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n])*/,\n        lookbehind: !0\n    },\n    string: {\n        pattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n        greedy: !0\n    },\n    \"builtin-target\": {\n        pattern: /\\.[A-Z][^:#=\\s]+(?=\\s*:(?!=))/,\n        alias: \"builtin\"\n    },\n    target: {\n        pattern: /^(?:[^:=\\s]|[ \\t]+(?![\\s:]))+(?=\\s*:(?!=))/m,\n        alias: \"symbol\",\n        inside: {\n            variable: /\\$+(?:(?!\\$)[^(){}:#=\\s]+|(?=[({]))/\n        }\n    },\n    variable: /\\$+(?:(?!\\$)[^(){}:#=\\s]+|\\([@*%<^+?][DF]\\)|(?=[({]))/,\n    keyword: /-include\\b|\\b(?:define|else|endef|endif|export|ifn?def|ifn?eq|include|override|private|sinclude|undefine|unexport|vpath)\\b/,\n    function: {\n        pattern: /(\\()(?:abspath|addsuffix|and|basename|call|dir|error|eval|file|filter(?:-out)?|findstring|firstword|flavor|foreach|guile|if|info|join|lastword|load|notdir|or|origin|patsubst|realpath|shell|sort|strip|subst|suffix|value|warning|wildcard|word(?:list|s)?)(?=[ \\t])/,\n        lookbehind: !0\n    },\n    operator: /(?:::|[?:+!])?=|[|@]/,\n    punctuation: /[:;(){}]/\n};\n!function(n) {\n    function e(n) {\n        return n = n.replace(/<inner>/g, function() {\n            return \"(?:\\\\\\\\.|[^\\\\\\\\\\n\\r]|(?:\\n|\\r\\n?)(?![\\r\\n]))\";\n        }), RegExp(\"((?:^|[^\\\\\\\\])(?:\\\\\\\\{2})*)(?:\" + n + \")\");\n    }\n    var t = \"(?:\\\\\\\\.|``(?:[^`\\r\\n]|`(?!`))+``|`[^`\\r\\n]+`|[^\\\\\\\\|\\r\\n`])+\", a = \"\\\\|?__(?:\\\\|__)+\\\\|?(?:(?:\\n|\\r\\n?)|(?![^]))\".replace(/__/g, function() {\n        return t;\n    }), i = \"\\\\|?[ \t]*:?-{3,}:?[ \t]*(?:\\\\|[ \t]*:?-{3,}:?[ \t]*)+\\\\|?(?:\\n|\\r\\n?)\";\n    n.languages.markdown = n.languages.extend(\"markup\", {}), n.languages.insertBefore(\"markdown\", \"prolog\", {\n        \"front-matter-block\": {\n            pattern: /(^(?:\\s*[\\r\\n])?)---(?!.)[\\s\\S]*?[\\r\\n]---(?!.)/,\n            lookbehind: !0,\n            greedy: !0,\n            inside: {\n                punctuation: /^---|---$/,\n                \"front-matter\": {\n                    pattern: /\\S+(?:\\s+\\S+)*/,\n                    alias: [\n                        \"yaml\",\n                        \"language-yaml\"\n                    ],\n                    inside: n.languages.yaml\n                }\n            }\n        },\n        blockquote: {\n            pattern: /^>(?:[\\t ]*>)*/m,\n            alias: \"punctuation\"\n        },\n        table: {\n            pattern: RegExp(\"^\" + a + i + \"(?:\" + a + \")*\", \"m\"),\n            inside: {\n                \"table-data-rows\": {\n                    pattern: RegExp(\"^(\" + a + i + \")(?:\" + a + \")*$\"),\n                    lookbehind: !0,\n                    inside: {\n                        \"table-data\": {\n                            pattern: RegExp(t),\n                            inside: n.languages.markdown\n                        },\n                        punctuation: /\\|/\n                    }\n                },\n                \"table-line\": {\n                    pattern: RegExp(\"^(\" + a + \")\" + i + \"$\"),\n                    lookbehind: !0,\n                    inside: {\n                        punctuation: /\\||:?-{3,}:?/\n                    }\n                },\n                \"table-header-row\": {\n                    pattern: RegExp(\"^\" + a + \"$\"),\n                    inside: {\n                        \"table-header\": {\n                            pattern: RegExp(t),\n                            alias: \"important\",\n                            inside: n.languages.markdown\n                        },\n                        punctuation: /\\|/\n                    }\n                }\n            }\n        },\n        code: [\n            {\n                pattern: /((?:^|\\n)[ \\t]*\\n|(?:^|\\r\\n?)[ \\t]*\\r\\n?)(?: {4}|\\t).+(?:(?:\\n|\\r\\n?)(?: {4}|\\t).+)*/,\n                lookbehind: !0,\n                alias: \"keyword\"\n            },\n            {\n                pattern: /^```[\\s\\S]*?^```$/m,\n                greedy: !0,\n                inside: {\n                    \"code-block\": {\n                        pattern: /^(```.*(?:\\n|\\r\\n?))[\\s\\S]+?(?=(?:\\n|\\r\\n?)^```$)/m,\n                        lookbehind: !0\n                    },\n                    \"code-language\": {\n                        pattern: /^(```).+/,\n                        lookbehind: !0\n                    },\n                    punctuation: /```/\n                }\n            }\n        ],\n        title: [\n            {\n                pattern: /\\S.*(?:\\n|\\r\\n?)(?:==+|--+)(?=[ \\t]*$)/m,\n                alias: \"important\",\n                inside: {\n                    punctuation: /==+$|--+$/\n                }\n            },\n            {\n                pattern: /(^\\s*)#.+/m,\n                lookbehind: !0,\n                alias: \"important\",\n                inside: {\n                    punctuation: /^#+|#+$/\n                }\n            }\n        ],\n        hr: {\n            pattern: /(^\\s*)([*-])(?:[\\t ]*\\2){2,}(?=\\s*$)/m,\n            lookbehind: !0,\n            alias: \"punctuation\"\n        },\n        list: {\n            pattern: /(^\\s*)(?:[*+-]|\\d+\\.)(?=[\\t ].)/m,\n            lookbehind: !0,\n            alias: \"punctuation\"\n        },\n        \"url-reference\": {\n            pattern: /!?\\[[^\\]]+\\]:[\\t ]+(?:\\S+|<(?:\\\\.|[^>\\\\])+>)(?:[\\t ]+(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\)))?/,\n            inside: {\n                variable: {\n                    pattern: /^(!?\\[)[^\\]]+/,\n                    lookbehind: !0\n                },\n                string: /(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\))$/,\n                punctuation: /^[\\[\\]!:]|[<>]/\n            },\n            alias: \"url\"\n        },\n        bold: {\n            pattern: e(\"\\\\b__(?:(?!_)<inner>|_(?:(?!_)<inner>)+_)+__\\\\b|\\\\*\\\\*(?:(?!\\\\*)<inner>|\\\\*(?:(?!\\\\*)<inner>)+\\\\*)+\\\\*\\\\*\"),\n            lookbehind: !0,\n            greedy: !0,\n            inside: {\n                content: {\n                    pattern: /(^..)[\\s\\S]+(?=..$)/,\n                    lookbehind: !0,\n                    inside: {}\n                },\n                punctuation: /\\*\\*|__/\n            }\n        },\n        italic: {\n            pattern: e(\"\\\\b_(?:(?!_)<inner>|__(?:(?!_)<inner>)+__)+_\\\\b|\\\\*(?:(?!\\\\*)<inner>|\\\\*\\\\*(?:(?!\\\\*)<inner>)+\\\\*\\\\*)+\\\\*\"),\n            lookbehind: !0,\n            greedy: !0,\n            inside: {\n                content: {\n                    pattern: /(^.)[\\s\\S]+(?=.$)/,\n                    lookbehind: !0,\n                    inside: {}\n                },\n                punctuation: /[*_]/\n            }\n        },\n        strike: {\n            pattern: e(\"(~~?)(?:(?!~)<inner>)+\\\\2\"),\n            lookbehind: !0,\n            greedy: !0,\n            inside: {\n                content: {\n                    pattern: /(^~~?)[\\s\\S]+(?=\\1$)/,\n                    lookbehind: !0,\n                    inside: {}\n                },\n                punctuation: /~~?/\n            }\n        },\n        \"code-snippet\": {\n            pattern: /(^|[^\\\\`])(?:``[^`\\r\\n]+(?:`[^`\\r\\n]+)*``(?!`)|`[^`\\r\\n]+`(?!`))/,\n            lookbehind: !0,\n            greedy: !0,\n            alias: [\n                \"code\",\n                \"keyword\"\n            ]\n        },\n        url: {\n            pattern: e('!?\\\\[(?:(?!\\\\])<inner>)+\\\\](?:\\\\([^\\\\s)]+(?:[\t ]+\"(?:\\\\\\\\.|[^\"\\\\\\\\])*\")?\\\\)|[ \t]?\\\\[(?:(?!\\\\])<inner>)+\\\\])'),\n            lookbehind: !0,\n            greedy: !0,\n            inside: {\n                operator: /^!/,\n                content: {\n                    pattern: /(^\\[)[^\\]]+(?=\\])/,\n                    lookbehind: !0,\n                    inside: {}\n                },\n                variable: {\n                    pattern: /(^\\][ \\t]?\\[)[^\\]]+(?=\\]$)/,\n                    lookbehind: !0\n                },\n                url: {\n                    pattern: /(^\\]\\()[^\\s)]+/,\n                    lookbehind: !0\n                },\n                string: {\n                    pattern: /(^[ \\t]+)\"(?:\\\\.|[^\"\\\\])*\"(?=\\)$)/,\n                    lookbehind: !0\n                }\n            }\n        }\n    }), [\n        \"url\",\n        \"bold\",\n        \"italic\",\n        \"strike\"\n    ].forEach(function(e) {\n        [\n            \"url\",\n            \"bold\",\n            \"italic\",\n            \"strike\",\n            \"code-snippet\"\n        ].forEach(function(t) {\n            e !== t && (n.languages.markdown[e].inside.content.inside[t] = n.languages.markdown[t]);\n        });\n    }), n.hooks.add(\"after-tokenize\", function(n) {\n        \"markdown\" !== n.language && \"md\" !== n.language || function n(e) {\n            if (e && \"string\" != typeof e) for(var t = 0, a = e.length; t < a; t++){\n                var i = e[t];\n                if (\"code\" === i.type) {\n                    var r = i.content[1], o = i.content[3];\n                    if (r && o && \"code-language\" === r.type && \"code-block\" === o.type && \"string\" == typeof r.content) {\n                        var l = r.content.replace(/\\b#/g, \"sharp\").replace(/\\b\\+\\+/g, \"pp\"), s = \"language-\" + (l = (/[a-z][\\w-]*/i.exec(l) || [\n                            \"\"\n                        ])[0].toLowerCase());\n                        o.alias ? \"string\" == typeof o.alias ? o.alias = [\n                            o.alias,\n                            s\n                        ] : o.alias.push(s) : o.alias = [\n                            s\n                        ];\n                    }\n                } else n(i.content);\n            }\n        }(n.tokens);\n    }), n.hooks.add(\"wrap\", function(e) {\n        if (\"code-block\" === e.type) {\n            for(var t = \"\", a = 0, i = e.classes.length; a < i; a++){\n                var s = e.classes[a], d = /language-(.+)/.exec(s);\n                if (d) {\n                    t = d[1];\n                    break;\n                }\n            }\n            var p = n.languages[t];\n            if (p) e.content = n.highlight(e.content.replace(r, \"\").replace(/&(\\w{1,8}|#x?[\\da-f]{1,8});/gi, function(n, e) {\n                var t;\n                return \"#\" === (e = e.toLowerCase())[0] ? (t = \"x\" === e[1] ? parseInt(e.slice(2), 16) : Number(e.slice(1)), l(t)) : o[e] || n;\n            }), p, t);\n            else if (t && \"none\" !== t && n.plugins.autoloader) {\n                var u = \"md-\" + new Date().valueOf() + \"-\" + Math.floor(1e16 * Math.random());\n                e.attributes.id = u, n.plugins.autoloader.loadLanguages(t, function() {\n                    var e = document.getElementById(u);\n                    e && (e.innerHTML = n.highlight(e.textContent, n.languages[t], t));\n                });\n            }\n        }\n    });\n    var r = RegExp(n.languages.markup.tag.pattern.source, \"gi\"), o = {\n        amp: \"&\",\n        lt: \"<\",\n        gt: \">\",\n        quot: '\"'\n    }, l = String.fromCodePoint || String.fromCharCode;\n    n.languages.md = n.languages.markdown;\n}(Prism);\n!function(t) {\n    var e = \"\\\\bvoid\\\\b|<org>|\\\\b(?:complex|numeric|pointer(?:\\\\s*\\\\([^()]*\\\\))?|real|string|(?:class|struct)\\\\s+\\\\w+|transmorphic)(?:\\\\s*<org>)?\".replace(/<org>/g, \"\\\\b(?:(?:col|row)?vector|matrix|scalar)\\\\b\");\n    t.languages.mata = {\n        comment: {\n            pattern: /\\/\\/.*|\\/\\*(?:[^*/]|\\*(?!\\/)|\\/(?!\\*)|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/)*\\*\\//,\n            greedy: !0\n        },\n        string: {\n            pattern: /\"[^\"\\r\\n]*\"|[‘`']\".*?\"[’`']/,\n            greedy: !0\n        },\n        \"class-name\": {\n            pattern: /(\\b(?:class|extends|struct)\\s+)\\w+(?=\\s*(?:\\{|\\bextends\\b))/,\n            lookbehind: !0\n        },\n        type: {\n            pattern: RegExp(e),\n            alias: \"class-name\",\n            inside: {\n                punctuation: /[()]/,\n                keyword: /\\b(?:class|function|struct|void)\\b/\n            }\n        },\n        keyword: /\\b(?:break|class|continue|do|else|end|extends|external|final|for|function|goto|if|pragma|private|protected|public|return|static|struct|unset|unused|version|virtual|while)\\b/,\n        constant: /\\bNULL\\b/,\n        number: {\n            pattern: /(^|[^\\w.])(?:\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?|\\d[a-f0-9]*(?:\\.[a-f0-9]+)?x[+-]?\\d+)i?(?![\\w.])/i,\n            lookbehind: !0\n        },\n        missing: {\n            pattern: /(^|[^\\w.])(?:\\.[a-z]?)(?![\\w.])/,\n            lookbehind: !0,\n            alias: \"symbol\"\n        },\n        function: /\\b[a-z_]\\w*(?=\\s*\\()/i,\n        operator: /\\.\\.|\\+\\+|--|&&|\\|\\||:?(?:[!=<>]=|[+\\-*/^<>&|:])|[!?=\\\\#’`']/,\n        punctuation: /[()[\\]{},;.]/\n    };\n}(Prism);\nPrism.languages.matlab = {\n    comment: [\n        /%\\{[\\s\\S]*?\\}%/,\n        /%.+/\n    ],\n    string: {\n        pattern: /\\B'(?:''|[^'\\r\\n])*'/,\n        greedy: !0\n    },\n    number: /(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[eE][+-]?\\d+)?(?:[ij])?|\\b[ij]\\b/,\n    keyword: /\\b(?:NaN|break|case|catch|continue|else|elseif|end|for|function|if|inf|otherwise|parfor|pause|pi|return|switch|try|while)\\b/,\n    function: /\\b(?!\\d)\\w+(?=\\s*\\()/,\n    operator: /\\.?[*^\\/\\\\']|[+\\-:@]|[<>=~]=?|&&?|\\|\\|?/,\n    punctuation: /\\.{3}|[.,;\\[\\](){}!]/\n};\n!function(t) {\n    var e = /\\b(?:about|and|animate|as|at|attributes|by|case|catch|collect|continue|coordsys|do|else|exit|fn|for|from|function|global|if|in|local|macroscript|mapped|max|not|of|off|on|or|parameters|persistent|plugin|rcmenu|return|rollout|set|struct|then|throw|to|tool|try|undo|utility|when|where|while|with)\\b/i;\n    t.languages.maxscript = {\n        comment: {\n            pattern: /\\/\\*[\\s\\S]*?(?:\\*\\/|$)|--.*/,\n            greedy: !0\n        },\n        string: {\n            pattern: /(^|[^\"\\\\@])(?:\"(?:[^\"\\\\]|\\\\[\\s\\S])*\"|@\"[^\"]*\")/,\n            lookbehind: !0,\n            greedy: !0\n        },\n        path: {\n            pattern: /\\$(?:[\\w/\\\\.*?]|'[^']*')*/,\n            greedy: !0,\n            alias: \"string\"\n        },\n        \"function-call\": {\n            pattern: RegExp(\"((?:^|[;=<>+\\\\-*/^({\\\\[]|\\\\b(?:and|by|case|catch|collect|do|else|if|in|not|or|return|then|to|try|where|while|with)\\\\b)[ \t]*)(?!\" + e.source + \")[a-z_]\\\\w*\\\\b(?=[ \t]*(?:(?!\" + e.source + \")[a-z_]|\\\\d|-\\\\.?\\\\d|[({'\\\"$@#?]))\", \"im\"),\n            lookbehind: !0,\n            greedy: !0,\n            alias: \"function\"\n        },\n        \"function-definition\": {\n            pattern: /(\\b(?:fn|function)\\s+)\\w+\\b/i,\n            lookbehind: !0,\n            alias: \"function\"\n        },\n        argument: {\n            pattern: /\\b[a-z_]\\w*(?=:)/i,\n            alias: \"attr-name\"\n        },\n        keyword: e,\n        boolean: /\\b(?:false|true)\\b/,\n        time: {\n            pattern: /(^|[^\\w.])(?:(?:(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:[eEdD][+-]\\d+|[LP])?[msft])+|\\d+:\\d+(?:\\.\\d*)?)(?![\\w.:])/,\n            lookbehind: !0,\n            alias: \"number\"\n        },\n        number: [\n            {\n                pattern: /(^|[^\\w.])(?:(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:[eEdD][+-]\\d+|[LP])?|0x[a-fA-F0-9]+)(?![\\w.:])/,\n                lookbehind: !0\n            },\n            /\\b(?:e|pi)\\b/\n        ],\n        constant: /\\b(?:dontcollect|ok|silentValue|undefined|unsupplied)\\b/,\n        color: {\n            pattern: /\\b(?:black|blue|brown|gray|green|orange|red|white|yellow)\\b/i,\n            alias: \"constant\"\n        },\n        operator: /[-+*/<>=!]=?|[&^?]|#(?!\\()/,\n        punctuation: /[()\\[\\]{}.:,;]|#(?=\\()|\\\\$/m\n    };\n}(Prism);\nPrism.languages.mel = {\n    comment: {\n        pattern: /\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\//,\n        greedy: !0\n    },\n    code: {\n        pattern: /`(?:\\\\.|[^\\\\`])*`/,\n        greedy: !0,\n        alias: \"italic\",\n        inside: {\n            delimiter: {\n                pattern: /^`|`$/,\n                alias: \"punctuation\"\n            },\n            statement: {\n                pattern: /[\\s\\S]+/,\n                inside: null\n            }\n        }\n    },\n    string: {\n        pattern: /\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/,\n        greedy: !0\n    },\n    variable: /\\$\\w+/,\n    number: /\\b0x[\\da-fA-F]+\\b|\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+/,\n    flag: {\n        pattern: /-[^\\d\\W]\\w*/,\n        alias: \"operator\"\n    },\n    keyword: /\\b(?:break|case|continue|default|do|else|float|for|global|if|in|int|matrix|proc|return|string|switch|vector|while)\\b/,\n    function: {\n        pattern: /((?:^|[{;])[ \\t]*)[a-z_]\\w*\\b(?!\\s*(?:\\.(?!\\.)|[[{=]))|\\b[a-z_]\\w*(?=[ \\t]*\\()/im,\n        lookbehind: !0,\n        greedy: !0\n    },\n    \"tensor-punctuation\": {\n        pattern: /<<|>>/,\n        alias: \"punctuation\"\n    },\n    operator: /\\+[+=]?|-[-=]?|&&|\\|\\||[<>]=?|[*\\/!=]=?|[%^]/,\n    punctuation: /[.,:;?\\[\\](){}]/\n}, Prism.languages.mel.code.inside.statement.inside = Prism.languages.mel;\nPrism.languages.mermaid = {\n    comment: {\n        pattern: /%%.*/,\n        greedy: !0\n    },\n    style: {\n        pattern: /^([ \\t]*(?:classDef|linkStyle|style)[ \\t]+[\\w$-]+[ \\t]+)\\w.*[^\\s;]/m,\n        lookbehind: !0,\n        inside: {\n            property: /\\b\\w[\\w-]*(?=[ \\t]*:)/,\n            operator: /:/,\n            punctuation: /,/\n        }\n    },\n    \"inter-arrow-label\": {\n        pattern: /([^<>ox.=-])(?:-[-.]|==)(?![<>ox.=-])[ \\t]*(?:\"[^\"\\r\\n]*\"|[^\\s\".=-](?:[^\\r\\n.=-]*[^\\s.=-])?)[ \\t]*(?:\\.+->?|--+[->]|==+[=>])(?![<>ox.=-])/,\n        lookbehind: !0,\n        greedy: !0,\n        inside: {\n            arrow: {\n                pattern: /(?:\\.+->?|--+[->]|==+[=>])$/,\n                alias: \"operator\"\n            },\n            label: {\n                pattern: /^([\\s\\S]{2}[ \\t]*)\\S(?:[\\s\\S]*\\S)?/,\n                lookbehind: !0,\n                alias: \"property\"\n            },\n            \"arrow-head\": {\n                pattern: /^\\S+/,\n                alias: [\n                    \"arrow\",\n                    \"operator\"\n                ]\n            }\n        }\n    },\n    arrow: [\n        {\n            pattern: /(^|[^{}|o.-])[|}][|o](?:--|\\.\\.)[|o][|{](?![{}|o.-])/,\n            lookbehind: !0,\n            alias: \"operator\"\n        },\n        {\n            pattern: /(^|[^<>ox.=-])(?:[<ox](?:==+|--+|-\\.*-)[>ox]?|(?:==+|--+|-\\.*-)[>ox]|===+|---+|-\\.+-)(?![<>ox.=-])/,\n            lookbehind: !0,\n            alias: \"operator\"\n        },\n        {\n            pattern: /(^|[^<>()x-])(?:--?(?:>>|[x>)])(?![<>()x])|(?:<<|[x<(])--?(?!-))/,\n            lookbehind: !0,\n            alias: \"operator\"\n        },\n        {\n            pattern: /(^|[^<>|*o.-])(?:[*o]--|--[*o]|<\\|?(?:--|\\.\\.)|(?:--|\\.\\.)\\|?>|--|\\.\\.)(?![<>|*o.-])/,\n            lookbehind: !0,\n            alias: \"operator\"\n        }\n    ],\n    label: {\n        pattern: /(^|[^|<])\\|(?:[^\\r\\n\"|]|\"[^\"\\r\\n]*\")+\\|/,\n        lookbehind: !0,\n        greedy: !0,\n        alias: \"property\"\n    },\n    text: {\n        pattern: /(?:[(\\[{]+|\\b>)(?:[^\\r\\n\"()\\[\\]{}]|\"[^\"\\r\\n]*\")+(?:[)\\]}]+|>)/,\n        alias: \"string\"\n    },\n    string: {\n        pattern: /\"[^\"\\r\\n]*\"/,\n        greedy: !0\n    },\n    annotation: {\n        pattern: /<<(?:abstract|choice|enumeration|fork|interface|join|service)>>|\\[\\[(?:choice|fork|join)\\]\\]/i,\n        alias: \"important\"\n    },\n    keyword: [\n        {\n            pattern: /(^[ \\t]*)(?:action|callback|class|classDef|classDiagram|click|direction|erDiagram|flowchart|gantt|gitGraph|graph|journey|link|linkStyle|pie|requirementDiagram|sequenceDiagram|stateDiagram|stateDiagram-v2|style|subgraph)(?![\\w$-])/m,\n            lookbehind: !0,\n            greedy: !0\n        },\n        {\n            pattern: /(^[ \\t]*)(?:activate|alt|and|as|autonumber|deactivate|else|end(?:[ \\t]+note)?|loop|opt|par|participant|rect|state|note[ \\t]+(?:over|(?:left|right)[ \\t]+of))(?![\\w$-])/im,\n            lookbehind: !0,\n            greedy: !0\n        }\n    ],\n    entity: /#[a-z0-9]+;/,\n    operator: {\n        pattern: /(\\w[ \\t]*)&(?=[ \\t]*\\w)|:::|:/,\n        lookbehind: !0\n    },\n    punctuation: /[(){};]/\n};\nPrism.languages.metafont = {\n    comment: {\n        pattern: /%.*/,\n        greedy: !0\n    },\n    string: {\n        pattern: /\"[^\\r\\n\"]*\"/,\n        greedy: !0\n    },\n    number: /\\d*\\.?\\d+/,\n    boolean: /\\b(?:false|true)\\b/,\n    punctuation: [\n        /[,;()]/,\n        {\n            pattern: /(^|[^{}])(?:\\{|\\})(?![{}])/,\n            lookbehind: !0\n        },\n        {\n            pattern: /(^|[^[])\\[(?!\\[)/,\n            lookbehind: !0\n        },\n        {\n            pattern: /(^|[^\\]])\\](?!\\])/,\n            lookbehind: !0\n        }\n    ],\n    constant: [\n        {\n            pattern: /(^|[^!?])\\?\\?\\?(?![!?])/,\n            lookbehind: !0\n        },\n        {\n            pattern: /(^|[^/*\\\\])(?:\\\\|\\\\\\\\)(?![/*\\\\])/,\n            lookbehind: !0\n        },\n        /\\b(?:_|blankpicture|bp|cc|cm|dd|ditto|down|eps|epsilon|fullcircle|halfcircle|identity|in|infinity|left|mm|nullpen|nullpicture|origin|pc|penrazor|penspeck|pensquare|penstroke|proof|pt|quartercircle|relax|right|smoke|unitpixel|unitsquare|up)\\b/\n    ],\n    quantity: {\n        pattern: /\\b(?:autorounding|blacker|boundarychar|charcode|chardp|chardx|chardy|charext|charht|charic|charwd|currentwindow|day|designsize|displaying|fillin|fontmaking|granularity|hppp|join_radius|month|o_correction|pausing|pen_(?:bot|lft|rt|top)|pixels_per_inch|proofing|showstopping|smoothing|time|tolerance|tracingcapsules|tracingchoices|tracingcommands|tracingedges|tracingequations|tracingmacros|tracingonline|tracingoutput|tracingpens|tracingrestores|tracingspecs|tracingstats|tracingtitles|turningcheck|vppp|warningcheck|xoffset|year|yoffset)\\b/,\n        alias: \"keyword\"\n    },\n    command: {\n        pattern: /\\b(?:addto|batchmode|charlist|cull|display|errhelp|errmessage|errorstopmode|everyjob|extensible|fontdimen|headerbyte|inner|interim|let|ligtable|message|newinternal|nonstopmode|numspecial|openwindow|outer|randomseed|save|scrollmode|shipout|show|showdependencies|showstats|showtoken|showvariable|special)\\b/,\n        alias: \"builtin\"\n    },\n    operator: [\n        {\n            pattern: /(^|[^>=<:|])(?:<|<=|=|=:|\\|=:|\\|=:>|=:\\|>|=:\\||\\|=:\\||\\|=:\\|>|\\|=:\\|>>|>|>=|:|:=|<>|::|\\|\\|:)(?![>=<:|])/,\n            lookbehind: !0\n        },\n        {\n            pattern: /(^|[^+-])(?:\\+|\\+\\+|-{1,3}|\\+-\\+)(?![+-])/,\n            lookbehind: !0\n        },\n        {\n            pattern: /(^|[^/*\\\\])(?:\\*|\\*\\*|\\/)(?![/*\\\\])/,\n            lookbehind: !0\n        },\n        {\n            pattern: /(^|[^.])(?:\\.{2,3})(?!\\.)/,\n            lookbehind: !0\n        },\n        {\n            pattern: /(^|[^@#&$])&(?![@#&$])/,\n            lookbehind: !0\n        },\n        /\\b(?:and|not|or)\\b/\n    ],\n    macro: {\n        pattern: /\\b(?:abs|beginchar|bot|byte|capsule_def|ceiling|change_width|clear_pen_memory|clearit|clearpen|clearxy|counterclockwise|cullit|cutdraw|cutoff|decr|define_blacker_pixels|define_corrected_pixels|define_good_x_pixels|define_good_y_pixels|define_horizontal_corrected_pixels|define_pixels|define_whole_blacker_pixels|define_whole_pixels|define_whole_vertical_blacker_pixels|define_whole_vertical_pixels|dir|direction|directionpoint|div|dotprod|downto|draw|drawdot|endchar|erase|fill|filldraw|fix_units|flex|font_coding_scheme|font_extra_space|font_identifier|font_normal_shrink|font_normal_space|font_normal_stretch|font_quad|font_size|font_slant|font_x_height|gfcorners|gobble|gobbled|good\\.(?:bot|lft|rt|top|x|y)|grayfont|hide|hround|imagerules|incr|interact|interpath|intersectionpoint|inverse|italcorr|killtext|labelfont|labels|lft|loggingall|lowres_fix|makegrid|makelabel(?:\\.(?:bot|lft|rt|top)(?:\\.nodot)?)?|max|min|mod|mode_def|mode_setup|nodisplays|notransforms|numtok|openit|penlabels|penpos|pickup|proofoffset|proofrule|proofrulethickness|range|reflectedabout|rotatedabout|rotatedaround|round|rt|savepen|screenchars|screenrule|screenstrokes|shipit|showit|slantfont|softjoin|solve|stop|superellipse|tensepath|thru|titlefont|top|tracingall|tracingnone|undraw|undrawdot|unfill|unfilldraw|upto|vround)\\b/,\n        alias: \"function\"\n    },\n    builtin: /\\b(?:ASCII|angle|char|cosd|decimal|directiontime|floor|hex|intersectiontimes|jobname|known|length|makepath|makepen|mexp|mlog|normaldeviate|oct|odd|pencircle|penoffset|point|postcontrol|precontrol|reverse|rotated|sind|sqrt|str|subpath|substring|totalweight|turningnumber|uniformdeviate|unknown|xpart|xxpart|xypart|ypart|yxpart|yypart)\\b/,\n    keyword: /\\b(?:also|at|atleast|begingroup|charexists|contour|controls|curl|cycle|def|delimiters|doublepath|dropping|dump|else|elseif|end|enddef|endfor|endgroup|endinput|exitif|exitunless|expandafter|fi|for|forever|forsuffixes|from|if|input|inwindow|keeping|kern|of|primarydef|quote|readstring|scaled|scantokens|secondarydef|shifted|skipto|slanted|step|tension|tertiarydef|to|transformed|until|vardef|withpen|withweight|xscaled|yscaled|zscaled)\\b/,\n    type: {\n        pattern: /\\b(?:boolean|expr|numeric|pair|path|pen|picture|primary|secondary|string|suffix|tertiary|text|transform)\\b/,\n        alias: \"property\"\n    },\n    variable: {\n        pattern: /(^|[^@#&$])(?:@#|#@|#|@)(?![@#&$])|\\b(?:aspect_ratio|currentpen|currentpicture|currenttransform|d|extra_beginchar|extra_endchar|extra_setup|h|localfont|mag|mode|screen_cols|screen_rows|w|whatever|x|y|z)\\b/,\n        lookbehind: !0\n    }\n};\nPrism.languages.mizar = {\n    comment: /::.+/,\n    keyword: /@proof\\b|\\b(?:according|aggregate|all|and|antonym|are|as|associativity|assume|asymmetry|attr|be|begin|being|by|canceled|case|cases|clusters?|coherence|commutativity|compatibility|connectedness|consider|consistency|constructors|contradiction|correctness|def|deffunc|define|definitions?|defpred|do|does|end|environ|equals|ex|exactly|existence|for|from|func|given|hence|hereby|holds|idempotence|identity|iff?|implies|involutiveness|irreflexivity|is|it|let|means|mode|non|not|notations?|now|of|or|otherwise|over|per|pred|prefix|projectivity|proof|provided|qua|reconsider|redefine|reduce|reducibility|reflexivity|registrations?|requirements|reserve|sch|schemes?|section|selector|set|sethood|st|struct|such|suppose|symmetry|synonym|take|that|the|then|theorems?|thesis|thus|to|transitivity|uniqueness|vocabular(?:ies|y)|when|where|with|wrt)\\b/,\n    parameter: {\n        pattern: /\\$(?:10|\\d)/,\n        alias: \"variable\"\n    },\n    variable: /\\b\\w+(?=:)/,\n    number: /(?:\\b|-)\\d+\\b/,\n    operator: /\\.\\.\\.|->|&|\\.?=/,\n    punctuation: /\\(#|#\\)|[,:;\\[\\](){}]/\n};\n!function($) {\n    var e = [\n        \"$eq\",\n        \"$gt\",\n        \"$gte\",\n        \"$in\",\n        \"$lt\",\n        \"$lte\",\n        \"$ne\",\n        \"$nin\",\n        \"$and\",\n        \"$not\",\n        \"$nor\",\n        \"$or\",\n        \"$exists\",\n        \"$type\",\n        \"$expr\",\n        \"$jsonSchema\",\n        \"$mod\",\n        \"$regex\",\n        \"$text\",\n        \"$where\",\n        \"$geoIntersects\",\n        \"$geoWithin\",\n        \"$near\",\n        \"$nearSphere\",\n        \"$all\",\n        \"$elemMatch\",\n        \"$size\",\n        \"$bitsAllClear\",\n        \"$bitsAllSet\",\n        \"$bitsAnyClear\",\n        \"$bitsAnySet\",\n        \"$comment\",\n        \"$elemMatch\",\n        \"$meta\",\n        \"$slice\",\n        \"$currentDate\",\n        \"$inc\",\n        \"$min\",\n        \"$max\",\n        \"$mul\",\n        \"$rename\",\n        \"$set\",\n        \"$setOnInsert\",\n        \"$unset\",\n        \"$addToSet\",\n        \"$pop\",\n        \"$pull\",\n        \"$push\",\n        \"$pullAll\",\n        \"$each\",\n        \"$position\",\n        \"$slice\",\n        \"$sort\",\n        \"$bit\",\n        \"$addFields\",\n        \"$bucket\",\n        \"$bucketAuto\",\n        \"$collStats\",\n        \"$count\",\n        \"$currentOp\",\n        \"$facet\",\n        \"$geoNear\",\n        \"$graphLookup\",\n        \"$group\",\n        \"$indexStats\",\n        \"$limit\",\n        \"$listLocalSessions\",\n        \"$listSessions\",\n        \"$lookup\",\n        \"$match\",\n        \"$merge\",\n        \"$out\",\n        \"$planCacheStats\",\n        \"$project\",\n        \"$redact\",\n        \"$replaceRoot\",\n        \"$replaceWith\",\n        \"$sample\",\n        \"$set\",\n        \"$skip\",\n        \"$sort\",\n        \"$sortByCount\",\n        \"$unionWith\",\n        \"$unset\",\n        \"$unwind\",\n        \"$setWindowFields\",\n        \"$abs\",\n        \"$accumulator\",\n        \"$acos\",\n        \"$acosh\",\n        \"$add\",\n        \"$addToSet\",\n        \"$allElementsTrue\",\n        \"$and\",\n        \"$anyElementTrue\",\n        \"$arrayElemAt\",\n        \"$arrayToObject\",\n        \"$asin\",\n        \"$asinh\",\n        \"$atan\",\n        \"$atan2\",\n        \"$atanh\",\n        \"$avg\",\n        \"$binarySize\",\n        \"$bsonSize\",\n        \"$ceil\",\n        \"$cmp\",\n        \"$concat\",\n        \"$concatArrays\",\n        \"$cond\",\n        \"$convert\",\n        \"$cos\",\n        \"$dateFromParts\",\n        \"$dateToParts\",\n        \"$dateFromString\",\n        \"$dateToString\",\n        \"$dayOfMonth\",\n        \"$dayOfWeek\",\n        \"$dayOfYear\",\n        \"$degreesToRadians\",\n        \"$divide\",\n        \"$eq\",\n        \"$exp\",\n        \"$filter\",\n        \"$first\",\n        \"$floor\",\n        \"$function\",\n        \"$gt\",\n        \"$gte\",\n        \"$hour\",\n        \"$ifNull\",\n        \"$in\",\n        \"$indexOfArray\",\n        \"$indexOfBytes\",\n        \"$indexOfCP\",\n        \"$isArray\",\n        \"$isNumber\",\n        \"$isoDayOfWeek\",\n        \"$isoWeek\",\n        \"$isoWeekYear\",\n        \"$last\",\n        \"$last\",\n        \"$let\",\n        \"$literal\",\n        \"$ln\",\n        \"$log\",\n        \"$log10\",\n        \"$lt\",\n        \"$lte\",\n        \"$ltrim\",\n        \"$map\",\n        \"$max\",\n        \"$mergeObjects\",\n        \"$meta\",\n        \"$min\",\n        \"$millisecond\",\n        \"$minute\",\n        \"$mod\",\n        \"$month\",\n        \"$multiply\",\n        \"$ne\",\n        \"$not\",\n        \"$objectToArray\",\n        \"$or\",\n        \"$pow\",\n        \"$push\",\n        \"$radiansToDegrees\",\n        \"$range\",\n        \"$reduce\",\n        \"$regexFind\",\n        \"$regexFindAll\",\n        \"$regexMatch\",\n        \"$replaceOne\",\n        \"$replaceAll\",\n        \"$reverseArray\",\n        \"$round\",\n        \"$rtrim\",\n        \"$second\",\n        \"$setDifference\",\n        \"$setEquals\",\n        \"$setIntersection\",\n        \"$setIsSubset\",\n        \"$setUnion\",\n        \"$size\",\n        \"$sin\",\n        \"$slice\",\n        \"$split\",\n        \"$sqrt\",\n        \"$stdDevPop\",\n        \"$stdDevSamp\",\n        \"$strcasecmp\",\n        \"$strLenBytes\",\n        \"$strLenCP\",\n        \"$substr\",\n        \"$substrBytes\",\n        \"$substrCP\",\n        \"$subtract\",\n        \"$sum\",\n        \"$switch\",\n        \"$tan\",\n        \"$toBool\",\n        \"$toDate\",\n        \"$toDecimal\",\n        \"$toDouble\",\n        \"$toInt\",\n        \"$toLong\",\n        \"$toObjectId\",\n        \"$toString\",\n        \"$toLower\",\n        \"$toUpper\",\n        \"$trim\",\n        \"$trunc\",\n        \"$type\",\n        \"$week\",\n        \"$year\",\n        \"$zip\",\n        \"$count\",\n        \"$dateAdd\",\n        \"$dateDiff\",\n        \"$dateSubtract\",\n        \"$dateTrunc\",\n        \"$getField\",\n        \"$rand\",\n        \"$sampleRate\",\n        \"$setField\",\n        \"$unsetField\",\n        \"$comment\",\n        \"$explain\",\n        \"$hint\",\n        \"$max\",\n        \"$maxTimeMS\",\n        \"$min\",\n        \"$orderby\",\n        \"$query\",\n        \"$returnKey\",\n        \"$showDiskLoc\",\n        \"$natural\"\n    ], t = \"(?:\" + (e = e.map(function($) {\n        return $.replace(\"$\", \"\\\\$\");\n    })).join(\"|\") + \")\\\\b\";\n    $.languages.mongodb = $.languages.extend(\"javascript\", {}), $.languages.insertBefore(\"mongodb\", \"string\", {\n        property: {\n            pattern: /(?:([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1|(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)(?=\\s*:)/,\n            greedy: !0,\n            inside: {\n                keyword: RegExp(\"^(['\\\"])?\" + t + \"(?:\\\\1)?$\")\n            }\n        }\n    }), $.languages.mongodb.string.inside = {\n        url: {\n            pattern: /https?:\\/\\/[-\\w@:%.+~#=]{1,256}\\.[a-z0-9()]{1,6}\\b[-\\w()@:%+.~#?&/=]*/i,\n            greedy: !0\n        },\n        entity: {\n            pattern: /\\b(?:(?:[01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.){3}(?:[01]?\\d\\d?|2[0-4]\\d|25[0-5])\\b/,\n            greedy: !0\n        }\n    }, $.languages.insertBefore(\"mongodb\", \"constant\", {\n        builtin: {\n            pattern: RegExp(\"\\\\b(?:\" + [\n                \"ObjectId\",\n                \"Code\",\n                \"BinData\",\n                \"DBRef\",\n                \"Timestamp\",\n                \"NumberLong\",\n                \"NumberDecimal\",\n                \"MaxKey\",\n                \"MinKey\",\n                \"RegExp\",\n                \"ISODate\",\n                \"UUID\"\n            ].join(\"|\") + \")\\\\b\"),\n            alias: \"keyword\"\n        }\n    });\n}(Prism);\nPrism.languages.monkey = {\n    comment: {\n        pattern: /^#Rem\\s[\\s\\S]*?^#End|'.+/im,\n        greedy: !0\n    },\n    string: {\n        pattern: /\"[^\"\\r\\n]*\"/,\n        greedy: !0\n    },\n    preprocessor: {\n        pattern: /(^[ \\t]*)#.+/m,\n        lookbehind: !0,\n        greedy: !0,\n        alias: \"property\"\n    },\n    function: /\\b\\w+(?=\\()/,\n    \"type-char\": {\n        pattern: /\\b[?%#$]/,\n        alias: \"class-name\"\n    },\n    number: {\n        pattern: /((?:\\.\\.)?)(?:(?:\\b|\\B-\\.?|\\B\\.)\\d+(?:(?!\\.\\.)\\.\\d*)?|\\$[\\da-f]+)/i,\n        lookbehind: !0\n    },\n    keyword: /\\b(?:Abstract|Array|Bool|Case|Catch|Class|Const|Continue|Default|Eachin|Else|ElseIf|End|EndIf|Exit|Extends|Extern|False|Field|Final|Float|For|Forever|Function|Global|If|Implements|Import|Inline|Int|Interface|Local|Method|Module|New|Next|Null|Object|Private|Property|Public|Repeat|Return|Select|Self|Step|Strict|String|Super|Then|Throw|To|True|Try|Until|Void|Wend|While)\\b/i,\n    operator: /\\.\\.|<[=>]?|>=?|:?=|(?:[+\\-*\\/&~|]|\\b(?:Mod|Shl|Shr)\\b)=?|\\b(?:And|Not|Or)\\b/i,\n    punctuation: /[.,:;()\\[\\]]/\n};\nPrism.languages.moonscript = {\n    comment: /--.*/,\n    string: [\n        {\n            pattern: /'[^']*'|\\[(=*)\\[[\\s\\S]*?\\]\\1\\]/,\n            greedy: !0\n        },\n        {\n            pattern: /\"[^\"]*\"/,\n            greedy: !0,\n            inside: {\n                interpolation: {\n                    pattern: /#\\{[^{}]*\\}/,\n                    inside: {\n                        moonscript: {\n                            pattern: /(^#\\{)[\\s\\S]+(?=\\})/,\n                            lookbehind: !0,\n                            inside: null\n                        },\n                        \"interpolation-punctuation\": {\n                            pattern: /#\\{|\\}/,\n                            alias: \"punctuation\"\n                        }\n                    }\n                }\n            }\n        }\n    ],\n    \"class-name\": [\n        {\n            pattern: /(\\b(?:class|extends)[ \\t]+)\\w+/,\n            lookbehind: !0\n        },\n        /\\b[A-Z]\\w*/\n    ],\n    keyword: /\\b(?:class|continue|do|else|elseif|export|extends|for|from|if|import|in|local|nil|return|self|super|switch|then|unless|using|when|while|with)\\b/,\n    variable: /@@?\\w*/,\n    property: {\n        pattern: /\\b(?!\\d)\\w+(?=:)|(:)(?!\\d)\\w+/,\n        lookbehind: !0\n    },\n    function: {\n        pattern: /\\b(?:_G|_VERSION|assert|collectgarbage|coroutine\\.(?:create|resume|running|status|wrap|yield)|debug\\.(?:debug|getfenv|gethook|getinfo|getlocal|getmetatable|getregistry|getupvalue|setfenv|sethook|setlocal|setmetatable|setupvalue|traceback)|dofile|error|getfenv|getmetatable|io\\.(?:close|flush|input|lines|open|output|popen|read|stderr|stdin|stdout|tmpfile|type|write)|ipairs|load|loadfile|loadstring|math\\.(?:abs|acos|asin|atan|atan2|ceil|cos|cosh|deg|exp|floor|fmod|frexp|ldexp|log|log10|max|min|modf|pi|pow|rad|random|randomseed|sin|sinh|sqrt|tan|tanh)|module|next|os\\.(?:clock|date|difftime|execute|exit|getenv|remove|rename|setlocale|time|tmpname)|package\\.(?:cpath|loaded|loadlib|path|preload|seeall)|pairs|pcall|print|rawequal|rawget|rawset|require|select|setfenv|setmetatable|string\\.(?:byte|char|dump|find|format|gmatch|gsub|len|lower|match|rep|reverse|sub|upper)|table\\.(?:concat|insert|maxn|remove|sort)|tonumber|tostring|type|unpack|xpcall)\\b/,\n        inside: {\n            punctuation: /\\./\n        }\n    },\n    boolean: /\\b(?:false|true)\\b/,\n    number: /(?:\\B\\.\\d+|\\b\\d+\\.\\d+|\\b\\d+(?=[eE]))(?:[eE][-+]?\\d+)?\\b|\\b(?:0x[a-fA-F\\d]+|\\d+)(?:U?LL)?\\b/,\n    operator: /\\.{3}|[-=]>|~=|(?:[-+*/%<>!=]|\\.\\.)=?|[:#^]|\\b(?:and|or)\\b=?|\\b(?:not)\\b/,\n    punctuation: /[.,()[\\]{}\\\\]/\n}, Prism.languages.moonscript.string[1].inside.interpolation.inside.moonscript.inside = Prism.languages.moonscript, Prism.languages.moon = Prism.languages.moonscript;\nPrism.languages.n1ql = {\n    comment: {\n        pattern: /\\/\\*[\\s\\S]*?(?:$|\\*\\/)|--.*/,\n        greedy: !0\n    },\n    string: {\n        pattern: /([\"'])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\]|\\1\\1)*\\1/,\n        greedy: !0\n    },\n    identifier: {\n        pattern: /`(?:\\\\[\\s\\S]|[^\\\\`]|``)*`/,\n        greedy: !0\n    },\n    parameter: /\\$[\\w.]+/,\n    keyword: /\\b(?:ADVISE|ALL|ALTER|ANALYZE|AS|ASC|AT|BEGIN|BINARY|BOOLEAN|BREAK|BUCKET|BUILD|BY|CALL|CAST|CLUSTER|COLLATE|COLLECTION|COMMIT|COMMITTED|CONNECT|CONTINUE|CORRELATE|CORRELATED|COVER|CREATE|CURRENT|DATABASE|DATASET|DATASTORE|DECLARE|DECREMENT|DELETE|DERIVED|DESC|DESCRIBE|DISTINCT|DO|DROP|EACH|ELEMENT|EXCEPT|EXCLUDE|EXECUTE|EXPLAIN|FETCH|FILTER|FLATTEN|FLUSH|FOLLOWING|FOR|FORCE|FROM|FTS|FUNCTION|GOLANG|GRANT|GROUP|GROUPS|GSI|HASH|HAVING|IF|IGNORE|ILIKE|INCLUDE|INCREMENT|INDEX|INFER|INLINE|INNER|INSERT|INTERSECT|INTO|IS|ISOLATION|JAVASCRIPT|JOIN|KEY|KEYS|KEYSPACE|KNOWN|LANGUAGE|LAST|LEFT|LET|LETTING|LEVEL|LIMIT|LSM|MAP|MAPPING|MATCHED|MATERIALIZED|MERGE|MINUS|MISSING|NAMESPACE|NEST|NL|NO|NTH_VALUE|NULL|NULLS|NUMBER|OBJECT|OFFSET|ON|OPTION|OPTIONS|ORDER|OTHERS|OUTER|OVER|PARSE|PARTITION|PASSWORD|PATH|POOL|PRECEDING|PREPARE|PRIMARY|PRIVATE|PRIVILEGE|PROBE|PROCEDURE|PUBLIC|RANGE|RAW|REALM|REDUCE|RENAME|RESPECT|RETURN|RETURNING|REVOKE|RIGHT|ROLE|ROLLBACK|ROW|ROWS|SATISFIES|SAVEPOINT|SCHEMA|SCOPE|SELECT|SELF|SEMI|SET|SHOW|SOME|START|STATISTICS|STRING|SYSTEM|TIES|TO|TRAN|TRANSACTION|TRIGGER|TRUNCATE|UNBOUNDED|UNDER|UNION|UNIQUE|UNKNOWN|UNNEST|UNSET|UPDATE|UPSERT|USE|USER|USING|VALIDATE|VALUE|VALUES|VIA|VIEW|WHERE|WHILE|WINDOW|WITH|WORK|XOR)\\b/i,\n    function: /\\b[a-z_]\\w*(?=\\s*\\()/i,\n    boolean: /\\b(?:FALSE|TRUE)\\b/i,\n    number: /(?:\\b\\d+\\.|\\B\\.)\\d+e[+\\-]?\\d+\\b|\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+\\b/i,\n    operator: /[-+*\\/%]|!=|==?|\\|\\||<[>=]?|>=?|\\b(?:AND|ANY|ARRAY|BETWEEN|CASE|ELSE|END|EVERY|EXISTS|FIRST|IN|LIKE|NOT|OR|THEN|VALUED|WHEN|WITHIN)\\b/i,\n    punctuation: /[;[\\](),.{}:]/\n};\nPrism.languages.n4js = Prism.languages.extend(\"javascript\", {\n    keyword: /\\b(?:Array|any|boolean|break|case|catch|class|const|constructor|continue|debugger|declare|default|delete|do|else|enum|export|extends|false|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|module|new|null|number|package|private|protected|public|return|set|static|string|super|switch|this|throw|true|try|typeof|var|void|while|with|yield)\\b/\n}), Prism.languages.insertBefore(\"n4js\", \"constant\", {\n    annotation: {\n        pattern: /@+\\w+/,\n        alias: \"operator\"\n    }\n}), Prism.languages.n4jsd = Prism.languages.n4js;\nPrism.languages[\"nand2tetris-hdl\"] = {\n    comment: /\\/\\/.*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n    keyword: /\\b(?:BUILTIN|CHIP|CLOCKED|IN|OUT|PARTS)\\b/,\n    boolean: /\\b(?:false|true)\\b/,\n    function: /\\b[A-Za-z][A-Za-z0-9]*(?=\\()/,\n    number: /\\b\\d+\\b/,\n    operator: /=|\\.\\./,\n    punctuation: /[{}[\\];(),:]/\n};\n!function(e) {\n    var a = /\\{[^\\r\\n\\[\\]{}]*\\}/, n = {\n        \"quoted-string\": {\n            pattern: /\"(?:[^\"\\\\]|\\\\.)*\"/,\n            alias: \"operator\"\n        },\n        \"command-param-id\": {\n            pattern: /(\\s)\\w+:/,\n            lookbehind: !0,\n            alias: \"property\"\n        },\n        \"command-param-value\": [\n            {\n                pattern: a,\n                alias: \"selector\"\n            },\n            {\n                pattern: /([\\t ])\\S+/,\n                lookbehind: !0,\n                greedy: !0,\n                alias: \"operator\"\n            },\n            {\n                pattern: /\\S(?:.*\\S)?/,\n                alias: \"operator\"\n            }\n        ]\n    };\n    function t(e) {\n        return \"string\" == typeof e ? e : Array.isArray(e) ? e.map(t).join(\"\") : t(e.content);\n    }\n    e.languages.naniscript = {\n        comment: {\n            pattern: /^([\\t ]*);.*/m,\n            lookbehind: !0\n        },\n        define: {\n            pattern: /^>.+/m,\n            alias: \"tag\",\n            inside: {\n                value: {\n                    pattern: /(^>\\w+[\\t ]+)(?!\\s)[^{}\\r\\n]+/,\n                    lookbehind: !0,\n                    alias: \"operator\"\n                },\n                key: {\n                    pattern: /(^>)\\w+/,\n                    lookbehind: !0\n                }\n            }\n        },\n        label: {\n            pattern: /^([\\t ]*)#[\\t ]*\\w+[\\t ]*$/m,\n            lookbehind: !0,\n            alias: \"regex\"\n        },\n        command: {\n            pattern: /^([\\t ]*)@\\w+(?=[\\t ]|$).*/m,\n            lookbehind: !0,\n            alias: \"function\",\n            inside: {\n                \"command-name\": /^@\\w+/,\n                expression: {\n                    pattern: a,\n                    greedy: !0,\n                    alias: \"selector\"\n                },\n                \"command-params\": {\n                    pattern: /\\s*\\S[\\s\\S]*/,\n                    inside: n\n                }\n            }\n        },\n        \"generic-text\": {\n            pattern: /(^[ \\t]*)[^#@>;\\s].*/m,\n            lookbehind: !0,\n            alias: \"punctuation\",\n            inside: {\n                \"escaped-char\": /\\\\[{}\\[\\]\"]/,\n                expression: {\n                    pattern: a,\n                    greedy: !0,\n                    alias: \"selector\"\n                },\n                \"inline-command\": {\n                    pattern: /\\[[\\t ]*\\w[^\\r\\n\\[\\]]*\\]/,\n                    greedy: !0,\n                    alias: \"function\",\n                    inside: {\n                        \"command-params\": {\n                            pattern: /(^\\[[\\t ]*\\w+\\b)[\\s\\S]+(?=\\]$)/,\n                            lookbehind: !0,\n                            inside: n\n                        },\n                        \"command-param-name\": {\n                            pattern: /^(\\[[\\t ]*)\\w+/,\n                            lookbehind: !0,\n                            alias: \"name\"\n                        },\n                        \"start-stop-char\": /[\\[\\]]/\n                    }\n                }\n            }\n        }\n    }, e.languages.nani = e.languages.naniscript, e.hooks.add(\"after-tokenize\", function(e) {\n        e.tokens.forEach(function(e) {\n            if (\"string\" != typeof e && \"generic-text\" === e.type) {\n                var a = t(e);\n                (function(e) {\n                    for(var a = [], n = 0; n < e.length; n++){\n                        var t = e[n], r = \"[]{}\".indexOf(t);\n                        if (-1 !== r) {\n                            if (r % 2 == 0) a.push(r + 1);\n                            else if (a.pop() !== r) return !1;\n                        }\n                    }\n                    return 0 === a.length;\n                })(a) || (e.type = \"bad-line\", e.content = a);\n            }\n        });\n    });\n}(Prism);\nPrism.languages.nasm = {\n    comment: /;.*$/m,\n    string: /([\"'`])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    label: {\n        pattern: /(^\\s*)[A-Za-z._?$][\\w.?$@~#]*:/m,\n        lookbehind: !0,\n        alias: \"function\"\n    },\n    keyword: [\n        /\\[?BITS (?:16|32|64)\\]?/,\n        {\n            pattern: /(^\\s*)section\\s*[a-z.]+:?/im,\n            lookbehind: !0\n        },\n        /(?:extern|global)[^;\\r\\n]*/i,\n        /(?:CPU|DEFAULT|FLOAT).*$/m\n    ],\n    register: {\n        pattern: /\\b(?:st\\d|[xyz]mm\\d\\d?|[cdt]r\\d|r\\d\\d?[bwd]?|[er]?[abcd]x|[abcd][hl]|[er]?(?:bp|di|si|sp)|[cdefgs]s)\\b/i,\n        alias: \"variable\"\n    },\n    number: /(?:\\b|(?=\\$))(?:0[hx](?:\\.[\\da-f]+|[\\da-f]+(?:\\.[\\da-f]+)?)(?:p[+-]?\\d+)?|\\d[\\da-f]+[hx]|\\$\\d[\\da-f]*|0[oq][0-7]+|[0-7]+[oq]|0[by][01]+|[01]+[by]|0[dt]\\d+|(?:\\d+(?:\\.\\d+)?|\\.\\d+)(?:\\.?e[+-]?\\d+)?[dt]?)\\b/i,\n    operator: /[\\[\\]*+\\-\\/%<>=&|$!]/\n};\nPrism.languages.neon = {\n    comment: {\n        pattern: /#.*/,\n        greedy: !0\n    },\n    datetime: {\n        pattern: /(^|[[{(=:,\\s])\\d\\d\\d\\d-\\d\\d?-\\d\\d?(?:(?:[Tt]| +)\\d\\d?:\\d\\d:\\d\\d(?:\\.\\d*)? *(?:Z|[-+]\\d\\d?(?::?\\d\\d)?)?)?(?=$|[\\]}),\\s])/,\n        lookbehind: !0,\n        alias: \"number\"\n    },\n    key: {\n        pattern: /(^|[[{(,\\s])[^,:=[\\]{}()'\"\\s]+(?=\\s*:(?:$|[\\]}),\\s])|\\s*=)/,\n        lookbehind: !0,\n        alias: \"property\"\n    },\n    number: {\n        pattern: /(^|[[{(=:,\\s])[+-]?(?:0x[\\da-fA-F]+|0o[0-7]+|0b[01]+|(?:\\d+(?:\\.\\d*)?|\\.?\\d+)(?:[eE][+-]?\\d+)?)(?=$|[\\]}),:=\\s])/,\n        lookbehind: !0\n    },\n    boolean: {\n        pattern: /(^|[[{(=:,\\s])(?:false|no|true|yes)(?=$|[\\]}),:=\\s])/i,\n        lookbehind: !0\n    },\n    null: {\n        pattern: /(^|[[{(=:,\\s])(?:null)(?=$|[\\]}),:=\\s])/i,\n        lookbehind: !0,\n        alias: \"keyword\"\n    },\n    string: {\n        pattern: /(^|[[{(=:,\\s])(?:('''|\"\"\")\\r?\\n(?:(?:[^\\r\\n]|\\r?\\n(?![\\t ]*\\2))*\\r?\\n)?[\\t ]*\\2|'[^'\\r\\n]*'|\"(?:\\\\.|[^\\\\\"\\r\\n])*\")/,\n        lookbehind: !0,\n        greedy: !0\n    },\n    literal: {\n        pattern: /(^|[[{(=:,\\s])(?:[^#\"',:=[\\]{}()\\s`-]|[:-][^\"',=[\\]{}()\\s])(?:[^,:=\\]})(\\s]|:(?![\\s,\\]})]|$)|[ \\t]+[^#,:=\\]})(\\s])*/,\n        lookbehind: !0,\n        alias: \"string\"\n    },\n    punctuation: /[,:=[\\]{}()-]/\n};\nPrism.languages.nevod = {\n    comment: /\\/\\/.*|(?:\\/\\*[\\s\\S]*?(?:\\*\\/|$))/,\n    string: {\n        pattern: /(?:\"(?:\"\"|[^\"])*\"(?!\")|'(?:''|[^'])*'(?!'))!?\\*?/,\n        greedy: !0,\n        inside: {\n            \"string-attrs\": /!$|!\\*$|\\*$/\n        }\n    },\n    namespace: {\n        pattern: /(@namespace\\s+)[a-zA-Z0-9\\-.]+(?=\\s*\\{)/,\n        lookbehind: !0\n    },\n    pattern: {\n        pattern: /(@pattern\\s+)?#?[a-zA-Z0-9\\-.]+(?:\\s*\\(\\s*(?:~\\s*)?[a-zA-Z0-9\\-.]+\\s*(?:,\\s*(?:~\\s*)?[a-zA-Z0-9\\-.]*)*\\))?(?=\\s*=)/,\n        lookbehind: !0,\n        inside: {\n            \"pattern-name\": {\n                pattern: /^#?[a-zA-Z0-9\\-.]+/,\n                alias: \"class-name\"\n            },\n            fields: {\n                pattern: /\\(.*\\)/,\n                inside: {\n                    \"field-name\": {\n                        pattern: /[a-zA-Z0-9\\-.]+/,\n                        alias: \"variable\"\n                    },\n                    punctuation: /[,()]/,\n                    operator: {\n                        pattern: /~/,\n                        alias: \"field-hidden-mark\"\n                    }\n                }\n            }\n        }\n    },\n    search: {\n        pattern: /(@search\\s+|#)[a-zA-Z0-9\\-.]+(?:\\.\\*)?(?=\\s*;)/,\n        alias: \"function\",\n        lookbehind: !0\n    },\n    keyword: /@(?:having|inside|namespace|outside|pattern|require|search|where)\\b/,\n    \"standard-pattern\": {\n        pattern: /\\b(?:Alpha|AlphaNum|Any|Blank|End|LineBreak|Num|NumAlpha|Punct|Space|Start|Symbol|Word|WordBreak)\\b(?:\\([a-zA-Z0-9\\-.,\\s+]*\\))?/,\n        inside: {\n            \"standard-pattern-name\": {\n                pattern: /^[a-zA-Z0-9\\-.]+/,\n                alias: \"builtin\"\n            },\n            quantifier: {\n                pattern: /\\b\\d+(?:\\s*\\+|\\s*-\\s*\\d+)?(?!\\w)/,\n                alias: \"number\"\n            },\n            \"standard-pattern-attr\": {\n                pattern: /[a-zA-Z0-9\\-.]+/,\n                alias: \"builtin\"\n            },\n            punctuation: /[,()]/\n        }\n    },\n    quantifier: {\n        pattern: /\\b\\d+(?:\\s*\\+|\\s*-\\s*\\d+)?(?!\\w)/,\n        alias: \"number\"\n    },\n    operator: [\n        {\n            pattern: /=/,\n            alias: \"pattern-def\"\n        },\n        {\n            pattern: /&/,\n            alias: \"conjunction\"\n        },\n        {\n            pattern: /~/,\n            alias: \"exception\"\n        },\n        {\n            pattern: /\\?/,\n            alias: \"optionality\"\n        },\n        {\n            pattern: /[[\\]]/,\n            alias: \"repetition\"\n        },\n        {\n            pattern: /[{}]/,\n            alias: \"variation\"\n        },\n        {\n            pattern: /[+_]/,\n            alias: \"sequence\"\n        },\n        {\n            pattern: /\\.{2,3}/,\n            alias: \"span\"\n        }\n    ],\n    \"field-capture\": [\n        {\n            pattern: /([a-zA-Z0-9\\-.]+\\s*\\()\\s*[a-zA-Z0-9\\-.]+\\s*:\\s*[a-zA-Z0-9\\-.]+(?:\\s*,\\s*[a-zA-Z0-9\\-.]+\\s*:\\s*[a-zA-Z0-9\\-.]+)*(?=\\s*\\))/,\n            lookbehind: !0,\n            inside: {\n                \"field-name\": {\n                    pattern: /[a-zA-Z0-9\\-.]+/,\n                    alias: \"variable\"\n                },\n                colon: /:/\n            }\n        },\n        {\n            pattern: /[a-zA-Z0-9\\-.]+\\s*:/,\n            inside: {\n                \"field-name\": {\n                    pattern: /[a-zA-Z0-9\\-.]+/,\n                    alias: \"variable\"\n                },\n                colon: /:/\n            }\n        }\n    ],\n    punctuation: /[:;,()]/,\n    name: /[a-zA-Z0-9\\-.]+/\n};\n!function(e) {\n    var n = /\\$(?:\\w[a-z\\d]*(?:_[^\\x00-\\x1F\\s\"'\\\\()$]*)?|\\{[^}\\s\"'\\\\]+\\})/i;\n    e.languages.nginx = {\n        comment: {\n            pattern: /(^|[\\s{};])#.*/,\n            lookbehind: !0,\n            greedy: !0\n        },\n        directive: {\n            pattern: /(^|\\s)\\w(?:[^;{}\"'\\\\\\s]|\\\\.|\"(?:[^\"\\\\]|\\\\.)*\"|'(?:[^'\\\\]|\\\\.)*'|\\s+(?:#.*(?!.)|(?![#\\s])))*?(?=\\s*[;{])/,\n            lookbehind: !0,\n            greedy: !0,\n            inside: {\n                string: {\n                    pattern: /((?:^|[^\\\\])(?:\\\\\\\\)*)(?:\"(?:[^\"\\\\]|\\\\.)*\"|'(?:[^'\\\\]|\\\\.)*')/,\n                    lookbehind: !0,\n                    greedy: !0,\n                    inside: {\n                        escape: {\n                            pattern: /\\\\[\"'\\\\nrt]/,\n                            alias: \"entity\"\n                        },\n                        variable: n\n                    }\n                },\n                comment: {\n                    pattern: /(\\s)#.*/,\n                    lookbehind: !0,\n                    greedy: !0\n                },\n                keyword: {\n                    pattern: /^\\S+/,\n                    greedy: !0\n                },\n                boolean: {\n                    pattern: /(\\s)(?:off|on)(?!\\S)/,\n                    lookbehind: !0\n                },\n                number: {\n                    pattern: /(\\s)\\d+[a-z]*(?!\\S)/i,\n                    lookbehind: !0\n                },\n                variable: n\n            }\n        },\n        punctuation: /[{};]/\n    };\n}(Prism);\nPrism.languages.nim = {\n    comment: {\n        pattern: /#.*/,\n        greedy: !0\n    },\n    string: {\n        pattern: /(?:\\b(?!\\d)(?:\\w|\\\\x[89a-fA-F][0-9a-fA-F])+)?(?:\"\"\"[\\s\\S]*?\"\"\"(?!\")|\"(?:\\\\[\\s\\S]|\"\"|[^\"\\\\])*\")/,\n        greedy: !0\n    },\n    char: {\n        pattern: /'(?:\\\\(?:\\d+|x[\\da-fA-F]{0,2}|.)|[^'])'/,\n        greedy: !0\n    },\n    function: {\n        pattern: /(?:(?!\\d)(?:\\w|\\\\x[89a-fA-F][0-9a-fA-F])+|`[^`\\r\\n]+`)\\*?(?:\\[[^\\]]+\\])?(?=\\s*\\()/,\n        greedy: !0,\n        inside: {\n            operator: /\\*$/\n        }\n    },\n    identifier: {\n        pattern: /`[^`\\r\\n]+`/,\n        greedy: !0,\n        inside: {\n            punctuation: /`/\n        }\n    },\n    number: /\\b(?:0[xXoObB][\\da-fA-F_]+|\\d[\\d_]*(?:(?!\\.\\.)\\.[\\d_]*)?(?:[eE][+-]?\\d[\\d_]*)?)(?:'?[iuf]\\d*)?/,\n    keyword: /\\b(?:addr|as|asm|atomic|bind|block|break|case|cast|concept|const|continue|converter|defer|discard|distinct|do|elif|else|end|enum|except|export|finally|for|from|func|generic|if|import|include|interface|iterator|let|macro|method|mixin|nil|object|out|proc|ptr|raise|ref|return|static|template|try|tuple|type|using|var|when|while|with|without|yield)\\b/,\n    operator: {\n        pattern: /(^|[({\\[](?=\\.\\.)|(?![({\\[]\\.).)(?:(?:[=+\\-*\\/<>@$~&%|!?^:\\\\]|\\.\\.|\\.(?![)}\\]]))+|\\b(?:and|div|in|is|isnot|mod|not|notin|of|or|shl|shr|xor)\\b)/m,\n        lookbehind: !0\n    },\n    punctuation: /[({\\[]\\.|\\.[)}\\]]|[`(){}\\[\\],:]/\n};\nPrism.languages.nix = {\n    comment: {\n        pattern: /\\/\\*[\\s\\S]*?\\*\\/|#.*/,\n        greedy: !0\n    },\n    string: {\n        pattern: /\"(?:[^\"\\\\]|\\\\[\\s\\S])*\"|''(?:(?!'')[\\s\\S]|''(?:'|\\\\|\\$\\{))*''/,\n        greedy: !0,\n        inside: {\n            interpolation: {\n                pattern: /(^|(?:^|(?!'').)[^\\\\])\\$\\{(?:[^{}]|\\{[^}]*\\})*\\}/,\n                lookbehind: !0,\n                inside: null\n            }\n        }\n    },\n    url: [\n        /\\b(?:[a-z]{3,7}:\\/\\/)[\\w\\-+%~\\/.:#=?&]+/,\n        {\n            pattern: /([^\\/])(?:[\\w\\-+%~.:#=?&]*(?!\\/\\/)[\\w\\-+%~\\/.:#=?&])?(?!\\/\\/)\\/[\\w\\-+%~\\/.:#=?&]*/,\n            lookbehind: !0\n        }\n    ],\n    antiquotation: {\n        pattern: /\\$(?=\\{)/,\n        alias: \"important\"\n    },\n    number: /\\b\\d+\\b/,\n    keyword: /\\b(?:assert|builtins|else|if|in|inherit|let|null|or|then|with)\\b/,\n    function: /\\b(?:abort|add|all|any|attrNames|attrValues|baseNameOf|compareVersions|concatLists|currentSystem|deepSeq|derivation|dirOf|div|elem(?:At)?|fetch(?:Tarball|url)|filter(?:Source)?|fromJSON|genList|getAttr|getEnv|hasAttr|hashString|head|import|intersectAttrs|is(?:Attrs|Bool|Function|Int|List|Null|String)|length|lessThan|listToAttrs|map|mul|parseDrvName|pathExists|read(?:Dir|File)|removeAttrs|replaceStrings|seq|sort|stringLength|sub(?:string)?|tail|throw|to(?:File|JSON|Path|String|XML)|trace|typeOf)\\b|\\bfoldl'\\B/,\n    boolean: /\\b(?:false|true)\\b/,\n    operator: /[=!<>]=?|\\+\\+?|\\|\\||&&|\\/\\/|->?|[?@]/,\n    punctuation: /[{}()[\\].,:;]/\n}, Prism.languages.nix.string.inside.interpolation.inside = Prism.languages.nix;\nPrism.languages.nsis = {\n    comment: {\n        pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|[#;].*)/,\n        lookbehind: !0,\n        greedy: !0\n    },\n    string: {\n        pattern: /(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n        greedy: !0\n    },\n    keyword: {\n        pattern: /(^[\\t ]*)(?:Abort|Add(?:BrandingImage|Size)|AdvSplash|Allow(?:RootDirInstall|SkipFiles)|AutoCloseWindow|BG(?:Font|Gradient|Image)|Banner|BrandingText|BringToFront|CRCCheck|Call(?:InstDLL)?|Caption|ChangeUI|CheckBitmap|ClearErrors|CompletedText|ComponentText|CopyFiles|Create(?:Directory|Font|ShortCut)|Delete(?:INISec|INIStr|RegKey|RegValue)?|Detail(?:Print|sButtonText)|Dialer|Dir(?:Text|Var|Verify)|EnableWindow|Enum(?:RegKey|RegValue)|Exch|Exec(?:Shell(?:Wait)?|Wait)?|ExpandEnvStrings|File(?:BufSize|Close|ErrorText|Open|Read|ReadByte|ReadUTF16LE|ReadWord|Seek|Write|WriteByte|WriteUTF16LE|WriteWord)?|Find(?:Close|First|Next|Window)|FlushINI|Get(?:CurInstType|CurrentAddress|DLLVersion(?:Local)?|DlgItem|ErrorLevel|FileTime(?:Local)?|FullPathName|Function(?:Address|End)?|InstDirError|KnownFolderPath|LabelAddress|TempFileName|WinVer)|Goto|HideWindow|Icon|If(?:Abort|Errors|FileExists|RebootFlag|RtlLanguage|ShellVarContextAll|Silent)|InitPluginsDir|InstProgressFlags|Inst(?:Type(?:GetText|SetText)?)|Install(?:ButtonText|Colors|Dir(?:RegKey)?)|Int(?:64|Ptr)?CmpU?|Int(?:64)?Fmt|Int(?:Ptr)?Op|IsWindow|Lang(?:DLL|String)|License(?:BkColor|Data|ForceSelection|LangString|Text)|LoadLanguageFile|LockWindow|Log(?:Set|Text)|Manifest(?:DPIAware|SupportedOS)|Math|MessageBox|MiscButtonText|NSISdl|Name|Nop|OutFile|PE(?:DllCharacteristics|SubsysVer)|Page(?:Callbacks)?|Pop|Push|Quit|RMDir|Read(?:EnvStr|INIStr|RegDWORD|RegStr)|Reboot|RegDLL|Rename|RequestExecutionLevel|ReserveFile|Return|SearchPath|Section(?:End|GetFlags|GetInstTypes|GetSize|GetText|Group|In|SetFlags|SetInstTypes|SetSize|SetText)?|SendMessage|Set(?:AutoClose|BrandingImage|Compress|Compressor(?:DictSize)?|CtlColors|CurInstType|DatablockOptimize|DateSave|Details(?:Print|View)|ErrorLevel|Errors|FileAttributes|Font|OutPath|Overwrite|PluginUnload|RebootFlag|RegView|ShellVarContext|Silent)|Show(?:InstDetails|UninstDetails|Window)|Silent(?:Install|UnInstall)|Sleep|SpaceTexts|Splash|StartMenu|Str(?:CmpS?|Cpy|Len)|SubCaption|System|Target|UnRegDLL|Unicode|UninstPage|Uninstall(?:ButtonText|Caption|Icon|SubCaption|Text)|UserInfo|VI(?:AddVersionKey|FileVersion|ProductVersion)|VPatch|Var|WindowIcon|Write(?:INIStr|Reg(?:Bin|DWORD|ExpandStr|MultiStr|None|Str)|Uninstaller)|XPStyle|ns(?:Dialogs|Exec))\\b/m,\n        lookbehind: !0\n    },\n    property: /\\b(?:ARCHIVE|FILE_(?:ATTRIBUTE_ARCHIVE|ATTRIBUTE_NORMAL|ATTRIBUTE_OFFLINE|ATTRIBUTE_READONLY|ATTRIBUTE_SYSTEM|ATTRIBUTE_TEMPORARY)|HK(?:(?:CR|CU|LM)(?:32|64)?|DD|PD|U)|HKEY_(?:CLASSES_ROOT|CURRENT_CONFIG|CURRENT_USER|DYN_DATA|LOCAL_MACHINE|PERFORMANCE_DATA|USERS)|ID(?:ABORT|CANCEL|IGNORE|NO|OK|RETRY|YES)|MB_(?:ABORTRETRYIGNORE|DEFBUTTON1|DEFBUTTON2|DEFBUTTON3|DEFBUTTON4|ICONEXCLAMATION|ICONINFORMATION|ICONQUESTION|ICONSTOP|OK|OKCANCEL|RETRYCANCEL|RIGHT|RTLREADING|SETFOREGROUND|TOPMOST|USERICON|YESNO)|NORMAL|OFFLINE|READONLY|SHCTX|SHELL_CONTEXT|SYSTEM|TEMPORARY|admin|all|auto|both|colored|false|force|hide|highest|lastused|leave|listonly|none|normal|notset|off|on|open|print|show|silent|silentlog|smooth|textonly|true|user)\\b/,\n    constant: /\\$\\{[!\\w\\.:\\^-]+\\}|\\$\\([!\\w\\.:\\^-]+\\)/,\n    variable: /\\$\\w[\\w\\.]*/,\n    number: /\\b0x[\\dA-Fa-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[Ee]-?\\d+)?/,\n    operator: /--?|\\+\\+?|<=?|>=?|==?=?|&&?|\\|\\|?|[?*\\/~^%]/,\n    punctuation: /[{}[\\];(),.:]/,\n    important: {\n        pattern: /(^[\\t ]*)!(?:addincludedir|addplugindir|appendfile|cd|define|delfile|echo|else|endif|error|execute|finalize|getdllversion|gettlbversion|if|ifdef|ifmacrodef|ifmacrondef|ifndef|include|insertmacro|macro|macroend|makensis|packhdr|pragma|searchparse|searchreplace|system|tempfile|undef|verbose|warning)\\b/im,\n        lookbehind: !0\n    }\n};\nPrism.languages.objectivec = Prism.languages.extend(\"c\", {\n    string: {\n        pattern: /@?\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"/,\n        greedy: !0\n    },\n    keyword: /\\b(?:asm|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|in|inline|int|long|register|return|self|short|signed|sizeof|static|struct|super|switch|typedef|typeof|union|unsigned|void|volatile|while)\\b|(?:@interface|@end|@implementation|@protocol|@class|@public|@protected|@private|@property|@try|@catch|@finally|@throw|@synthesize|@dynamic|@selector)\\b/,\n    operator: /-[->]?|\\+\\+?|!=?|<<?=?|>>?=?|==?|&&?|\\|\\|?|[~^%?*\\/@]/\n}), delete Prism.languages.objectivec[\"class-name\"], Prism.languages.objc = Prism.languages.objectivec;\nPrism.languages.ocaml = {\n    comment: {\n        pattern: /\\(\\*[\\s\\S]*?\\*\\)/,\n        greedy: !0\n    },\n    char: {\n        pattern: /'(?:[^\\\\\\r\\n']|\\\\(?:.|[ox]?[0-9a-f]{1,3}))'/i,\n        greedy: !0\n    },\n    string: [\n        {\n            pattern: /\"(?:\\\\(?:[\\s\\S]|\\r\\n)|[^\\\\\\r\\n\"])*\"/,\n            greedy: !0\n        },\n        {\n            pattern: /\\{([a-z_]*)\\|[\\s\\S]*?\\|\\1\\}/,\n            greedy: !0\n        }\n    ],\n    number: [\n        /\\b(?:0b[01][01_]*|0o[0-7][0-7_]*)\\b/i,\n        /\\b0x[a-f0-9][a-f0-9_]*(?:\\.[a-f0-9_]*)?(?:p[+-]?\\d[\\d_]*)?(?!\\w)/i,\n        /\\b\\d[\\d_]*(?:\\.[\\d_]*)?(?:e[+-]?\\d[\\d_]*)?(?!\\w)/i\n    ],\n    directive: {\n        pattern: /\\B#\\w+/,\n        alias: \"property\"\n    },\n    label: {\n        pattern: /\\B~\\w+/,\n        alias: \"property\"\n    },\n    \"type-variable\": {\n        pattern: /\\B'\\w+/,\n        alias: \"function\"\n    },\n    variant: {\n        pattern: /`\\w+/,\n        alias: \"symbol\"\n    },\n    keyword: /\\b(?:as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|match|method|module|mutable|new|nonrec|object|of|open|private|rec|sig|struct|then|to|try|type|val|value|virtual|when|where|while|with)\\b/,\n    boolean: /\\b(?:false|true)\\b/,\n    \"operator-like-punctuation\": {\n        pattern: /\\[[<>|]|[>|]\\]|\\{<|>\\}/,\n        alias: \"punctuation\"\n    },\n    operator: /\\.[.~]|:[=>]|[=<>@^|&+\\-*\\/$%!?~][!$%&*+\\-.\\/:<=>?@^|~]*|\\b(?:and|asr|land|lor|lsl|lsr|lxor|mod|or)\\b/,\n    punctuation: /;;|::|[(){}\\[\\].,:;#]|\\b_\\b/\n};\n!function(e) {\n    var t = /\\\\(?:[\"'\\\\abefnrtv]|0[0-7]{2}|U[\\dA-Fa-f]{6}|u[\\dA-Fa-f]{4}|x[\\dA-Fa-f]{2})/;\n    e.languages.odin = {\n        comment: [\n            {\n                pattern: /\\/\\*(?:[^/*]|\\/(?!\\*)|\\*(?!\\/)|\\/\\*(?:\\*(?!\\/)|[^*])*(?:\\*\\/|$))*(?:\\*\\/|$)/,\n                greedy: !0\n            },\n            {\n                pattern: /#![^\\n\\r]*/,\n                greedy: !0\n            },\n            {\n                pattern: /\\/\\/[^\\n\\r]*/,\n                greedy: !0\n            }\n        ],\n        char: {\n            pattern: /'(?:\\\\(?:.|[0Uux][0-9A-Fa-f]{1,6})|[^\\n\\r'\\\\])'/,\n            greedy: !0,\n            inside: {\n                symbol: t\n            }\n        },\n        string: [\n            {\n                pattern: /`[^`]*`/,\n                greedy: !0\n            },\n            {\n                pattern: /\"(?:\\\\.|[^\\n\\r\"\\\\])*\"/,\n                greedy: !0,\n                inside: {\n                    symbol: t\n                }\n            }\n        ],\n        directive: {\n            pattern: /#\\w+/,\n            alias: \"property\"\n        },\n        number: /\\b0(?:b[01_]+|d[\\d_]+|h_*(?:(?:(?:[\\dA-Fa-f]_*){8}){1,2}|(?:[\\dA-Fa-f]_*){4})|o[0-7_]+|x[\\dA-F_a-f]+|z[\\dAB_ab]+)\\b|(?:\\b\\d+(?:\\.(?!\\.)\\d*)?|\\B\\.\\d+)(?:[Ee][+-]?\\d*)?[ijk]?(?!\\w)/,\n        discard: {\n            pattern: /\\b_\\b/,\n            alias: \"keyword\"\n        },\n        \"procedure-definition\": {\n            pattern: /\\b\\w+(?=[ \\t]*(?::\\s*){2}proc\\b)/,\n            alias: \"function\"\n        },\n        keyword: /\\b(?:asm|auto_cast|bit_set|break|case|cast|context|continue|defer|distinct|do|dynamic|else|enum|fallthrough|for|foreign|if|import|in|map|matrix|not_in|or_else|or_return|package|proc|return|struct|switch|transmute|typeid|union|using|when|where)\\b/,\n        \"procedure-name\": {\n            pattern: /\\b\\w+(?=[ \\t]*\\()/,\n            alias: \"function\"\n        },\n        boolean: /\\b(?:false|nil|true)\\b/,\n        \"constant-parameter-sign\": {\n            pattern: /\\$/,\n            alias: \"important\"\n        },\n        undefined: {\n            pattern: /---/,\n            alias: \"operator\"\n        },\n        arrow: {\n            pattern: /->/,\n            alias: \"punctuation\"\n        },\n        operator: /\\+\\+|--|\\.\\.[<=]?|(?:&~|[-!*+/=~]|[%&<>|]{1,2})=?|[?^]/,\n        punctuation: /[(),.:;@\\[\\]{}]/\n    };\n}(Prism);\n!function(E) {\n    E.languages.opencl = E.languages.extend(\"c\", {\n        keyword: /\\b(?:(?:__)?(?:constant|global|kernel|local|private|read_only|read_write|write_only)|__attribute__|auto|(?:bool|u?(?:char|int|long|short)|half|quad)(?:2|3|4|8|16)?|break|case|complex|const|continue|(?:double|float)(?:16(?:x(?:1|2|4|8|16))?|1x(?:1|2|4|8|16)|2(?:x(?:1|2|4|8|16))?|3|4(?:x(?:1|2|4|8|16))?|8(?:x(?:1|2|4|8|16))?)?|default|do|else|enum|extern|for|goto|if|imaginary|inline|packed|pipe|register|restrict|return|signed|sizeof|static|struct|switch|typedef|uniform|union|unsigned|void|volatile|while)\\b/,\n        number: /(?:\\b0x(?:[\\da-f]+(?:\\.[\\da-f]*)?|\\.[\\da-f]+)(?:p[+-]?\\d+)?|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?)[fuhl]{0,4}/i,\n        boolean: /\\b(?:false|true)\\b/,\n        \"constant-opencl-kernel\": {\n            pattern: /\\b(?:CHAR_(?:BIT|MAX|MIN)|CLK_(?:ADDRESS_(?:CLAMP(?:_TO_EDGE)?|NONE|REPEAT)|FILTER_(?:LINEAR|NEAREST)|(?:GLOBAL|LOCAL)_MEM_FENCE|NORMALIZED_COORDS_(?:FALSE|TRUE))|CL_(?:BGRA|(?:HALF_)?FLOAT|INTENSITY|LUMINANCE|A?R?G?B?[Ax]?|(?:(?:UN)?SIGNED|[US]NORM)_(?:INT(?:8|16|32))|UNORM_(?:INT_101010|SHORT_(?:555|565)))|(?:DBL|FLT|HALF)_(?:DIG|EPSILON|(?:MAX|MIN)(?:(?:_10)?_EXP)?|MANT_DIG)|FLT_RADIX|HUGE_VALF?|(?:INT|LONG|SCHAR|SHRT)_(?:MAX|MIN)|INFINITY|MAXFLOAT|M_(?:[12]_PI|2_SQRTPI|E|LN(?:2|10)|LOG(?:2|10)E?|PI(?:_[24])?|SQRT(?:1_2|2))(?:_F|_H)?|NAN|(?:UCHAR|UINT|ULONG|USHRT)_MAX)\\b/,\n            alias: \"constant\"\n        }\n    }), E.languages.insertBefore(\"opencl\", \"class-name\", {\n        \"builtin-type\": {\n            pattern: /\\b(?:_cl_(?:command_queue|context|device_id|event|kernel|mem|platform_id|program|sampler)|cl_(?:image_format|mem_fence_flags)|clk_event_t|event_t|image(?:1d_(?:array_|buffer_)?t|2d_(?:array_(?:depth_|msaa_depth_|msaa_)?|depth_|msaa_depth_|msaa_)?t|3d_t)|intptr_t|ndrange_t|ptrdiff_t|queue_t|reserve_id_t|sampler_t|size_t|uintptr_t)\\b/,\n            alias: \"keyword\"\n        }\n    });\n    var _ = {\n        \"type-opencl-host\": {\n            pattern: /\\b(?:cl_(?:GLenum|GLint|GLuin|addressing_mode|bitfield|bool|buffer_create_type|build_status|channel_(?:order|type)|(?:u?(?:char|int|long|short)|double|float)(?:2|3|4|8|16)?|command_(?:queue(?:_info|_properties)?|type)|context(?:_info|_properties)?|device_(?:exec_capabilities|fp_config|id|info|local_mem_type|mem_cache_type|type)|(?:event|sampler)(?:_info)?|filter_mode|half|image_info|kernel(?:_info|_work_group_info)?|map_flags|mem(?:_flags|_info|_object_type)?|platform_(?:id|info)|profiling_info|program(?:_build_info|_info)?))\\b/,\n            alias: \"keyword\"\n        },\n        \"boolean-opencl-host\": {\n            pattern: /\\bCL_(?:FALSE|TRUE)\\b/,\n            alias: \"boolean\"\n        },\n        \"constant-opencl-host\": {\n            pattern: /\\bCL_(?:A|ABGR|ADDRESS_(?:CLAMP(?:_TO_EDGE)?|MIRRORED_REPEAT|NONE|REPEAT)|ARGB|BGRA|BLOCKING|BUFFER_CREATE_TYPE_REGION|BUILD_(?:ERROR|IN_PROGRESS|NONE|PROGRAM_FAILURE|SUCCESS)|COMMAND_(?:ACQUIRE_GL_OBJECTS|BARRIER|COPY_(?:BUFFER(?:_RECT|_TO_IMAGE)?|IMAGE(?:_TO_BUFFER)?)|FILL_(?:BUFFER|IMAGE)|MAP(?:_BUFFER|_IMAGE)|MARKER|MIGRATE(?:_SVM)?_MEM_OBJECTS|NATIVE_KERNEL|NDRANGE_KERNEL|READ_(?:BUFFER(?:_RECT)?|IMAGE)|RELEASE_GL_OBJECTS|SVM_(?:FREE|MAP|MEMCPY|MEMFILL|UNMAP)|TASK|UNMAP_MEM_OBJECT|USER|WRITE_(?:BUFFER(?:_RECT)?|IMAGE))|COMPILER_NOT_AVAILABLE|COMPILE_PROGRAM_FAILURE|COMPLETE|CONTEXT_(?:DEVICES|INTEROP_USER_SYNC|NUM_DEVICES|PLATFORM|PROPERTIES|REFERENCE_COUNT)|DEPTH(?:_STENCIL)?|DEVICE_(?:ADDRESS_BITS|AFFINITY_DOMAIN_(?:L[1-4]_CACHE|NEXT_PARTITIONABLE|NUMA)|AVAILABLE|BUILT_IN_KERNELS|COMPILER_AVAILABLE|DOUBLE_FP_CONFIG|ENDIAN_LITTLE|ERROR_CORRECTION_SUPPORT|EXECUTION_CAPABILITIES|EXTENSIONS|GLOBAL_(?:MEM_(?:CACHELINE_SIZE|CACHE_SIZE|CACHE_TYPE|SIZE)|VARIABLE_PREFERRED_TOTAL_SIZE)|HOST_UNIFIED_MEMORY|IL_VERSION|IMAGE(?:2D_MAX_(?:HEIGHT|WIDTH)|3D_MAX_(?:DEPTH|HEIGHT|WIDTH)|_BASE_ADDRESS_ALIGNMENT|_MAX_ARRAY_SIZE|_MAX_BUFFER_SIZE|_PITCH_ALIGNMENT|_SUPPORT)|LINKER_AVAILABLE|LOCAL_MEM_SIZE|LOCAL_MEM_TYPE|MAX_(?:CLOCK_FREQUENCY|COMPUTE_UNITS|CONSTANT_ARGS|CONSTANT_BUFFER_SIZE|GLOBAL_VARIABLE_SIZE|MEM_ALLOC_SIZE|NUM_SUB_GROUPS|ON_DEVICE_(?:EVENTS|QUEUES)|PARAMETER_SIZE|PIPE_ARGS|READ_IMAGE_ARGS|READ_WRITE_IMAGE_ARGS|SAMPLERS|WORK_GROUP_SIZE|WORK_ITEM_DIMENSIONS|WORK_ITEM_SIZES|WRITE_IMAGE_ARGS)|MEM_BASE_ADDR_ALIGN|MIN_DATA_TYPE_ALIGN_SIZE|NAME|NATIVE_VECTOR_WIDTH_(?:CHAR|DOUBLE|FLOAT|HALF|INT|LONG|SHORT)|NOT_(?:AVAILABLE|FOUND)|OPENCL_C_VERSION|PARENT_DEVICE|PARTITION_(?:AFFINITY_DOMAIN|BY_AFFINITY_DOMAIN|BY_COUNTS|BY_COUNTS_LIST_END|EQUALLY|FAILED|MAX_SUB_DEVICES|PROPERTIES|TYPE)|PIPE_MAX_(?:ACTIVE_RESERVATIONS|PACKET_SIZE)|PLATFORM|PREFERRED_(?:GLOBAL_ATOMIC_ALIGNMENT|INTEROP_USER_SYNC|LOCAL_ATOMIC_ALIGNMENT|PLATFORM_ATOMIC_ALIGNMENT|VECTOR_WIDTH_(?:CHAR|DOUBLE|FLOAT|HALF|INT|LONG|SHORT))|PRINTF_BUFFER_SIZE|PROFILE|PROFILING_TIMER_RESOLUTION|QUEUE_(?:ON_(?:DEVICE_(?:MAX_SIZE|PREFERRED_SIZE|PROPERTIES)|HOST_PROPERTIES)|PROPERTIES)|REFERENCE_COUNT|SINGLE_FP_CONFIG|SUB_GROUP_INDEPENDENT_FORWARD_PROGRESS|SVM_(?:ATOMICS|CAPABILITIES|COARSE_GRAIN_BUFFER|FINE_GRAIN_BUFFER|FINE_GRAIN_SYSTEM)|TYPE(?:_ACCELERATOR|_ALL|_CPU|_CUSTOM|_DEFAULT|_GPU)?|VENDOR(?:_ID)?|VERSION)|DRIVER_VERSION|EVENT_(?:COMMAND_(?:EXECUTION_STATUS|QUEUE|TYPE)|CONTEXT|REFERENCE_COUNT)|EXEC_(?:KERNEL|NATIVE_KERNEL|STATUS_ERROR_FOR_EVENTS_IN_WAIT_LIST)|FILTER_(?:LINEAR|NEAREST)|FLOAT|FP_(?:CORRECTLY_ROUNDED_DIVIDE_SQRT|DENORM|FMA|INF_NAN|ROUND_TO_INF|ROUND_TO_NEAREST|ROUND_TO_ZERO|SOFT_FLOAT)|GLOBAL|HALF_FLOAT|IMAGE_(?:ARRAY_SIZE|BUFFER|DEPTH|ELEMENT_SIZE|FORMAT|FORMAT_MISMATCH|FORMAT_NOT_SUPPORTED|HEIGHT|NUM_MIP_LEVELS|NUM_SAMPLES|ROW_PITCH|SLICE_PITCH|WIDTH)|INTENSITY|INVALID_(?:ARG_INDEX|ARG_SIZE|ARG_VALUE|BINARY|BUFFER_SIZE|BUILD_OPTIONS|COMMAND_QUEUE|COMPILER_OPTIONS|CONTEXT|DEVICE|DEVICE_PARTITION_COUNT|DEVICE_QUEUE|DEVICE_TYPE|EVENT|EVENT_WAIT_LIST|GLOBAL_OFFSET|GLOBAL_WORK_SIZE|GL_OBJECT|HOST_PTR|IMAGE_DESCRIPTOR|IMAGE_FORMAT_DESCRIPTOR|IMAGE_SIZE|KERNEL|KERNEL_ARGS|KERNEL_DEFINITION|KERNEL_NAME|LINKER_OPTIONS|MEM_OBJECT|MIP_LEVEL|OPERATION|PIPE_SIZE|PLATFORM|PROGRAM|PROGRAM_EXECUTABLE|PROPERTY|QUEUE_PROPERTIES|SAMPLER|VALUE|WORK_DIMENSION|WORK_GROUP_SIZE|WORK_ITEM_SIZE)|KERNEL_(?:ARG_(?:ACCESS_(?:NONE|QUALIFIER|READ_ONLY|READ_WRITE|WRITE_ONLY)|ADDRESS_(?:CONSTANT|GLOBAL|LOCAL|PRIVATE|QUALIFIER)|INFO_NOT_AVAILABLE|NAME|TYPE_(?:CONST|NAME|NONE|PIPE|QUALIFIER|RESTRICT|VOLATILE))|ATTRIBUTES|COMPILE_NUM_SUB_GROUPS|COMPILE_WORK_GROUP_SIZE|CONTEXT|EXEC_INFO_SVM_FINE_GRAIN_SYSTEM|EXEC_INFO_SVM_PTRS|FUNCTION_NAME|GLOBAL_WORK_SIZE|LOCAL_MEM_SIZE|LOCAL_SIZE_FOR_SUB_GROUP_COUNT|MAX_NUM_SUB_GROUPS|MAX_SUB_GROUP_SIZE_FOR_NDRANGE|NUM_ARGS|PREFERRED_WORK_GROUP_SIZE_MULTIPLE|PRIVATE_MEM_SIZE|PROGRAM|REFERENCE_COUNT|SUB_GROUP_COUNT_FOR_NDRANGE|WORK_GROUP_SIZE)|LINKER_NOT_AVAILABLE|LINK_PROGRAM_FAILURE|LOCAL|LUMINANCE|MAP_(?:FAILURE|READ|WRITE|WRITE_INVALIDATE_REGION)|MEM_(?:ALLOC_HOST_PTR|ASSOCIATED_MEMOBJECT|CONTEXT|COPY_HOST_PTR|COPY_OVERLAP|FLAGS|HOST_NO_ACCESS|HOST_PTR|HOST_READ_ONLY|HOST_WRITE_ONLY|KERNEL_READ_AND_WRITE|MAP_COUNT|OBJECT_(?:ALLOCATION_FAILURE|BUFFER|IMAGE1D|IMAGE1D_ARRAY|IMAGE1D_BUFFER|IMAGE2D|IMAGE2D_ARRAY|IMAGE3D|PIPE)|OFFSET|READ_ONLY|READ_WRITE|REFERENCE_COUNT|SIZE|SVM_ATOMICS|SVM_FINE_GRAIN_BUFFER|TYPE|USES_SVM_POINTER|USE_HOST_PTR|WRITE_ONLY)|MIGRATE_MEM_OBJECT_(?:CONTENT_UNDEFINED|HOST)|MISALIGNED_SUB_BUFFER_OFFSET|NONE|NON_BLOCKING|OUT_OF_(?:HOST_MEMORY|RESOURCES)|PIPE_(?:MAX_PACKETS|PACKET_SIZE)|PLATFORM_(?:EXTENSIONS|HOST_TIMER_RESOLUTION|NAME|PROFILE|VENDOR|VERSION)|PROFILING_(?:COMMAND_(?:COMPLETE|END|QUEUED|START|SUBMIT)|INFO_NOT_AVAILABLE)|PROGRAM_(?:BINARIES|BINARY_SIZES|BINARY_TYPE(?:_COMPILED_OBJECT|_EXECUTABLE|_LIBRARY|_NONE)?|BUILD_(?:GLOBAL_VARIABLE_TOTAL_SIZE|LOG|OPTIONS|STATUS)|CONTEXT|DEVICES|IL|KERNEL_NAMES|NUM_DEVICES|NUM_KERNELS|REFERENCE_COUNT|SOURCE)|QUEUED|QUEUE_(?:CONTEXT|DEVICE|DEVICE_DEFAULT|ON_DEVICE|ON_DEVICE_DEFAULT|OUT_OF_ORDER_EXEC_MODE_ENABLE|PROFILING_ENABLE|PROPERTIES|REFERENCE_COUNT|SIZE)|R|RA|READ_(?:ONLY|WRITE)_CACHE|RG|RGB|RGBA|RGBx|RGx|RUNNING|Rx|SAMPLER_(?:ADDRESSING_MODE|CONTEXT|FILTER_MODE|LOD_MAX|LOD_MIN|MIP_FILTER_MODE|NORMALIZED_COORDS|REFERENCE_COUNT)|(?:UN)?SIGNED_INT(?:8|16|32)|SNORM_INT(?:8|16)|SUBMITTED|SUCCESS|UNORM_INT(?:8|16|24|_101010|_101010_2)|UNORM_SHORT_(?:555|565)|VERSION_(?:1_0|1_1|1_2|2_0|2_1)|sBGRA|sRGB|sRGBA|sRGBx)\\b/,\n            alias: \"constant\"\n        },\n        \"function-opencl-host\": {\n            pattern: /\\bcl(?:BuildProgram|CloneKernel|CompileProgram|Create(?:Buffer|CommandQueue(?:WithProperties)?|Context|ContextFromType|Image|Image2D|Image3D|Kernel|KernelsInProgram|Pipe|ProgramWith(?:Binary|BuiltInKernels|IL|Source)|Sampler|SamplerWithProperties|SubBuffer|SubDevices|UserEvent)|Enqueue(?:(?:Barrier|Marker)(?:WithWaitList)?|Copy(?:Buffer(?:Rect|ToImage)?|Image(?:ToBuffer)?)|(?:Fill|Map)(?:Buffer|Image)|MigrateMemObjects|NDRangeKernel|NativeKernel|(?:Read|Write)(?:Buffer(?:Rect)?|Image)|SVM(?:Free|Map|MemFill|Memcpy|MigrateMem|Unmap)|Task|UnmapMemObject|WaitForEvents)|Finish|Flush|Get(?:CommandQueueInfo|ContextInfo|Device(?:AndHostTimer|IDs|Info)|Event(?:Profiling)?Info|ExtensionFunctionAddress(?:ForPlatform)?|HostTimer|ImageInfo|Kernel(?:ArgInfo|Info|SubGroupInfo|WorkGroupInfo)|MemObjectInfo|PipeInfo|Platform(?:IDs|Info)|Program(?:Build)?Info|SamplerInfo|SupportedImageFormats)|LinkProgram|(?:Release|Retain)(?:CommandQueue|Context|Device|Event|Kernel|MemObject|Program|Sampler)|SVM(?:Alloc|Free)|Set(?:CommandQueueProperty|DefaultDeviceCommandQueue|EventCallback|Kernel|Kernel(?:Arg(?:SVMPointer)?|ExecInfo)|MemObjectDestructorCallback|UserEventStatus)|Unload(?:Platform)?Compiler|WaitForEvents)\\b/,\n            alias: \"function\"\n        }\n    };\n    E.languages.insertBefore(\"c\", \"keyword\", _), E.languages.cpp && (_[\"type-opencl-host-cpp\"] = {\n        pattern: /\\b(?:Buffer|BufferGL|BufferRenderGL|CommandQueue|Context|Device|DeviceCommandQueue|EnqueueArgs|Event|Image|Image1D|Image1DArray|Image1DBuffer|Image2D|Image2DArray|Image2DGL|Image3D|Image3DGL|ImageFormat|ImageGL|Kernel|KernelFunctor|LocalSpaceArg|Memory|NDRange|Pipe|Platform|Program|SVMAllocator|SVMTraitAtomic|SVMTraitCoarse|SVMTraitFine|SVMTraitReadOnly|SVMTraitReadWrite|SVMTraitWriteOnly|Sampler|UserEvent)\\b/,\n        alias: \"keyword\"\n    }, E.languages.insertBefore(\"cpp\", \"keyword\", _));\n}(Prism);\nPrism.languages.openqasm = {\n    comment: /\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*/,\n    string: {\n        pattern: /\"[^\"\\r\\n\\t]*\"|'[^'\\r\\n\\t]*'/,\n        greedy: !0\n    },\n    keyword: /\\b(?:CX|OPENQASM|U|barrier|boxas|boxto|break|const|continue|ctrl|def|defcal|defcalgrammar|delay|else|end|for|gate|gphase|if|in|include|inv|kernel|lengthof|let|measure|pow|reset|return|rotary|stretchinf|while)\\b|#pragma\\b/,\n    \"class-name\": /\\b(?:angle|bit|bool|creg|fixed|float|int|length|qreg|qubit|stretch|uint)\\b/,\n    function: /\\b(?:cos|exp|ln|popcount|rotl|rotr|sin|sqrt|tan)\\b(?=\\s*\\()/,\n    constant: /\\b(?:euler|pi|tau)\\b|π|𝜏|ℇ/,\n    number: {\n        pattern: /(^|[^.\\w$])(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?(?:dt|ns|us|µs|ms|s)?/i,\n        lookbehind: !0\n    },\n    operator: /->|>>=?|<<=?|&&|\\|\\||\\+\\+|--|[!=<>&|~^+\\-*/%]=?|@/,\n    punctuation: /[(){}\\[\\];,:.]/\n}, Prism.languages.qasm = Prism.languages.openqasm;\nPrism.languages.oz = {\n    comment: {\n        pattern: /\\/\\*[\\s\\S]*?\\*\\/|%.*/,\n        greedy: !0\n    },\n    string: {\n        pattern: /\"(?:[^\"\\\\]|\\\\[\\s\\S])*\"/,\n        greedy: !0\n    },\n    atom: {\n        pattern: /'(?:[^'\\\\]|\\\\[\\s\\S])*'/,\n        greedy: !0,\n        alias: \"builtin\"\n    },\n    keyword: /\\$|\\[\\]|\\b(?:_|at|attr|case|catch|choice|class|cond|declare|define|dis|else(?:case|if)?|end|export|fail|false|feat|finally|from|fun|functor|if|import|in|local|lock|meth|nil|not|of|or|prepare|proc|prop|raise|require|self|skip|then|thread|true|try|unit)\\b/,\n    function: [\n        /\\b[a-z][A-Za-z\\d]*(?=\\()/,\n        {\n            pattern: /(\\{)[A-Z][A-Za-z\\d]*\\b/,\n            lookbehind: !0\n        }\n    ],\n    number: /\\b(?:0[bx][\\da-f]+|\\d+(?:\\.\\d*)?(?:e~?\\d+)?)\\b|&(?:[^\\\\]|\\\\(?:\\d{3}|.))/i,\n    variable: /`(?:[^`\\\\]|\\\\.)+`/,\n    \"attr-name\": /\\b\\w+(?=[ \\t]*:(?![:=]))/,\n    operator: /:(?:=|::?)|<[-:=]?|=(?:=|<?:?)|>=?:?|\\\\=:?|!!?|[|#+\\-*\\/,~^@]|\\b(?:andthen|div|mod|orelse)\\b/,\n    punctuation: /[\\[\\](){}.:;?]/\n};\nPrism.languages.parigp = {\n    comment: /\\/\\*[\\s\\S]*?\\*\\/|\\\\\\\\.*/,\n    string: {\n        pattern: /\"(?:[^\"\\\\\\r\\n]|\\\\.)*\"/,\n        greedy: !0\n    },\n    keyword: function() {\n        var r = [\n            \"breakpoint\",\n            \"break\",\n            \"dbg_down\",\n            \"dbg_err\",\n            \"dbg_up\",\n            \"dbg_x\",\n            \"forcomposite\",\n            \"fordiv\",\n            \"forell\",\n            \"forpart\",\n            \"forprime\",\n            \"forstep\",\n            \"forsubgroup\",\n            \"forvec\",\n            \"for\",\n            \"iferr\",\n            \"if\",\n            \"local\",\n            \"my\",\n            \"next\",\n            \"return\",\n            \"until\",\n            \"while\"\n        ];\n        return r = r.map(function(r) {\n            return r.split(\"\").join(\" *\");\n        }).join(\"|\"), RegExp(\"\\\\b(?:\" + r + \")\\\\b\");\n    }(),\n    function: /\\b\\w(?:[\\w ]*\\w)?(?= *\\()/,\n    number: {\n        pattern: /((?:\\. *\\. *)?)(?:\\b\\d(?: *\\d)*(?: *(?!\\. *\\.)\\.(?: *\\d)*)?|\\. *\\d(?: *\\d)*)(?: *e *(?:[+-] *)?\\d(?: *\\d)*)?/i,\n        lookbehind: !0\n    },\n    operator: /\\. *\\.|[*\\/!](?: *=)?|%(?: *=|(?: *#)?(?: *')*)?|\\+(?: *[+=])?|-(?: *[-=>])?|<(?: *>|(?: *<)?(?: *=)?)?|>(?: *>)?(?: *=)?|=(?: *=){0,2}|\\\\(?: *\\/)?(?: *=)?|&(?: *&)?|\\| *\\||['#~^]/,\n    punctuation: /[\\[\\]{}().,:;|]/\n};\n!function(e) {\n    var n = e.languages.parser = e.languages.extend(\"markup\", {\n        keyword: {\n            pattern: /(^|[^^])(?:\\^(?:case|eval|for|if|switch|throw)\\b|@(?:BASE|CLASS|GET(?:_DEFAULT)?|OPTIONS|SET_DEFAULT|USE)\\b)/,\n            lookbehind: !0\n        },\n        variable: {\n            pattern: /(^|[^^])\\B\\$(?:\\w+|(?=[.{]))(?:(?:\\.|::?)\\w+)*(?:\\.|::?)?/,\n            lookbehind: !0,\n            inside: {\n                punctuation: /\\.|:+/\n            }\n        },\n        function: {\n            pattern: /(^|[^^])\\B[@^]\\w+(?:(?:\\.|::?)\\w+)*(?:\\.|::?)?/,\n            lookbehind: !0,\n            inside: {\n                keyword: {\n                    pattern: /(^@)(?:GET_|SET_)/,\n                    lookbehind: !0\n                },\n                punctuation: /\\.|:+/\n            }\n        },\n        escape: {\n            pattern: /\\^(?:[$^;@()\\[\\]{}\"':]|#[a-f\\d]*)/i,\n            alias: \"builtin\"\n        },\n        punctuation: /[\\[\\](){};]/\n    });\n    n = e.languages.insertBefore(\"parser\", \"keyword\", {\n        \"parser-comment\": {\n            pattern: /(\\s)#.*/,\n            lookbehind: !0,\n            alias: \"comment\"\n        },\n        expression: {\n            pattern: /(^|[^^])\\((?:[^()]|\\((?:[^()]|\\((?:[^()])*\\))*\\))*\\)/,\n            greedy: !0,\n            lookbehind: !0,\n            inside: {\n                string: {\n                    pattern: /(^|[^^])([\"'])(?:(?!\\2)[^^]|\\^[\\s\\S])*\\2/,\n                    lookbehind: !0\n                },\n                keyword: n.keyword,\n                variable: n.variable,\n                function: n.function,\n                boolean: /\\b(?:false|true)\\b/,\n                number: /\\b(?:0x[a-f\\d]+|\\d+(?:\\.\\d*)?(?:e[+-]?\\d+)?)\\b/i,\n                escape: n.escape,\n                operator: /[~+*\\/\\\\%]|!(?:\\|\\|?|=)?|&&?|\\|\\|?|==|<[<=]?|>[>=]?|-[fd]?|\\b(?:def|eq|ge|gt|in|is|le|lt|ne)\\b/,\n                punctuation: n.punctuation\n            }\n        }\n    }), e.languages.insertBefore(\"inside\", \"punctuation\", {\n        expression: n.expression,\n        keyword: n.keyword,\n        variable: n.variable,\n        function: n.function,\n        escape: n.escape,\n        \"parser-punctuation\": {\n            pattern: n.punctuation,\n            alias: \"punctuation\"\n        }\n    }, n.tag.inside[\"attr-value\"]);\n}(Prism);\nPrism.languages.pascal = {\n    directive: {\n        pattern: /\\{\\$[\\s\\S]*?\\}/,\n        greedy: !0,\n        alias: [\n            \"marco\",\n            \"property\"\n        ]\n    },\n    comment: {\n        pattern: /\\(\\*[\\s\\S]*?\\*\\)|\\{[\\s\\S]*?\\}|\\/\\/.*/,\n        greedy: !0\n    },\n    string: {\n        pattern: /(?:'(?:''|[^'\\r\\n])*'(?!')|#[&$%]?[a-f\\d]+)+|\\^[a-z]/i,\n        greedy: !0\n    },\n    asm: {\n        pattern: /(\\basm\\b)[\\s\\S]+?(?=\\bend\\s*[;[])/i,\n        lookbehind: !0,\n        greedy: !0,\n        inside: null\n    },\n    keyword: [\n        {\n            pattern: /(^|[^&])\\b(?:absolute|array|asm|begin|case|const|constructor|destructor|do|downto|else|end|file|for|function|goto|if|implementation|inherited|inline|interface|label|nil|object|of|operator|packed|procedure|program|record|reintroduce|repeat|self|set|string|then|to|type|unit|until|uses|var|while|with)\\b/i,\n            lookbehind: !0\n        },\n        {\n            pattern: /(^|[^&])\\b(?:dispose|exit|false|new|true)\\b/i,\n            lookbehind: !0\n        },\n        {\n            pattern: /(^|[^&])\\b(?:class|dispinterface|except|exports|finalization|finally|initialization|inline|library|on|out|packed|property|raise|resourcestring|threadvar|try)\\b/i,\n            lookbehind: !0\n        },\n        {\n            pattern: /(^|[^&])\\b(?:absolute|abstract|alias|assembler|bitpacked|break|cdecl|continue|cppdecl|cvar|default|deprecated|dynamic|enumerator|experimental|export|external|far|far16|forward|generic|helper|implements|index|interrupt|iochecks|local|message|name|near|nodefault|noreturn|nostackframe|oldfpccall|otherwise|overload|override|pascal|platform|private|protected|public|published|read|register|reintroduce|result|safecall|saveregisters|softfloat|specialize|static|stdcall|stored|strict|unaligned|unimplemented|varargs|virtual|write)\\b/i,\n            lookbehind: !0\n        }\n    ],\n    number: [\n        /(?:[&%]\\d+|\\$[a-f\\d]+)/i,\n        /\\b\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?/i\n    ],\n    operator: [\n        /\\.\\.|\\*\\*|:=|<[<=>]?|>[>=]?|[+\\-*\\/]=?|[@^=]/,\n        {\n            pattern: /(^|[^&])\\b(?:and|as|div|exclude|in|include|is|mod|not|or|shl|shr|xor)\\b/,\n            lookbehind: !0\n        }\n    ],\n    punctuation: /\\(\\.|\\.\\)|[()\\[\\]:;,.]/\n}, Prism.languages.pascal.asm.inside = Prism.languages.extend(\"pascal\", {\n    asm: void 0,\n    keyword: void 0,\n    operator: void 0\n}), Prism.languages.objectpascal = Prism.languages.pascal;\n!function(e) {\n    var n = \"(?:\\\\b\\\\w+(?:<braces>)?|<braces>)\".replace(/<braces>/g, function() {\n        return \"\\\\((?:[^()]|\\\\((?:[^()]|\\\\([^()]*\\\\))*\\\\))*\\\\)\";\n    }), t = e.languages.pascaligo = {\n        comment: /\\(\\*[\\s\\S]+?\\*\\)|\\/\\/.*/,\n        string: {\n            pattern: /([\"'`])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|\\^[a-z]/i,\n            greedy: !0\n        },\n        \"class-name\": [\n            {\n                pattern: RegExp(\"(\\\\btype\\\\s+\\\\w+\\\\s+is\\\\s+)<type>\".replace(/<type>/g, function() {\n                    return n;\n                }), \"i\"),\n                lookbehind: !0,\n                inside: null\n            },\n            {\n                pattern: RegExp(\"<type>(?=\\\\s+is\\\\b)\".replace(/<type>/g, function() {\n                    return n;\n                }), \"i\"),\n                inside: null\n            },\n            {\n                pattern: RegExp(\"(:\\\\s*)<type>\".replace(/<type>/g, function() {\n                    return n;\n                })),\n                lookbehind: !0,\n                inside: null\n            }\n        ],\n        keyword: {\n            pattern: /(^|[^&])\\b(?:begin|block|case|const|else|end|fail|for|from|function|if|is|nil|of|remove|return|skip|then|type|var|while|with)\\b/i,\n            lookbehind: !0\n        },\n        boolean: {\n            pattern: /(^|[^&])\\b(?:False|True)\\b/i,\n            lookbehind: !0\n        },\n        builtin: {\n            pattern: /(^|[^&])\\b(?:bool|int|list|map|nat|record|string|unit)\\b/i,\n            lookbehind: !0\n        },\n        function: /\\b\\w+(?=\\s*\\()/,\n        number: [\n            /%[01]+|&[0-7]+|\\$[a-f\\d]+/i,\n            /\\b\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?(?:mtz|n)?/i\n        ],\n        operator: /->|=\\/=|\\.\\.|\\*\\*|:=|<[<=>]?|>[>=]?|[+\\-*\\/]=?|[@^=|]|\\b(?:and|mod|or)\\b/,\n        punctuation: /\\(\\.|\\.\\)|[()\\[\\]:;,.{}]/\n    }, i = [\n        \"comment\",\n        \"keyword\",\n        \"builtin\",\n        \"operator\",\n        \"punctuation\"\n    ].reduce(function(e, n) {\n        return e[n] = t[n], e;\n    }, {});\n    t[\"class-name\"].forEach(function(e) {\n        e.inside = i;\n    });\n}(Prism);\nPrism.languages.psl = {\n    comment: {\n        pattern: /#.*/,\n        greedy: !0\n    },\n    string: {\n        pattern: /\"(?:\\\\.|[^\\\\\"])*\"/,\n        greedy: !0,\n        inside: {\n            symbol: /\\\\[ntrbA-Z\"\\\\]/\n        }\n    },\n    \"heredoc-string\": {\n        pattern: /<<<([a-zA-Z_]\\w*)[\\r\\n](?:.*[\\r\\n])*?\\1\\b/,\n        alias: \"string\",\n        greedy: !0\n    },\n    keyword: /\\b(?:__multi|__single|case|default|do|else|elsif|exit|export|for|foreach|function|if|last|line|local|next|requires|return|switch|until|while|word)\\b/,\n    constant: /\\b(?:ALARM|CHART_ADD_GRAPH|CHART_DELETE_GRAPH|CHART_DESTROY|CHART_LOAD|CHART_PRINT|EOF|OFFLINE|OK|PSL_PROF_LOG|R_CHECK_HORIZ|R_CHECK_VERT|R_CLICKER|R_COLUMN|R_FRAME|R_ICON|R_LABEL|R_LABEL_CENTER|R_LIST_MULTIPLE|R_LIST_MULTIPLE_ND|R_LIST_SINGLE|R_LIST_SINGLE_ND|R_MENU|R_POPUP|R_POPUP_SCROLLED|R_RADIO_HORIZ|R_RADIO_VERT|R_ROW|R_SCALE_HORIZ|R_SCALE_VERT|R_SEP_HORIZ|R_SEP_VERT|R_SPINNER|R_TEXT_FIELD|R_TEXT_FIELD_LABEL|R_TOGGLE|TRIM_LEADING|TRIM_LEADING_AND_TRAILING|TRIM_REDUNDANT|TRIM_TRAILING|VOID|WARN)\\b/,\n    boolean: /\\b(?:FALSE|False|NO|No|TRUE|True|YES|Yes|false|no|true|yes)\\b/,\n    variable: /\\b(?:PslDebug|errno|exit_status)\\b/,\n    builtin: {\n        pattern: /\\b(?:PslExecute|PslFunctionCall|PslFunctionExists|PslSetOptions|_snmp_debug|acos|add_diary|annotate|annotate_get|ascii_to_ebcdic|asctime|asin|atan|atexit|batch_set|blackout|cat|ceil|chan_exists|change_state|close|code_cvt|cond_signal|cond_wait|console_type|convert_base|convert_date|convert_locale_date|cos|cosh|create|date|dcget_text|destroy|destroy_lock|dget_text|difference|dump_hist|ebcdic_to_ascii|encrypt|event_archive|event_catalog_get|event_check|event_query|event_range_manage|event_range_query|event_report|event_schedule|event_trigger|event_trigger2|execute|exists|exp|fabs|file|floor|fmod|fopen|fseek|ftell|full_discovery|get|get_chan_info|get_ranges|get_text|get_vars|getenv|gethostinfo|getpid|getpname|grep|history|history_get_retention|in_transition|index|int|internal|intersection|is_var|isnumber|join|kill|length|lines|lock|lock_info|log|log10|loge|matchline|msg_check|msg_get_format|msg_get_severity|msg_printf|msg_sprintf|ntharg|nthargf|nthline|nthlinef|num_bytes|num_consoles|pconfig|popen|poplines|pow|print|printf|proc_exists|process|random|read|readln|refresh_parameters|remote_check|remote_close|remote_event_query|remote_event_trigger|remote_file_send|remote_open|remove|replace|rindex|sec_check_priv|sec_store_get|sec_store_set|set|set_alarm_ranges|set_locale|share|sin|sinh|sleep|snmp_agent_config|snmp_agent_start|snmp_agent_stop|snmp_close|snmp_config|snmp_get|snmp_get_next|snmp_h_get|snmp_h_get_next|snmp_h_set|snmp_open|snmp_set|snmp_trap_ignore|snmp_trap_listen|snmp_trap_raise_std_trap|snmp_trap_receive|snmp_trap_register_im|snmp_trap_send|snmp_walk|sopen|sort|splitline|sprintf|sqrt|srandom|str_repeat|strcasecmp|subset|substr|system|tail|tan|tanh|text_domain|time|tmpnam|tolower|toupper|trace_psl_process|trim|union|unique|unlock|unset|va_arg|va_start|write)\\b/,\n        alias: \"builtin-function\"\n    },\n    \"foreach-variable\": {\n        pattern: /(\\bforeach\\s+(?:(?:\\w+\\b|\"(?:\\\\.|[^\\\\\"])*\")\\s+){0,2})[_a-zA-Z]\\w*(?=\\s*\\()/,\n        lookbehind: !0,\n        greedy: !0\n    },\n    function: /\\b[_a-z]\\w*\\b(?=\\s*\\()/i,\n    number: /\\b(?:0x[0-9a-f]+|\\d+(?:\\.\\d+)?)\\b/i,\n    operator: /--|\\+\\+|&&=?|\\|\\|=?|<<=?|>>=?|[=!]~|[-+*/%&|^!=<>]=?|\\.|[:?]/,\n    punctuation: /[(){}\\[\\];,]/\n};\nPrism.languages.pcaxis = {\n    string: /\"[^\"]*\"/,\n    keyword: {\n        pattern: /((?:^|;)\\s*)[-A-Z\\d]+(?:\\s*\\[[-\\w]+\\])?(?:\\s*\\(\"[^\"]*\"(?:,\\s*\"[^\"]*\")*\\))?(?=\\s*=)/,\n        lookbehind: !0,\n        greedy: !0,\n        inside: {\n            keyword: /^[-A-Z\\d]+/,\n            language: {\n                pattern: /^(\\s*)\\[[-\\w]+\\]/,\n                lookbehind: !0,\n                inside: {\n                    punctuation: /^\\[|\\]$/,\n                    property: /[-\\w]+/\n                }\n            },\n            \"sub-key\": {\n                pattern: /^(\\s*)\\S[\\s\\S]*/,\n                lookbehind: !0,\n                inside: {\n                    parameter: {\n                        pattern: /\"[^\"]*\"/,\n                        alias: \"property\"\n                    },\n                    punctuation: /^\\(|\\)$|,/\n                }\n            }\n        }\n    },\n    operator: /=/,\n    tlist: {\n        pattern: /TLIST\\s*\\(\\s*\\w+(?:(?:\\s*,\\s*\"[^\"]*\")+|\\s*,\\s*\"[^\"]*\"-\"[^\"]*\")?\\s*\\)/,\n        greedy: !0,\n        inside: {\n            function: /^TLIST/,\n            property: {\n                pattern: /^(\\s*\\(\\s*)\\w+/,\n                lookbehind: !0\n            },\n            string: /\"[^\"]*\"/,\n            punctuation: /[(),]/,\n            operator: /-/\n        }\n    },\n    punctuation: /[;,]/,\n    number: {\n        pattern: /(^|\\s)\\d+(?:\\.\\d+)?(?!\\S)/,\n        lookbehind: !0\n    },\n    boolean: /NO|YES/\n}, Prism.languages.px = Prism.languages.pcaxis;\nPrism.languages.peoplecode = {\n    comment: RegExp([\n        \"/\\\\*[^]*?\\\\*/\",\n        \"\\\\bREM[^;]*;\",\n        \"<\\\\*(?:[^<*]|\\\\*(?!>)|<(?!\\\\*)|<\\\\*(?:(?!\\\\*>)[^])*\\\\*>)*\\\\*>\",\n        \"/\\\\+[^]*?\\\\+/\"\n    ].join(\"|\")),\n    string: {\n        pattern: /'(?:''|[^'\\r\\n])*'(?!')|\"(?:\"\"|[^\"\\r\\n])*\"(?!\")/,\n        greedy: !0\n    },\n    variable: /%\\w+/,\n    \"function-definition\": {\n        pattern: /((?:^|[^\\w-])(?:function|method)\\s+)\\w+/i,\n        lookbehind: !0,\n        alias: \"function\"\n    },\n    \"class-name\": {\n        pattern: /((?:^|[^-\\w])(?:as|catch|class|component|create|extends|global|implements|instance|local|of|property|returns)\\s+)\\w+(?::\\w+)*/i,\n        lookbehind: !0,\n        inside: {\n            punctuation: /:/\n        }\n    },\n    keyword: /\\b(?:abstract|alias|as|catch|class|component|constant|create|declare|else|end-(?:class|evaluate|for|function|get|if|method|set|try|while)|evaluate|extends|for|function|get|global|if|implements|import|instance|library|local|method|null|of|out|peopleCode|private|program|property|protected|readonly|ref|repeat|returns?|set|step|then|throw|to|try|until|value|when(?:-other)?|while)\\b/i,\n    \"operator-keyword\": {\n        pattern: /\\b(?:and|not|or)\\b/i,\n        alias: \"operator\"\n    },\n    function: /[_a-z]\\w*(?=\\s*\\()/i,\n    boolean: /\\b(?:false|true)\\b/i,\n    number: /\\b\\d+(?:\\.\\d+)?\\b/,\n    operator: /<>|[<>]=?|!=|\\*\\*|[-+*/|=@]/,\n    punctuation: /[:.;,()[\\]]/\n}, Prism.languages.pcode = Prism.languages.peoplecode;\n!function(e) {\n    var n = \"(?:\\\\((?:[^()\\\\\\\\]|\\\\\\\\[^])*\\\\)|\\\\{(?:[^{}\\\\\\\\]|\\\\\\\\[^])*\\\\}|\\\\[(?:[^[\\\\]\\\\\\\\]|\\\\\\\\[^])*\\\\]|<(?:[^<>\\\\\\\\]|\\\\\\\\[^])*>)\";\n    e.languages.perl = {\n        comment: [\n            {\n                pattern: /(^\\s*)=\\w[\\s\\S]*?=cut.*/m,\n                lookbehind: !0,\n                greedy: !0\n            },\n            {\n                pattern: /(^|[^\\\\$])#.*/,\n                lookbehind: !0,\n                greedy: !0\n            }\n        ],\n        string: [\n            {\n                pattern: RegExp(\"\\\\b(?:q|qq|qw|qx)(?![a-zA-Z0-9])\\\\s*(?:\" + [\n                    \"([^a-zA-Z0-9\\\\s{(\\\\[<])(?:(?!\\\\1)[^\\\\\\\\]|\\\\\\\\[^])*\\\\1\",\n                    \"([a-zA-Z0-9])(?:(?!\\\\2)[^\\\\\\\\]|\\\\\\\\[^])*\\\\2\",\n                    n\n                ].join(\"|\") + \")\"),\n                greedy: !0\n            },\n            {\n                pattern: /(\"|`)(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/,\n                greedy: !0\n            },\n            {\n                pattern: /'(?:[^'\\\\\\r\\n]|\\\\.)*'/,\n                greedy: !0\n            }\n        ],\n        regex: [\n            {\n                pattern: RegExp(\"\\\\b(?:m|qr)(?![a-zA-Z0-9])\\\\s*(?:\" + [\n                    \"([^a-zA-Z0-9\\\\s{(\\\\[<])(?:(?!\\\\1)[^\\\\\\\\]|\\\\\\\\[^])*\\\\1\",\n                    \"([a-zA-Z0-9])(?:(?!\\\\2)[^\\\\\\\\]|\\\\\\\\[^])*\\\\2\",\n                    n\n                ].join(\"|\") + \")[msixpodualngc]*\"),\n                greedy: !0\n            },\n            {\n                pattern: RegExp(\"(^|[^-])\\\\b(?:s|tr|y)(?![a-zA-Z0-9])\\\\s*(?:\" + [\n                    \"([^a-zA-Z0-9\\\\s{(\\\\[<])(?:(?!\\\\2)[^\\\\\\\\]|\\\\\\\\[^])*\\\\2(?:(?!\\\\2)[^\\\\\\\\]|\\\\\\\\[^])*\\\\2\",\n                    \"([a-zA-Z0-9])(?:(?!\\\\3)[^\\\\\\\\]|\\\\\\\\[^])*\\\\3(?:(?!\\\\3)[^\\\\\\\\]|\\\\\\\\[^])*\\\\3\",\n                    n + \"\\\\s*\" + n\n                ].join(\"|\") + \")[msixpodualngcer]*\"),\n                lookbehind: !0,\n                greedy: !0\n            },\n            {\n                pattern: /\\/(?:[^\\/\\\\\\r\\n]|\\\\.)*\\/[msixpodualngc]*(?=\\s*(?:$|[\\r\\n,.;})&|\\-+*~<>!?^]|(?:and|cmp|eq|ge|gt|le|lt|ne|not|or|x|xor)\\b))/,\n                greedy: !0\n            }\n        ],\n        variable: [\n            /[&*$@%]\\{\\^[A-Z]+\\}/,\n            /[&*$@%]\\^[A-Z_]/,\n            /[&*$@%]#?(?=\\{)/,\n            /[&*$@%]#?(?:(?:::)*'?(?!\\d)[\\w$]+(?![\\w$]))+(?:::)*/,\n            /[&*$@%]\\d+/,\n            /(?!%=)[$@%][!\"#$%&'()*+,\\-.\\/:;<=>?@[\\\\\\]^_`{|}~]/\n        ],\n        filehandle: {\n            pattern: /<(?![<=])\\S*?>|\\b_\\b/,\n            alias: \"symbol\"\n        },\n        \"v-string\": {\n            pattern: /v\\d+(?:\\.\\d+)*|\\d+(?:\\.\\d+){2,}/,\n            alias: \"string\"\n        },\n        function: {\n            pattern: /(\\bsub[ \\t]+)\\w+/,\n            lookbehind: !0\n        },\n        keyword: /\\b(?:any|break|continue|default|delete|die|do|else|elsif|eval|for|foreach|given|goto|if|last|local|my|next|our|package|print|redo|require|return|say|state|sub|switch|undef|unless|until|use|when|while)\\b/,\n        number: /\\b(?:0x[\\dA-Fa-f](?:_?[\\dA-Fa-f])*|0b[01](?:_?[01])*|(?:(?:\\d(?:_?\\d)*)?\\.)?\\d(?:_?\\d)*(?:[Ee][+-]?\\d+)?)\\b/,\n        operator: /-[rwxoRWXOezsfdlpSbctugkTBMAC]\\b|\\+[+=]?|-[-=>]?|\\*\\*?=?|\\/\\/?=?|=[=~>]?|~[~=]?|\\|\\|?=?|&&?=?|<(?:=>?|<=?)?|>>?=?|![~=]?|[%^]=?|\\.(?:=|\\.\\.?)?|[\\\\?]|\\bx(?:=|\\b)|\\b(?:and|cmp|eq|ge|gt|le|lt|ne|not|or|xor)\\b/,\n        punctuation: /[{}[\\];(),:]/\n    };\n}(Prism);\n!function(a) {\n    var e = \"(?:\\\\b[a-zA-Z]\\\\w*|[|\\\\\\\\[\\\\]])+\";\n    a.languages.phpdoc = a.languages.extend(\"javadoclike\", {\n        parameter: {\n            pattern: RegExp(\"(@(?:global|param|property(?:-read|-write)?|var)\\\\s+(?:\" + e + \"\\\\s+)?)\\\\$\\\\w+\"),\n            lookbehind: !0\n        }\n    }), a.languages.insertBefore(\"phpdoc\", \"keyword\", {\n        \"class-name\": [\n            {\n                pattern: RegExp(\"(@(?:global|package|param|property(?:-read|-write)?|return|subpackage|throws|var)\\\\s+)\" + e),\n                lookbehind: !0,\n                inside: {\n                    keyword: /\\b(?:array|bool|boolean|callback|double|false|float|int|integer|mixed|null|object|resource|self|string|true|void)\\b/,\n                    punctuation: /[|\\\\[\\]()]/\n                }\n            }\n        ]\n    }), a.languages.javadoclike.addSupport(\"php\", a.languages.phpdoc);\n}(Prism);\nPrism.languages.insertBefore(\"php\", \"variable\", {\n    this: {\n        pattern: /\\$this\\b/,\n        alias: \"keyword\"\n    },\n    global: /\\$(?:GLOBALS|HTTP_RAW_POST_DATA|_(?:COOKIE|ENV|FILES|GET|POST|REQUEST|SERVER|SESSION)|argc|argv|http_response_header|php_errormsg)\\b/,\n    scope: {\n        pattern: /\\b[\\w\\\\]+::/,\n        inside: {\n            keyword: /\\b(?:parent|self|static)\\b/,\n            punctuation: /::|\\\\/\n        }\n    }\n});\n!function(e) {\n    var t = /\\$\\w+|%[a-z]+%/;\n    e.languages[\"plant-uml\"] = {\n        comment: {\n            pattern: /(^[ \\t]*)(?:'.*|\\/'[\\s\\S]*?'\\/)/m,\n            lookbehind: !0,\n            greedy: !0\n        },\n        preprocessor: {\n            pattern: /(^[ \\t]*)!.*/m,\n            lookbehind: !0,\n            greedy: !0,\n            alias: \"property\",\n            inside: {\n                variable: t\n            }\n        },\n        delimiter: {\n            pattern: /(^[ \\t]*)@(?:end|start)uml\\b/m,\n            lookbehind: !0,\n            greedy: !0,\n            alias: \"punctuation\"\n        },\n        arrow: {\n            pattern: RegExp(\"(^|[^-.<>?|\\\\\\\\[\\\\]ox])[[?]?[ox]?(?:(?:-+(?:[drlu]|do|down|le|left|ri|right|up)-+|\\\\.+(?:[drlu]|do|down|le|left|ri|right|up)\\\\.+|-+(?:\\\\[[^[\\\\]]*\\\\]-*)?|\\\\[[^[\\\\]]*\\\\]-+|\\\\.+(?:\\\\[[^[\\\\]]*\\\\]\\\\.*)?|\\\\[[^[\\\\]]*\\\\]\\\\.+)(?:>{1,2}|/{1,2}|\\\\\\\\{1,2}|\\\\|>|[#*^+{xo])|(?:<{1,2}|/{1,2}|\\\\\\\\{1,2}|<\\\\||[#*^+}xo])(?:-+(?:[drlu]|do|down|le|left|ri|right|up)-+|\\\\.+(?:[drlu]|do|down|le|left|ri|right|up)\\\\.+|-+(?:\\\\[[^[\\\\]]*\\\\]-*)?|\\\\[[^[\\\\]]*\\\\]-+|\\\\.+(?:\\\\[[^[\\\\]]*\\\\]\\\\.*)?|\\\\[[^[\\\\]]*\\\\]\\\\.+)(?:(?:>{1,2}|/{1,2}|\\\\\\\\{1,2}|\\\\|>|[#*^+{xo]))?)[ox]?[\\\\]?]?(?![-.<>?|\\\\\\\\\\\\]ox])\"),\n            lookbehind: !0,\n            greedy: !0,\n            alias: \"operator\",\n            inside: {\n                expression: {\n                    pattern: /(\\[)[^[\\]]+(?=\\])/,\n                    lookbehind: !0,\n                    inside: null\n                },\n                punctuation: /\\[(?=$|\\])|^\\]/\n            }\n        },\n        string: {\n            pattern: /\"[^\"]*\"/,\n            greedy: !0\n        },\n        text: {\n            pattern: /(\\[[ \\t]*[\\r\\n]+(?![\\r\\n]))[^\\]]*(?=\\])/,\n            lookbehind: !0,\n            greedy: !0,\n            alias: \"string\"\n        },\n        keyword: [\n            {\n                pattern: /^([ \\t]*)(?:abstract\\s+class|end\\s+(?:box|fork|group|merge|note|ref|split|title)|(?:fork|split)(?:\\s+again)?|activate|actor|agent|alt|annotation|artifact|autoactivate|autonumber|backward|binary|boundary|box|break|caption|card|case|circle|class|clock|cloud|collections|component|concise|control|create|critical|database|deactivate|destroy|detach|diamond|else|elseif|end|end[hr]note|endif|endswitch|endwhile|entity|enum|file|folder|footer|frame|group|[hr]?note|header|hexagon|hide|if|interface|label|legend|loop|map|namespace|network|newpage|node|nwdiag|object|opt|package|page|par|participant|person|queue|rectangle|ref|remove|repeat|restore|return|robust|scale|set|show|skinparam|stack|start|state|stop|storage|switch|title|together|usecase|usecase\\/|while)(?=\\s|$)/m,\n                lookbehind: !0,\n                greedy: !0\n            },\n            /\\b(?:elseif|equals|not|while)(?=\\s*\\()/,\n            /\\b(?:as|is|then)\\b/\n        ],\n        divider: {\n            pattern: /^==.+==$/m,\n            greedy: !0,\n            alias: \"important\"\n        },\n        time: {\n            pattern: /@(?:\\d+(?:[:/]\\d+){2}|[+-]?\\d+|:[a-z]\\w*(?:[+-]\\d+)?)\\b/i,\n            greedy: !0,\n            alias: \"number\"\n        },\n        color: {\n            pattern: /#(?:[a-z_]+|[a-fA-F0-9]+)\\b/,\n            alias: \"symbol\"\n        },\n        variable: t,\n        punctuation: /[:,;()[\\]{}]|\\.{3}/\n    }, e.languages[\"plant-uml\"].arrow.inside.expression.inside = e.languages[\"plant-uml\"], e.languages.plantuml = e.languages[\"plant-uml\"];\n}(Prism);\nPrism.languages.plsql = Prism.languages.extend(\"sql\", {\n    comment: {\n        pattern: /\\/\\*[\\s\\S]*?\\*\\/|--.*/,\n        greedy: !0\n    },\n    keyword: /\\b(?:A|ACCESSIBLE|ADD|AGENT|AGGREGATE|ALL|ALTER|AND|ANY|ARRAY|AS|ASC|AT|ATTRIBUTE|AUTHID|AVG|BEGIN|BETWEEN|BFILE_BASE|BINARY|BLOB_BASE|BLOCK|BODY|BOTH|BOUND|BULK|BY|BYTE|C|CALL|CALLING|CASCADE|CASE|CHAR|CHARACTER|CHARSET|CHARSETFORM|CHARSETID|CHAR_BASE|CHECK|CLOB_BASE|CLONE|CLOSE|CLUSTER|CLUSTERS|COLAUTH|COLLECT|COLUMNS|COMMENT|COMMIT|COMMITTED|COMPILED|COMPRESS|CONNECT|CONSTANT|CONSTRUCTOR|CONTEXT|CONTINUE|CONVERT|COUNT|CRASH|CREATE|CREDENTIAL|CURRENT|CURSOR|CUSTOMDATUM|DANGLING|DATA|DATE|DATE_BASE|DAY|DECLARE|DEFAULT|DEFINE|DELETE|DESC|DETERMINISTIC|DIRECTORY|DISTINCT|DOUBLE|DROP|DURATION|ELEMENT|ELSE|ELSIF|EMPTY|END|ESCAPE|EXCEPT|EXCEPTION|EXCEPTIONS|EXCLUSIVE|EXECUTE|EXISTS|EXIT|EXTERNAL|FETCH|FINAL|FIRST|FIXED|FLOAT|FOR|FORALL|FORCE|FROM|FUNCTION|GENERAL|GOTO|GRANT|GROUP|HASH|HAVING|HEAP|HIDDEN|HOUR|IDENTIFIED|IF|IMMEDIATE|IMMUTABLE|IN|INCLUDING|INDEX|INDEXES|INDICATOR|INDICES|INFINITE|INSERT|INSTANTIABLE|INT|INTERFACE|INTERSECT|INTERVAL|INTO|INVALIDATE|IS|ISOLATION|JAVA|LANGUAGE|LARGE|LEADING|LENGTH|LEVEL|LIBRARY|LIKE|LIKE2|LIKE4|LIKEC|LIMIT|LIMITED|LOCAL|LOCK|LONG|LOOP|MAP|MAX|MAXLEN|MEMBER|MERGE|MIN|MINUS|MINUTE|MOD|MODE|MODIFY|MONTH|MULTISET|MUTABLE|NAME|NAN|NATIONAL|NATIVE|NCHAR|NEW|NOCOMPRESS|NOCOPY|NOT|NOWAIT|NULL|NUMBER_BASE|OBJECT|OCICOLL|OCIDATE|OCIDATETIME|OCIDURATION|OCIINTERVAL|OCILOBLOCATOR|OCINUMBER|OCIRAW|OCIREF|OCIREFCURSOR|OCIROWID|OCISTRING|OCITYPE|OF|OLD|ON|ONLY|OPAQUE|OPEN|OPERATOR|OPTION|OR|ORACLE|ORADATA|ORDER|ORGANIZATION|ORLANY|ORLVARY|OTHERS|OUT|OVERLAPS|OVERRIDING|PACKAGE|PARALLEL_ENABLE|PARAMETER|PARAMETERS|PARENT|PARTITION|PASCAL|PERSISTABLE|PIPE|PIPELINED|PLUGGABLE|POLYMORPHIC|PRAGMA|PRECISION|PRIOR|PRIVATE|PROCEDURE|PUBLIC|RAISE|RANGE|RAW|READ|RECORD|REF|REFERENCE|RELIES_ON|REM|REMAINDER|RENAME|RESOURCE|RESULT|RESULT_CACHE|RETURN|RETURNING|REVERSE|REVOKE|ROLLBACK|ROW|SAMPLE|SAVE|SAVEPOINT|SB1|SB2|SB4|SECOND|SEGMENT|SELECT|SELF|SEPARATE|SEQUENCE|SERIALIZABLE|SET|SHARE|SHORT|SIZE|SIZE_T|SOME|SPARSE|SQL|SQLCODE|SQLDATA|SQLNAME|SQLSTATE|STANDARD|START|STATIC|STDDEV|STORED|STRING|STRUCT|STYLE|SUBMULTISET|SUBPARTITION|SUBSTITUTABLE|SUBTYPE|SUM|SYNONYM|TABAUTH|TABLE|TDO|THE|THEN|TIME|TIMESTAMP|TIMEZONE_ABBR|TIMEZONE_HOUR|TIMEZONE_MINUTE|TIMEZONE_REGION|TO|TRAILING|TRANSACTION|TRANSACTIONAL|TRUSTED|TYPE|UB1|UB2|UB4|UNDER|UNION|UNIQUE|UNPLUG|UNSIGNED|UNTRUSTED|UPDATE|USE|USING|VALIST|VALUE|VALUES|VARIABLE|VARIANCE|VARRAY|VARYING|VIEW|VIEWS|VOID|WHEN|WHERE|WHILE|WITH|WORK|WRAPPED|WRITE|YEAR|ZONE)\\b/i,\n    operator: /:=?|=>|[<>^~!]=|\\.\\.|\\|\\||\\*\\*|[-+*/%<>=@]/\n}), Prism.languages.insertBefore(\"plsql\", \"operator\", {\n    label: {\n        pattern: /<<\\s*\\w+\\s*>>/,\n        alias: \"symbol\"\n    }\n});\nPrism.languages.powerquery = {\n    comment: {\n        pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n        lookbehind: !0,\n        greedy: !0\n    },\n    \"quoted-identifier\": {\n        pattern: /#\"(?:[^\"\\r\\n]|\"\")*\"(?!\")/,\n        greedy: !0\n    },\n    string: {\n        pattern: /(?:#!)?\"(?:[^\"\\r\\n]|\"\")*\"(?!\")/,\n        greedy: !0\n    },\n    constant: [\n        /\\bDay\\.(?:Friday|Monday|Saturday|Sunday|Thursday|Tuesday|Wednesday)\\b/,\n        /\\bTraceLevel\\.(?:Critical|Error|Information|Verbose|Warning)\\b/,\n        /\\bOccurrence\\.(?:All|First|Last)\\b/,\n        /\\bOrder\\.(?:Ascending|Descending)\\b/,\n        /\\bRoundingMode\\.(?:AwayFromZero|Down|ToEven|TowardZero|Up)\\b/,\n        /\\bMissingField\\.(?:Error|Ignore|UseNull)\\b/,\n        /\\bQuoteStyle\\.(?:Csv|None)\\b/,\n        /\\bJoinKind\\.(?:FullOuter|Inner|LeftAnti|LeftOuter|RightAnti|RightOuter)\\b/,\n        /\\bGroupKind\\.(?:Global|Local)\\b/,\n        /\\bExtraValues\\.(?:Error|Ignore|List)\\b/,\n        /\\bJoinAlgorithm\\.(?:Dynamic|LeftHash|LeftIndex|PairwiseHash|RightHash|RightIndex|SortMerge)\\b/,\n        /\\bJoinSide\\.(?:Left|Right)\\b/,\n        /\\bPrecision\\.(?:Decimal|Double)\\b/,\n        /\\bRelativePosition\\.From(?:End|Start)\\b/,\n        /\\bTextEncoding\\.(?:Ascii|BigEndianUnicode|Unicode|Utf16|Utf8|Windows)\\b/,\n        /\\b(?:Any|Binary|Date|DateTime|DateTimeZone|Duration|Function|Int16|Int32|Int64|Int8|List|Logical|None|Number|Record|Table|Text|Time)\\.Type\\b/,\n        /\\bnull\\b/\n    ],\n    boolean: /\\b(?:false|true)\\b/,\n    keyword: /\\b(?:and|as|each|else|error|if|in|is|let|meta|not|nullable|optional|or|otherwise|section|shared|then|try|type)\\b|#(?:binary|date|datetime|datetimezone|duration|infinity|nan|sections|shared|table|time)\\b/,\n    function: {\n        pattern: /(^|[^#\\w.])[a-z_][\\w.]*(?=\\s*\\()/i,\n        lookbehind: !0\n    },\n    \"data-type\": {\n        pattern: /\\b(?:any|anynonnull|binary|date|datetime|datetimezone|duration|function|list|logical|none|number|record|table|text|time)\\b/,\n        alias: \"class-name\"\n    },\n    number: {\n        pattern: /\\b0x[\\da-f]+\\b|(?:[+-]?(?:\\b\\d+\\.)?\\b\\d+|[+-]\\.\\d+|(^|[^.])\\B\\.\\d+)(?:e[+-]?\\d+)?\\b/i,\n        lookbehind: !0\n    },\n    operator: /[-+*\\/&?@^]|<(?:=>?|>)?|>=?|=>?|\\.\\.\\.?/,\n    punctuation: /[,;\\[\\](){}]/\n}, Prism.languages.pq = Prism.languages.powerquery, Prism.languages.mscript = Prism.languages.powerquery;\n!function(e) {\n    var i = e.languages.powershell = {\n        comment: [\n            {\n                pattern: /(^|[^`])<#[\\s\\S]*?#>/,\n                lookbehind: !0\n            },\n            {\n                pattern: /(^|[^`])#.*/,\n                lookbehind: !0\n            }\n        ],\n        string: [\n            {\n                pattern: /\"(?:`[\\s\\S]|[^`\"])*\"/,\n                greedy: !0,\n                inside: null\n            },\n            {\n                pattern: /'(?:[^']|'')*'/,\n                greedy: !0\n            }\n        ],\n        namespace: /\\[[a-z](?:\\[(?:\\[[^\\]]*\\]|[^\\[\\]])*\\]|[^\\[\\]])*\\]/i,\n        boolean: /\\$(?:false|true)\\b/i,\n        variable: /\\$\\w+\\b/,\n        function: [\n            /\\b(?:Add|Approve|Assert|Backup|Block|Checkpoint|Clear|Close|Compare|Complete|Compress|Confirm|Connect|Convert|ConvertFrom|ConvertTo|Copy|Debug|Deny|Disable|Disconnect|Dismount|Edit|Enable|Enter|Exit|Expand|Export|Find|ForEach|Format|Get|Grant|Group|Hide|Import|Initialize|Install|Invoke|Join|Limit|Lock|Measure|Merge|Move|New|Open|Optimize|Out|Ping|Pop|Protect|Publish|Push|Read|Receive|Redo|Register|Remove|Rename|Repair|Request|Reset|Resize|Resolve|Restart|Restore|Resume|Revoke|Save|Search|Select|Send|Set|Show|Skip|Sort|Split|Start|Step|Stop|Submit|Suspend|Switch|Sync|Tee|Test|Trace|Unblock|Undo|Uninstall|Unlock|Unprotect|Unpublish|Unregister|Update|Use|Wait|Watch|Where|Write)-[a-z]+\\b/i,\n            /\\b(?:ac|cat|chdir|clc|cli|clp|clv|compare|copy|cp|cpi|cpp|cvpa|dbp|del|diff|dir|ebp|echo|epal|epcsv|epsn|erase|fc|fl|ft|fw|gal|gbp|gc|gci|gcs|gdr|gi|gl|gm|gp|gps|group|gsv|gu|gv|gwmi|iex|ii|ipal|ipcsv|ipsn|irm|iwmi|iwr|kill|lp|ls|measure|mi|mount|move|mp|mv|nal|ndr|ni|nv|ogv|popd|ps|pushd|pwd|rbp|rd|rdr|ren|ri|rm|rmdir|rni|rnp|rp|rv|rvpa|rwmi|sal|saps|sasv|sbp|sc|select|set|shcm|si|sl|sleep|sls|sort|sp|spps|spsv|start|sv|swmi|tee|trcm|type|write)\\b/i\n        ],\n        keyword: /\\b(?:Begin|Break|Catch|Class|Continue|Data|Define|Do|DynamicParam|Else|ElseIf|End|Exit|Filter|Finally|For|ForEach|From|Function|If|InlineScript|Parallel|Param|Process|Return|Sequence|Switch|Throw|Trap|Try|Until|Using|Var|While|Workflow)\\b/i,\n        operator: {\n            pattern: /(^|\\W)(?:!|-(?:b?(?:and|x?or)|as|(?:Not)?(?:Contains|In|Like|Match)|eq|ge|gt|is(?:Not)?|Join|le|lt|ne|not|Replace|sh[lr])\\b|-[-=]?|\\+[+=]?|[*\\/%]=?)/i,\n            lookbehind: !0\n        },\n        punctuation: /[|{}[\\];(),.]/\n    };\n    i.string[0].inside = {\n        function: {\n            pattern: /(^|[^`])\\$\\((?:\\$\\([^\\r\\n()]*\\)|(?!\\$\\()[^\\r\\n)])*\\)/,\n            lookbehind: !0,\n            inside: i\n        },\n        boolean: i.boolean,\n        variable: i.variable\n    };\n}(Prism);\nPrism.languages.processing = Prism.languages.extend(\"clike\", {\n    keyword: /\\b(?:break|case|catch|class|continue|default|else|extends|final|for|if|implements|import|new|null|private|public|return|static|super|switch|this|try|void|while)\\b/,\n    function: /\\b\\w+(?=\\s*\\()/,\n    operator: /<[<=]?|>[>=]?|&&?|\\|\\|?|[%?]|[!=+\\-*\\/]=?/\n}), Prism.languages.insertBefore(\"processing\", \"number\", {\n    constant: /\\b(?!XML\\b)[A-Z][A-Z\\d_]+\\b/,\n    type: {\n        pattern: /\\b(?:boolean|byte|char|color|double|float|int|[A-Z]\\w*)\\b/,\n        alias: \"class-name\"\n    }\n});\nPrism.languages.prolog = {\n    comment: {\n        pattern: /\\/\\*[\\s\\S]*?\\*\\/|%.*/,\n        greedy: !0\n    },\n    string: {\n        pattern: /([\"'])(?:\\1\\1|\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1(?!\\1)/,\n        greedy: !0\n    },\n    builtin: /\\b(?:fx|fy|xf[xy]?|yfx?)\\b/,\n    function: /\\b[a-z]\\w*(?:(?=\\()|\\/\\d+)/,\n    number: /\\b\\d+(?:\\.\\d*)?/,\n    operator: /[:\\\\=><\\-?*@\\/;+^|!$.]+|\\b(?:is|mod|not|xor)\\b/,\n    punctuation: /[(){}\\[\\],]/\n};\n!function(t) {\n    var n = [\n        \"on\",\n        \"ignoring\",\n        \"group_right\",\n        \"group_left\",\n        \"by\",\n        \"without\"\n    ], a = [\n        \"sum\",\n        \"min\",\n        \"max\",\n        \"avg\",\n        \"group\",\n        \"stddev\",\n        \"stdvar\",\n        \"count\",\n        \"count_values\",\n        \"bottomk\",\n        \"topk\",\n        \"quantile\"\n    ].concat(n, [\n        \"offset\"\n    ]);\n    t.languages.promql = {\n        comment: {\n            pattern: /(^[ \\t]*)#.*/m,\n            lookbehind: !0\n        },\n        \"vector-match\": {\n            pattern: new RegExp(\"((?:\" + n.join(\"|\") + \")\\\\s*)\\\\([^)]*\\\\)\"),\n            lookbehind: !0,\n            inside: {\n                \"label-key\": {\n                    pattern: /\\b[^,]+\\b/,\n                    alias: \"attr-name\"\n                },\n                punctuation: /[(),]/\n            }\n        },\n        \"context-labels\": {\n            pattern: /\\{[^{}]*\\}/,\n            inside: {\n                \"label-key\": {\n                    pattern: /\\b[a-z_]\\w*(?=\\s*(?:=|![=~]))/,\n                    alias: \"attr-name\"\n                },\n                \"label-value\": {\n                    pattern: /([\"'`])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/,\n                    greedy: !0,\n                    alias: \"attr-value\"\n                },\n                punctuation: /\\{|\\}|=~?|![=~]|,/\n            }\n        },\n        \"context-range\": [\n            {\n                pattern: /\\[[\\w\\s:]+\\]/,\n                inside: {\n                    punctuation: /\\[|\\]|:/,\n                    \"range-duration\": {\n                        pattern: /\\b(?:\\d+(?:[smhdwy]|ms))+\\b/i,\n                        alias: \"number\"\n                    }\n                }\n            },\n            {\n                pattern: /(\\boffset\\s+)\\w+/,\n                lookbehind: !0,\n                inside: {\n                    \"range-duration\": {\n                        pattern: /\\b(?:\\d+(?:[smhdwy]|ms))+\\b/i,\n                        alias: \"number\"\n                    }\n                }\n            }\n        ],\n        keyword: new RegExp(\"\\\\b(?:\" + a.join(\"|\") + \")\\\\b\", \"i\"),\n        function: /\\b[a-z_]\\w*(?=\\s*\\()/i,\n        number: /[-+]?(?:(?:\\b\\d+(?:\\.\\d+)?|\\B\\.\\d+)(?:e[-+]?\\d+)?\\b|\\b(?:0x[0-9a-f]+|nan|inf)\\b)/i,\n        operator: /[\\^*/%+-]|==|!=|<=|<|>=|>|\\b(?:and|or|unless)\\b/i,\n        punctuation: /[{};()`,.[\\]]/\n    };\n}(Prism);\nPrism.languages.properties = {\n    comment: /^[ \\t]*[#!].*$/m,\n    value: {\n        pattern: /(^[ \\t]*(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\s:=])+(?: *[=:] *(?! )| ))(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n])+/m,\n        lookbehind: !0,\n        alias: \"attr-value\"\n    },\n    key: {\n        pattern: /^[ \\t]*(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\s:=])+(?= *[=:]| )/m,\n        alias: \"attr-name\"\n    },\n    punctuation: /[=:]/\n};\n!function(e) {\n    var s = /\\b(?:bool|bytes|double|s?fixed(?:32|64)|float|[su]?int(?:32|64)|string)\\b/;\n    e.languages.protobuf = e.languages.extend(\"clike\", {\n        \"class-name\": [\n            {\n                pattern: /(\\b(?:enum|extend|message|service)\\s+)[A-Za-z_]\\w*(?=\\s*\\{)/,\n                lookbehind: !0\n            },\n            {\n                pattern: /(\\b(?:rpc\\s+\\w+|returns)\\s*\\(\\s*(?:stream\\s+)?)\\.?[A-Za-z_]\\w*(?:\\.[A-Za-z_]\\w*)*(?=\\s*\\))/,\n                lookbehind: !0\n            }\n        ],\n        keyword: /\\b(?:enum|extend|extensions|import|message|oneof|option|optional|package|public|repeated|required|reserved|returns|rpc(?=\\s+\\w)|service|stream|syntax|to)\\b(?!\\s*=\\s*\\d)/,\n        function: /\\b[a-z_]\\w*(?=\\s*\\()/i\n    }), e.languages.insertBefore(\"protobuf\", \"operator\", {\n        map: {\n            pattern: /\\bmap<\\s*[\\w.]+\\s*,\\s*[\\w.]+\\s*>(?=\\s+[a-z_]\\w*\\s*[=;])/i,\n            alias: \"class-name\",\n            inside: {\n                punctuation: /[<>.,]/,\n                builtin: s\n            }\n        },\n        builtin: s,\n        \"positional-class-name\": {\n            pattern: /(?:\\b|\\B\\.)[a-z_]\\w*(?:\\.[a-z_]\\w*)*(?=\\s+[a-z_]\\w*\\s*[=;])/i,\n            alias: \"class-name\",\n            inside: {\n                punctuation: /\\./\n            }\n        },\n        annotation: {\n            pattern: /(\\[\\s*)[a-z_]\\w*(?=\\s*=)/i,\n            lookbehind: !0\n        }\n    });\n}(Prism);\n!function(e) {\n    e.languages.pug = {\n        comment: {\n            pattern: /(^([\\t ]*))\\/\\/.*(?:(?:\\r?\\n|\\r)\\2[\\t ].+)*/m,\n            lookbehind: !0\n        },\n        \"multiline-script\": {\n            pattern: /(^([\\t ]*)script\\b.*\\.[\\t ]*)(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ].+|\\s*?(?=\\r?\\n|\\r)))+/m,\n            lookbehind: !0,\n            inside: e.languages.javascript\n        },\n        filter: {\n            pattern: /(^([\\t ]*)):.+(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ].+|\\s*?(?=\\r?\\n|\\r)))+/m,\n            lookbehind: !0,\n            inside: {\n                \"filter-name\": {\n                    pattern: /^:[\\w-]+/,\n                    alias: \"variable\"\n                },\n                text: /\\S[\\s\\S]*/\n            }\n        },\n        \"multiline-plain-text\": {\n            pattern: /(^([\\t ]*)[\\w\\-#.]+\\.[\\t ]*)(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ].+|\\s*?(?=\\r?\\n|\\r)))+/m,\n            lookbehind: !0\n        },\n        markup: {\n            pattern: /(^[\\t ]*)<.+/m,\n            lookbehind: !0,\n            inside: e.languages.markup\n        },\n        doctype: {\n            pattern: /((?:^|\\n)[\\t ]*)doctype(?: .+)?/,\n            lookbehind: !0\n        },\n        \"flow-control\": {\n            pattern: /(^[\\t ]*)(?:case|default|each|else|if|unless|when|while)\\b(?: .+)?/m,\n            lookbehind: !0,\n            inside: {\n                each: {\n                    pattern: /^each .+? in\\b/,\n                    inside: {\n                        keyword: /\\b(?:each|in)\\b/,\n                        punctuation: /,/\n                    }\n                },\n                branch: {\n                    pattern: /^(?:case|default|else|if|unless|when|while)\\b/,\n                    alias: \"keyword\"\n                },\n                rest: e.languages.javascript\n            }\n        },\n        keyword: {\n            pattern: /(^[\\t ]*)(?:append|block|extends|include|prepend)\\b.+/m,\n            lookbehind: !0\n        },\n        mixin: [\n            {\n                pattern: /(^[\\t ]*)mixin .+/m,\n                lookbehind: !0,\n                inside: {\n                    keyword: /^mixin/,\n                    function: /\\w+(?=\\s*\\(|\\s*$)/,\n                    punctuation: /[(),.]/\n                }\n            },\n            {\n                pattern: /(^[\\t ]*)\\+.+/m,\n                lookbehind: !0,\n                inside: {\n                    name: {\n                        pattern: /^\\+\\w+/,\n                        alias: \"function\"\n                    },\n                    rest: e.languages.javascript\n                }\n            }\n        ],\n        script: {\n            pattern: /(^[\\t ]*script(?:(?:&[^(]+)?\\([^)]+\\))*[\\t ]).+/m,\n            lookbehind: !0,\n            inside: e.languages.javascript\n        },\n        \"plain-text\": {\n            pattern: /(^[\\t ]*(?!-)[\\w\\-#.]*[\\w\\-](?:(?:&[^(]+)?\\([^)]+\\))*\\/?[\\t ]).+/m,\n            lookbehind: !0\n        },\n        tag: {\n            pattern: /(^[\\t ]*)(?!-)[\\w\\-#.]*[\\w\\-](?:(?:&[^(]+)?\\([^)]+\\))*\\/?:?/m,\n            lookbehind: !0,\n            inside: {\n                attributes: [\n                    {\n                        pattern: /&[^(]+\\([^)]+\\)/,\n                        inside: e.languages.javascript\n                    },\n                    {\n                        pattern: /\\([^)]+\\)/,\n                        inside: {\n                            \"attr-value\": {\n                                pattern: /(=\\s*(?!\\s))(?:\\{[^}]*\\}|[^,)\\r\\n]+)/,\n                                lookbehind: !0,\n                                inside: e.languages.javascript\n                            },\n                            \"attr-name\": /[\\w-]+(?=\\s*!?=|\\s*[,)])/,\n                            punctuation: /[!=(),]+/\n                        }\n                    }\n                ],\n                punctuation: /:/,\n                \"attr-id\": /#[\\w\\-]+/,\n                \"attr-class\": /\\.[\\w\\-]+/\n            }\n        },\n        code: [\n            {\n                pattern: /(^[\\t ]*(?:-|!?=)).+/m,\n                lookbehind: !0,\n                inside: e.languages.javascript\n            }\n        ],\n        punctuation: /[.\\-!=|]+/\n    };\n    for(var t = [\n        {\n            filter: \"atpl\",\n            language: \"twig\"\n        },\n        {\n            filter: \"coffee\",\n            language: \"coffeescript\"\n        },\n        \"ejs\",\n        \"handlebars\",\n        \"less\",\n        \"livescript\",\n        \"markdown\",\n        {\n            filter: \"sass\",\n            language: \"scss\"\n        },\n        \"stylus\"\n    ], n = {}, a = 0, i = t.length; a < i; a++){\n        var r = t[a];\n        r = \"string\" == typeof r ? {\n            filter: r,\n            language: r\n        } : r, e.languages[r.language] && (n[\"filter-\" + r.filter] = {\n            pattern: RegExp(\"(^([\t ]*)):<filter_name>(?:(?:\\r?\\n|\\r(?!\\n))(?:\\\\2[\t ].+|\\\\s*?(?=\\r?\\n|\\r)))+\".replace(\"<filter_name>\", function() {\n                return r.filter;\n            }), \"m\"),\n            lookbehind: !0,\n            inside: {\n                \"filter-name\": {\n                    pattern: /^:[\\w-]+/,\n                    alias: \"variable\"\n                },\n                text: {\n                    pattern: /\\S[\\s\\S]*/,\n                    alias: [\n                        r.language,\n                        \"language-\" + r.language\n                    ],\n                    inside: e.languages[r.language]\n                }\n            }\n        });\n    }\n    e.languages.insertBefore(\"pug\", \"filter\", n);\n}(Prism);\n!function(e) {\n    e.languages.puppet = {\n        heredoc: [\n            {\n                pattern: /(@\\(\"([^\"\\r\\n\\/):]+)\"(?:\\/[nrts$uL]*)?\\).*(?:\\r?\\n|\\r))(?:.*(?:\\r?\\n|\\r(?!\\n)))*?[ \\t]*(?:\\|[ \\t]*)?(?:-[ \\t]*)?\\2/,\n                lookbehind: !0,\n                alias: \"string\",\n                inside: {\n                    punctuation: /(?=\\S).*\\S(?= *$)/\n                }\n            },\n            {\n                pattern: /(@\\(([^\"\\r\\n\\/):]+)(?:\\/[nrts$uL]*)?\\).*(?:\\r?\\n|\\r))(?:.*(?:\\r?\\n|\\r(?!\\n)))*?[ \\t]*(?:\\|[ \\t]*)?(?:-[ \\t]*)?\\2/,\n                lookbehind: !0,\n                greedy: !0,\n                alias: \"string\",\n                inside: {\n                    punctuation: /(?=\\S).*\\S(?= *$)/\n                }\n            },\n            {\n                pattern: /@\\(\"?(?:[^\"\\r\\n\\/):]+)\"?(?:\\/[nrts$uL]*)?\\)/,\n                alias: \"string\",\n                inside: {\n                    punctuation: {\n                        pattern: /(\\().+?(?=\\))/,\n                        lookbehind: !0\n                    }\n                }\n            }\n        ],\n        \"multiline-comment\": {\n            pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,\n            lookbehind: !0,\n            greedy: !0,\n            alias: \"comment\"\n        },\n        regex: {\n            pattern: /((?:\\bnode\\s+|[~=\\(\\[\\{,]\\s*|[=+]>\\s*|^\\s*))\\/(?:[^\\/\\\\]|\\\\[\\s\\S])+\\/(?:[imx]+\\b|\\B)/,\n            lookbehind: !0,\n            greedy: !0,\n            inside: {\n                \"extended-regex\": {\n                    pattern: /^\\/(?:[^\\/\\\\]|\\\\[\\s\\S])+\\/[im]*x[im]*$/,\n                    inside: {\n                        comment: /#.*/\n                    }\n                }\n            }\n        },\n        comment: {\n            pattern: /(^|[^\\\\])#.*/,\n            lookbehind: !0,\n            greedy: !0\n        },\n        string: {\n            pattern: /([\"'])(?:\\$\\{(?:[^'\"}]|([\"'])(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2)+\\}|\\$(?!\\{)|(?!\\1)[^\\\\$]|\\\\[\\s\\S])*\\1/,\n            greedy: !0,\n            inside: {\n                \"double-quoted\": {\n                    pattern: /^\"[\\s\\S]*\"$/,\n                    inside: {}\n                }\n            }\n        },\n        variable: {\n            pattern: /\\$(?:::)?\\w+(?:::\\w+)*/,\n            inside: {\n                punctuation: /::/\n            }\n        },\n        \"attr-name\": /(?:\\b\\w+|\\*)(?=\\s*=>)/,\n        function: [\n            {\n                pattern: /(\\.)(?!\\d)\\w+/,\n                lookbehind: !0\n            },\n            /\\b(?:contain|debug|err|fail|include|info|notice|realize|require|tag|warning)\\b|\\b(?!\\d)\\w+(?=\\()/\n        ],\n        number: /\\b(?:0x[a-f\\d]+|\\d+(?:\\.\\d+)?(?:e-?\\d+)?)\\b/i,\n        boolean: /\\b(?:false|true)\\b/,\n        keyword: /\\b(?:application|attr|case|class|consumes|default|define|else|elsif|function|if|import|inherits|node|private|produces|type|undef|unless)\\b/,\n        datatype: {\n            pattern: /\\b(?:Any|Array|Boolean|Callable|Catalogentry|Class|Collection|Data|Default|Enum|Float|Hash|Integer|NotUndef|Numeric|Optional|Pattern|Regexp|Resource|Runtime|Scalar|String|Struct|Tuple|Type|Undef|Variant)\\b/,\n            alias: \"symbol\"\n        },\n        operator: /=[=~>]?|![=~]?|<(?:<\\|?|[=~|-])?|>[>=]?|->?|~>|\\|>?>?|[*\\/%+?]|\\b(?:and|in|or)\\b/,\n        punctuation: /[\\[\\]{}().,;]|:+/\n    };\n    var n = [\n        {\n            pattern: /(^|[^\\\\])\\$\\{(?:[^'\"{}]|\\{[^}]*\\}|([\"'])(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2)+\\}/,\n            lookbehind: !0,\n            inside: {\n                \"short-variable\": {\n                    pattern: /(^\\$\\{)(?!\\w+\\()(?:::)?\\w+(?:::\\w+)*/,\n                    lookbehind: !0,\n                    alias: \"variable\",\n                    inside: {\n                        punctuation: /::/\n                    }\n                },\n                delimiter: {\n                    pattern: /^\\$/,\n                    alias: \"variable\"\n                },\n                rest: e.languages.puppet\n            }\n        },\n        {\n            pattern: /(^|[^\\\\])\\$(?:::)?\\w+(?:::\\w+)*/,\n            lookbehind: !0,\n            alias: \"variable\",\n            inside: {\n                punctuation: /::/\n            }\n        }\n    ];\n    e.languages.puppet.heredoc[0].inside.interpolation = n, e.languages.puppet.string.inside[\"double-quoted\"].inside.interpolation = n;\n}(Prism);\n!function(e) {\n    e.languages.pure = {\n        comment: [\n            {\n                pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,\n                lookbehind: !0\n            },\n            {\n                pattern: /(^|[^\\\\:])\\/\\/.*/,\n                lookbehind: !0\n            },\n            /#!.+/\n        ],\n        \"inline-lang\": {\n            pattern: /%<[\\s\\S]+?%>/,\n            greedy: !0,\n            inside: {\n                lang: {\n                    pattern: /(^%< *)-\\*-.+?-\\*-/,\n                    lookbehind: !0,\n                    alias: \"comment\"\n                },\n                delimiter: {\n                    pattern: /^%<.*|%>$/,\n                    alias: \"punctuation\"\n                }\n            }\n        },\n        string: {\n            pattern: /\"(?:\\\\.|[^\"\\\\\\r\\n])*\"/,\n            greedy: !0\n        },\n        number: {\n            pattern: /((?:\\.\\.)?)(?:\\b(?:inf|nan)\\b|\\b0x[\\da-f]+|(?:\\b(?:0b)?\\d+(?:\\.\\d+)?|\\B\\.\\d+)(?:e[+-]?\\d+)?L?)/i,\n            lookbehind: !0\n        },\n        keyword: /\\b(?:NULL|ans|break|bt|case|catch|cd|clear|const|def|del|dump|else|end|exit|extern|false|force|help|if|infix[lr]?|interface|let|ls|mem|namespace|nonfix|of|otherwise|outfix|override|postfix|prefix|private|public|pwd|quit|run|save|show|stats|then|throw|trace|true|type|underride|using|when|with)\\b/,\n        function: /\\b(?:abs|add_(?:addr|constdef|(?:fundef|interface|macdef|typedef)(?:_at)?|vardef)|all|any|applp?|arity|bigintp?|blob(?:_crc|_size|p)?|boolp?|byte_c?string(?:_pointer)?|byte_(?:matrix|pointer)|calloc|cat|catmap|ceil|char[ps]?|check_ptrtag|chr|clear_sentry|clearsym|closurep?|cmatrixp?|cols?|colcat(?:map)?|colmap|colrev|colvector(?:p|seq)?|complex(?:_float_(?:matrix|pointer)|_matrix(?:_view)?|_pointer|p)?|conj|cookedp?|cst|cstring(?:_(?:dup|list|vector))?|curry3?|cyclen?|del_(?:constdef|fundef|interface|macdef|typedef|vardef)|delete|diag(?:mat)?|dim|dmatrixp?|do|double(?:_matrix(?:_view)?|_pointer|p)?|dowith3?|drop|dropwhile|eval(?:cmd)?|exactp|filter|fix|fixity|flip|float(?:_matrix|_pointer)|floor|fold[lr]1?|frac|free|funp?|functionp?|gcd|get(?:_(?:byte|constdef|double|float|fundef|int(?:64)?|interface(?:_typedef)?|long|macdef|pointer|ptrtag|sentry|short|string|typedef|vardef))?|globsym|hash|head|id|im|imatrixp?|index|inexactp|infp|init|insert|int(?:_matrix(?:_view)?|_pointer|p)?|int64_(?:matrix|pointer)|integerp?|iteraten?|iterwhile|join|keys?|lambdap?|last(?:err(?:pos)?)?|lcd|list[2p]?|listmap|make_ptrtag|malloc|map|matcat|matrixp?|max|member|min|nanp|nargs|nmatrixp?|null|numberp?|ord|pack(?:ed)?|pointer(?:_cast|_tag|_type|p)?|pow|pred|ptrtag|put(?:_(?:byte|double|float|int(?:64)?|long|pointer|short|string))?|rationalp?|re|realp?|realloc|recordp?|redim|reduce(?:_with)?|refp?|repeatn?|reverse|rlistp?|round|rows?|rowcat(?:map)?|rowmap|rowrev|rowvector(?:p|seq)?|same|scan[lr]1?|sentry|sgn|short_(?:matrix|pointer)|slice|smatrixp?|sort|split|str|strcat|stream|stride|string(?:_(?:dup|list|vector)|p)?|subdiag(?:mat)?|submat|subseq2?|substr|succ|supdiag(?:mat)?|symbolp?|tail|take|takewhile|thunkp?|transpose|trunc|tuplep?|typep|ubyte|uint(?:64)?|ulong|uncurry3?|unref|unzip3?|update|ushort|vals?|varp?|vector(?:p|seq)?|void|zip3?|zipwith3?)\\b/,\n        special: {\n            pattern: /\\b__[a-z]+__\\b/i,\n            alias: \"builtin\"\n        },\n        operator: /(?:[!\"#$%&'*+,\\-.\\/:<=>?@\\\\^`|~\\u00a1-\\u00bf\\u00d7-\\u00f7\\u20d0-\\u2bff]|\\b_+\\b)+|\\b(?:and|div|mod|not|or)\\b/,\n        punctuation: /[(){}\\[\\];,|]/\n    }, [\n        \"c\",\n        {\n            lang: \"c++\",\n            alias: \"cpp\"\n        },\n        \"fortran\"\n    ].forEach(function(t) {\n        var a = t;\n        if (\"string\" != typeof t && (a = t.alias, t = t.lang), e.languages[a]) {\n            var r = {};\n            r[\"inline-lang-\" + a] = {\n                pattern: RegExp(\"%< *-\\\\*- *<lang>\\\\d* *-\\\\*-[^]+?%>\".replace(\"<lang>\", t.replace(/([.+*?\\/\\\\(){}\\[\\]])/g, \"\\\\$1\")), \"i\"),\n                inside: e.util.clone(e.languages.pure[\"inline-lang\"].inside)\n            }, r[\"inline-lang-\" + a].inside.rest = e.util.clone(e.languages[a]), e.languages.insertBefore(\"pure\", \"inline-lang\", r);\n        }\n    }), e.languages.c && (e.languages.pure[\"inline-lang\"].inside.rest = e.util.clone(e.languages.c));\n}(Prism);\nPrism.languages.purebasic = Prism.languages.extend(\"clike\", {\n    comment: /;.*/,\n    keyword: /\\b(?:align|and|as|break|calldebugger|case|compilercase|compilerdefault|compilerelse|compilerelseif|compilerendif|compilerendselect|compilererror|compilerif|compilerselect|continue|data|datasection|debug|debuglevel|declare|declarec|declarecdll|declaredll|declaremodule|default|define|dim|disableasm|disabledebugger|disableexplicit|else|elseif|enableasm|enabledebugger|enableexplicit|end|enddatasection|enddeclaremodule|endenumeration|endif|endimport|endinterface|endmacro|endmodule|endprocedure|endselect|endstructure|endstructureunion|endwith|enumeration|extends|fakereturn|for|foreach|forever|global|gosub|goto|if|import|importc|includebinary|includefile|includepath|interface|macro|module|newlist|newmap|next|not|or|procedure|procedurec|procedurecdll|proceduredll|procedurereturn|protected|prototype|prototypec|read|redim|repeat|restore|return|runtime|select|shared|static|step|structure|structureunion|swap|threaded|to|until|wend|while|with|xincludefile|xor)\\b/i,\n    function: /\\b\\w+(?:\\.\\w+)?\\s*(?=\\()/,\n    number: /(?:\\$[\\da-f]+|\\b-?(?:\\d+(?:\\.\\d+)?|\\.\\d+)(?:e[+-]?\\d+)?)\\b/i,\n    operator: /(?:@\\*?|\\?|\\*)\\w+\\$?|-[>-]?|\\+\\+?|!=?|<<?=?|>>?=?|==?|&&?|\\|?\\||[~^%?*/@]/\n}), Prism.languages.insertBefore(\"purebasic\", \"keyword\", {\n    tag: /#\\w+\\$?/,\n    asm: {\n        pattern: /(^[\\t ]*)!.*/m,\n        lookbehind: !0,\n        alias: \"tag\",\n        inside: {\n            comment: /;.*/,\n            string: {\n                pattern: /([\"'`])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n                greedy: !0\n            },\n            \"label-reference-anonymous\": {\n                pattern: /(!\\s*j[a-z]+\\s+)@[fb]/i,\n                lookbehind: !0,\n                alias: \"fasm-label\"\n            },\n            \"label-reference-addressed\": {\n                pattern: /(!\\s*j[a-z]+\\s+)[A-Z._?$@][\\w.?$@~#]*/i,\n                lookbehind: !0,\n                alias: \"fasm-label\"\n            },\n            keyword: [\n                /\\b(?:extern|global)\\b[^;\\r\\n]*/i,\n                /\\b(?:CPU|DEFAULT|FLOAT)\\b.*/\n            ],\n            function: {\n                pattern: /^([\\t ]*!\\s*)[\\da-z]+(?=\\s|$)/im,\n                lookbehind: !0\n            },\n            \"function-inline\": {\n                pattern: /(:\\s*)[\\da-z]+(?=\\s)/i,\n                lookbehind: !0,\n                alias: \"function\"\n            },\n            label: {\n                pattern: /^([\\t ]*!\\s*)[A-Za-z._?$@][\\w.?$@~#]*(?=:)/m,\n                lookbehind: !0,\n                alias: \"fasm-label\"\n            },\n            register: /\\b(?:st\\d|[xyz]mm\\d\\d?|[cdt]r\\d|r\\d\\d?[bwd]?|[er]?[abcd]x|[abcd][hl]|[er]?(?:bp|di|si|sp)|[cdefgs]s|mm\\d+)\\b/i,\n            number: /(?:\\b|-|(?=\\$))(?:0[hx](?:[\\da-f]*\\.)?[\\da-f]+(?:p[+-]?\\d+)?|\\d[\\da-f]+[hx]|\\$\\d[\\da-f]*|0[oq][0-7]+|[0-7]+[oq]|0[by][01]+|[01]+[by]|0[dt]\\d+|(?:\\d+(?:\\.\\d+)?|\\.\\d+)(?:\\.?e[+-]?\\d+)?[dt]?)\\b/i,\n            operator: /[\\[\\]*+\\-/%<>=&|$!,.:]/\n        }\n    }\n}), delete Prism.languages.purebasic[\"class-name\"], delete Prism.languages.purebasic.boolean, Prism.languages.pbfasm = Prism.languages.purebasic;\nPrism.languages.purescript = Prism.languages.extend(\"haskell\", {\n    keyword: /\\b(?:ado|case|class|data|derive|do|else|forall|if|in|infixl|infixr|instance|let|module|newtype|of|primitive|then|type|where)\\b|∀/,\n    \"import-statement\": {\n        pattern: /(^[\\t ]*)import\\s+[A-Z][\\w']*(?:\\.[A-Z][\\w']*)*(?:\\s+as\\s+[A-Z][\\w']*(?:\\.[A-Z][\\w']*)*)?(?:\\s+hiding\\b)?/m,\n        lookbehind: !0,\n        inside: {\n            keyword: /\\b(?:as|hiding|import)\\b/,\n            punctuation: /\\./\n        }\n    },\n    builtin: /\\b(?:absurd|add|ap|append|apply|between|bind|bottom|clamp|compare|comparing|compose|conj|const|degree|discard|disj|div|eq|flap|flip|gcd|identity|ifM|join|lcm|liftA1|liftM1|map|max|mempty|min|mod|mul|negate|not|notEq|one|otherwise|recip|show|sub|top|unit|unless|unlessM|void|when|whenM|zero)\\b/,\n    operator: [\n        Prism.languages.haskell.operator[0],\n        Prism.languages.haskell.operator[2],\n        /[\\xa2-\\xa6\\xa8\\xa9\\xac\\xae-\\xb1\\xb4\\xb8\\xd7\\xf7\\u02c2-\\u02c5\\u02d2-\\u02df\\u02e5-\\u02eb\\u02ed\\u02ef-\\u02ff\\u0375\\u0384\\u0385\\u03f6\\u0482\\u058d-\\u058f\\u0606-\\u0608\\u060b\\u060e\\u060f\\u06de\\u06e9\\u06fd\\u06fe\\u07f6\\u07fe\\u07ff\\u09f2\\u09f3\\u09fa\\u09fb\\u0af1\\u0b70\\u0bf3-\\u0bfa\\u0c7f\\u0d4f\\u0d79\\u0e3f\\u0f01-\\u0f03\\u0f13\\u0f15-\\u0f17\\u0f1a-\\u0f1f\\u0f34\\u0f36\\u0f38\\u0fbe-\\u0fc5\\u0fc7-\\u0fcc\\u0fce\\u0fcf\\u0fd5-\\u0fd8\\u109e\\u109f\\u1390-\\u1399\\u166d\\u17db\\u1940\\u19de-\\u19ff\\u1b61-\\u1b6a\\u1b74-\\u1b7c\\u1fbd\\u1fbf-\\u1fc1\\u1fcd-\\u1fcf\\u1fdd-\\u1fdf\\u1fed-\\u1fef\\u1ffd\\u1ffe\\u2044\\u2052\\u207a-\\u207c\\u208a-\\u208c\\u20a0-\\u20bf\\u2100\\u2101\\u2103-\\u2106\\u2108\\u2109\\u2114\\u2116-\\u2118\\u211e-\\u2123\\u2125\\u2127\\u2129\\u212e\\u213a\\u213b\\u2140-\\u2144\\u214a-\\u214d\\u214f\\u218a\\u218b\\u2190-\\u2307\\u230c-\\u2328\\u232b-\\u2426\\u2440-\\u244a\\u249c-\\u24e9\\u2500-\\u2767\\u2794-\\u27c4\\u27c7-\\u27e5\\u27f0-\\u2982\\u2999-\\u29d7\\u29dc-\\u29fb\\u29fe-\\u2b73\\u2b76-\\u2b95\\u2b97-\\u2bff\\u2ce5-\\u2cea\\u2e50\\u2e51\\u2e80-\\u2e99\\u2e9b-\\u2ef3\\u2f00-\\u2fd5\\u2ff0-\\u2ffb\\u3004\\u3012\\u3013\\u3020\\u3036\\u3037\\u303e\\u303f\\u309b\\u309c\\u3190\\u3191\\u3196-\\u319f\\u31c0-\\u31e3\\u3200-\\u321e\\u322a-\\u3247\\u3250\\u3260-\\u327f\\u328a-\\u32b0\\u32c0-\\u33ff\\u4dc0-\\u4dff\\ua490-\\ua4c6\\ua700-\\ua716\\ua720\\ua721\\ua789\\ua78a\\ua828-\\ua82b\\ua836-\\ua839\\uaa77-\\uaa79\\uab5b\\uab6a\\uab6b\\ufb29\\ufbb2-\\ufbc1\\ufdfc\\ufdfd\\ufe62\\ufe64-\\ufe66\\ufe69\\uff04\\uff0b\\uff1c-\\uff1e\\uff3e\\uff40\\uff5c\\uff5e\\uffe0-\\uffe6\\uffe8-\\uffee\\ufffc\\ufffd]/\n    ]\n}), Prism.languages.purs = Prism.languages.purescript;\nPrism.languages.python = {\n    comment: {\n        pattern: /(^|[^\\\\])#.*/,\n        lookbehind: !0,\n        greedy: !0\n    },\n    \"string-interpolation\": {\n        pattern: /(?:f|fr|rf)(?:(\"\"\"|''')[\\s\\S]*?\\1|(\"|')(?:\\\\.|(?!\\2)[^\\\\\\r\\n])*\\2)/i,\n        greedy: !0,\n        inside: {\n            interpolation: {\n                pattern: /((?:^|[^{])(?:\\{\\{)*)\\{(?!\\{)(?:[^{}]|\\{(?!\\{)(?:[^{}]|\\{(?!\\{)(?:[^{}])+\\})+\\})+\\}/,\n                lookbehind: !0,\n                inside: {\n                    \"format-spec\": {\n                        pattern: /(:)[^:(){}]+(?=\\}$)/,\n                        lookbehind: !0\n                    },\n                    \"conversion-option\": {\n                        pattern: /![sra](?=[:}]$)/,\n                        alias: \"punctuation\"\n                    },\n                    rest: null\n                }\n            },\n            string: /[\\s\\S]+/\n        }\n    },\n    \"triple-quoted-string\": {\n        pattern: /(?:[rub]|br|rb)?(\"\"\"|''')[\\s\\S]*?\\1/i,\n        greedy: !0,\n        alias: \"string\"\n    },\n    string: {\n        pattern: /(?:[rub]|br|rb)?(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/i,\n        greedy: !0\n    },\n    function: {\n        pattern: /((?:^|\\s)def[ \\t]+)[a-zA-Z_]\\w*(?=\\s*\\()/g,\n        lookbehind: !0\n    },\n    \"class-name\": {\n        pattern: /(\\bclass\\s+)\\w+/i,\n        lookbehind: !0\n    },\n    decorator: {\n        pattern: /(^[\\t ]*)@\\w+(?:\\.\\w+)*/m,\n        lookbehind: !0,\n        alias: [\n            \"annotation\",\n            \"punctuation\"\n        ],\n        inside: {\n            punctuation: /\\./\n        }\n    },\n    keyword: /\\b(?:_(?=\\s*:)|and|as|assert|async|await|break|case|class|continue|def|del|elif|else|except|exec|finally|for|from|global|if|import|in|is|lambda|match|nonlocal|not|or|pass|print|raise|return|try|while|with|yield)\\b/,\n    builtin: /\\b(?:__import__|abs|all|any|apply|ascii|basestring|bin|bool|buffer|bytearray|bytes|callable|chr|classmethod|cmp|coerce|compile|complex|delattr|dict|dir|divmod|enumerate|eval|execfile|file|filter|float|format|frozenset|getattr|globals|hasattr|hash|help|hex|id|input|int|intern|isinstance|issubclass|iter|len|list|locals|long|map|max|memoryview|min|next|object|oct|open|ord|pow|property|range|raw_input|reduce|reload|repr|reversed|round|set|setattr|slice|sorted|staticmethod|str|sum|super|tuple|type|unichr|unicode|vars|xrange|zip)\\b/,\n    boolean: /\\b(?:False|None|True)\\b/,\n    number: /\\b0(?:b(?:_?[01])+|o(?:_?[0-7])+|x(?:_?[a-f0-9])+)\\b|(?:\\b\\d+(?:_\\d+)*(?:\\.(?:\\d+(?:_\\d+)*)?)?|\\B\\.\\d+(?:_\\d+)*)(?:e[+-]?\\d+(?:_\\d+)*)?j?(?!\\w)/i,\n    operator: /[-+%=]=?|!=|:=|\\*\\*?=?|\\/\\/?=?|<[<=>]?|>[=>]?|[&|^~]/,\n    punctuation: /[{}[\\];(),.:]/\n}, Prism.languages.python[\"string-interpolation\"].inside.interpolation.inside.rest = Prism.languages.python, Prism.languages.py = Prism.languages.python;\n!function(e) {\n    function n(e, n) {\n        return e.replace(/<<(\\d+)>>/g, function(e, r) {\n            return \"(?:\" + n[+r] + \")\";\n        });\n    }\n    function r(e, r, a) {\n        return RegExp(n(e, r), a || \"\");\n    }\n    var a = RegExp(\"\\\\b(?:\" + \"Adj BigInt Bool Ctl Double false Int One Pauli PauliI PauliX PauliY PauliZ Qubit Range Result String true Unit Zero Adjoint adjoint apply as auto body borrow borrowing Controlled controlled distribute elif else fail fixup for function if in internal intrinsic invert is let mutable namespace new newtype open operation repeat return self set until use using while within\".trim().replace(/ /g, \"|\") + \")\\\\b\"), t = n(\"<<0>>(?:\\\\s*\\\\.\\\\s*<<0>>)*\", [\n        \"\\\\b[A-Za-z_]\\\\w*\\\\b\"\n    ]), i = {\n        keyword: a,\n        punctuation: /[<>()?,.:[\\]]/\n    }, s = '\"(?:\\\\\\\\.|[^\\\\\\\\\"])*\"';\n    e.languages.qsharp = e.languages.extend(\"clike\", {\n        comment: /\\/\\/.*/,\n        string: [\n            {\n                pattern: r(\"(^|[^$\\\\\\\\])<<0>>\", [\n                    s\n                ]),\n                lookbehind: !0,\n                greedy: !0\n            }\n        ],\n        \"class-name\": [\n            {\n                pattern: r(\"(\\\\b(?:as|open)\\\\s+)<<0>>(?=\\\\s*(?:;|as\\\\b))\", [\n                    t\n                ]),\n                lookbehind: !0,\n                inside: i\n            },\n            {\n                pattern: r(\"(\\\\bnamespace\\\\s+)<<0>>(?=\\\\s*\\\\{)\", [\n                    t\n                ]),\n                lookbehind: !0,\n                inside: i\n            }\n        ],\n        keyword: a,\n        number: /(?:\\b0(?:x[\\da-f]+|b[01]+|o[0-7]+)|(?:\\B\\.\\d+|\\b\\d+(?:\\.\\d*)?)(?:e[-+]?\\d+)?)l?\\b/i,\n        operator: /\\band=|\\bor=|\\band\\b|\\bnot\\b|\\bor\\b|<[-=]|[-=]>|>>>=?|<<<=?|\\^\\^\\^=?|\\|\\|\\|=?|&&&=?|w\\/=?|~~~|[*\\/+\\-^=!%]=?/,\n        punctuation: /::|[{}[\\];(),.:]/\n    }), e.languages.insertBefore(\"qsharp\", \"number\", {\n        range: {\n            pattern: /\\.\\./,\n            alias: \"operator\"\n        }\n    });\n    var o = function(e, n) {\n        for(var r = 0; r < 2; r++)e = e.replace(/<<self>>/g, function() {\n            return \"(?:\" + e + \")\";\n        });\n        return e.replace(/<<self>>/g, \"[^\\\\s\\\\S]\");\n    }(n('\\\\{(?:[^\"{}]|<<0>>|<<self>>)*\\\\}', [\n        s\n    ]));\n    e.languages.insertBefore(\"qsharp\", \"string\", {\n        \"interpolation-string\": {\n            pattern: r('\\\\$\"(?:\\\\\\\\.|<<0>>|[^\\\\\\\\\"{])*\"', [\n                o\n            ]),\n            greedy: !0,\n            inside: {\n                interpolation: {\n                    pattern: r(\"((?:^|[^\\\\\\\\])(?:\\\\\\\\\\\\\\\\)*)<<0>>\", [\n                        o\n                    ]),\n                    lookbehind: !0,\n                    inside: {\n                        punctuation: /^\\{|\\}$/,\n                        expression: {\n                            pattern: /[\\s\\S]+/,\n                            alias: \"language-qsharp\",\n                            inside: e.languages.qsharp\n                        }\n                    }\n                },\n                string: /[\\s\\S]+/\n            }\n        }\n    });\n}(Prism), Prism.languages.qs = Prism.languages.qsharp;\nPrism.languages.q = {\n    string: /\"(?:\\\\.|[^\"\\\\\\r\\n])*\"/,\n    comment: [\n        {\n            pattern: /([\\t )\\]}])\\/.*/,\n            lookbehind: !0,\n            greedy: !0\n        },\n        {\n            pattern: /(^|\\r?\\n|\\r)\\/[\\t ]*(?:(?:\\r?\\n|\\r)(?:.*(?:\\r?\\n|\\r(?!\\n)))*?(?:\\\\(?=[\\t ]*(?:\\r?\\n|\\r))|$)|\\S.*)/,\n            lookbehind: !0,\n            greedy: !0\n        },\n        {\n            pattern: /^\\\\[\\t ]*(?:\\r?\\n|\\r)[\\s\\S]+/m,\n            greedy: !0\n        },\n        {\n            pattern: /^#!.+/m,\n            greedy: !0\n        }\n    ],\n    symbol: /`(?::\\S+|[\\w.]*)/,\n    datetime: {\n        pattern: /0N[mdzuvt]|0W[dtz]|\\d{4}\\.\\d\\d(?:m|\\.\\d\\d(?:T(?:\\d\\d(?::\\d\\d(?::\\d\\d(?:[.:]\\d\\d\\d)?)?)?)?)?[dz]?)|\\d\\d:\\d\\d(?::\\d\\d(?:[.:]\\d\\d\\d)?)?[uvt]?/,\n        alias: \"number\"\n    },\n    number: /\\b(?![01]:)(?:0N[hje]?|0W[hj]?|0[wn]|0x[\\da-fA-F]+|\\d+(?:\\.\\d*)?(?:e[+-]?\\d+)?[hjfeb]?)/,\n    keyword: /\\\\\\w+\\b|\\b(?:abs|acos|aj0?|all|and|any|asc|asin|asof|atan|attr|avgs?|binr?|by|ceiling|cols|cor|cos|count|cov|cross|csv|cut|delete|deltas|desc|dev|differ|distinct|div|do|dsave|ej|enlist|eval|except|exec|exit|exp|fby|fills|first|fkeys|flip|floor|from|get|getenv|group|gtime|hclose|hcount|hdel|hopen|hsym|iasc|identity|idesc|if|ij|in|insert|inter|inv|keys?|last|like|list|ljf?|load|log|lower|lsq|ltime|ltrim|mavg|maxs?|mcount|md5|mdev|med|meta|mins?|mmax|mmin|mmu|mod|msum|neg|next|not|null|or|over|parse|peach|pj|plist|prds?|prev|prior|rand|rank|ratios|raze|read0|read1|reciprocal|reval|reverse|rload|rotate|rsave|rtrim|save|scan|scov|sdev|select|set|setenv|show|signum|sin|sqrt|ssr?|string|sublist|sums?|sv|svar|system|tables|tan|til|trim|txf|type|uj|ungroup|union|update|upper|upsert|value|var|views?|vs|wavg|where|while|within|wj1?|wsum|ww|xasc|xbar|xcols?|xdesc|xexp|xgroup|xkey|xlog|xprev|xrank)\\b/,\n    adverb: {\n        pattern: /['\\/\\\\]:?|\\beach\\b/,\n        alias: \"function\"\n    },\n    verb: {\n        pattern: /(?:\\B\\.\\B|\\b[01]:|<[=>]?|>=?|[:+\\-*%,!?~=|$&#@^]):?|\\b_\\b:?/,\n        alias: \"operator\"\n    },\n    punctuation: /[(){}\\[\\];.]/\n};\n!function(e) {\n    for(var r = \"(?:[^\\\\\\\\()[\\\\]{}\\\"'/]|<string>|/(?![*/])|<comment>|\\\\(<expr>*\\\\)|\\\\[<expr>*\\\\]|\\\\{<expr>*\\\\}|\\\\\\\\[^])\".replace(/<string>/g, function() {\n        return \"\\\"(?:\\\\\\\\.|[^\\\\\\\\\\\"\\r\\n])*\\\"|'(?:\\\\\\\\.|[^\\\\\\\\'\\r\\n])*'\";\n    }).replace(/<comment>/g, function() {\n        return \"//.*(?!.)|/\\\\*(?:[^*]|\\\\*(?!/))*\\\\*/\";\n    }), t = 0; t < 2; t++)r = r.replace(/<expr>/g, function() {\n        return r;\n    });\n    r = r.replace(/<expr>/g, \"[^\\\\s\\\\S]\"), e.languages.qml = {\n        comment: {\n            pattern: /\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\//,\n            greedy: !0\n        },\n        \"javascript-function\": {\n            pattern: RegExp(\"((?:^|;)[ \t]*)function\\\\s+(?!\\\\s)[_$a-zA-Z\\\\xA0-\\\\uFFFF](?:(?!\\\\s)[$\\\\w\\\\xA0-\\\\uFFFF])*\\\\s*\\\\(<js>*\\\\)\\\\s*\\\\{<js>*\\\\}\".replace(/<js>/g, function() {\n                return r;\n            }), \"m\"),\n            lookbehind: !0,\n            greedy: !0,\n            alias: \"language-javascript\",\n            inside: e.languages.javascript\n        },\n        \"class-name\": {\n            pattern: /((?:^|[:;])[ \\t]*)(?!\\d)\\w+(?=[ \\t]*\\{|[ \\t]+on\\b)/m,\n            lookbehind: !0\n        },\n        property: [\n            {\n                pattern: /((?:^|[;{])[ \\t]*)(?!\\d)\\w+(?:\\.\\w+)*(?=[ \\t]*:)/m,\n                lookbehind: !0\n            },\n            {\n                pattern: /((?:^|[;{])[ \\t]*)property[ \\t]+(?!\\d)\\w+(?:\\.\\w+)*[ \\t]+(?!\\d)\\w+(?:\\.\\w+)*(?=[ \\t]*:)/m,\n                lookbehind: !0,\n                inside: {\n                    keyword: /^property/,\n                    property: /\\w+(?:\\.\\w+)*/\n                }\n            }\n        ],\n        \"javascript-expression\": {\n            pattern: RegExp(\"(:[ \t]*)(?![\\\\s;}[])(?:(?!$|[;}])<js>)+\".replace(/<js>/g, function() {\n                return r;\n            }), \"m\"),\n            lookbehind: !0,\n            greedy: !0,\n            alias: \"language-javascript\",\n            inside: e.languages.javascript\n        },\n        string: {\n            pattern: /\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/,\n            greedy: !0\n        },\n        keyword: /\\b(?:as|import|on)\\b/,\n        punctuation: /[{}[\\]:;,]/\n    };\n}(Prism);\nPrism.languages.qore = Prism.languages.extend(\"clike\", {\n    comment: {\n        pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|(?:\\/\\/|#).*)/,\n        lookbehind: !0\n    },\n    string: {\n        pattern: /(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/,\n        greedy: !0\n    },\n    keyword: /\\b(?:abstract|any|assert|binary|bool|boolean|break|byte|case|catch|char|class|code|const|continue|data|default|do|double|else|enum|extends|final|finally|float|for|goto|hash|if|implements|import|inherits|instanceof|int|interface|long|my|native|new|nothing|null|object|our|own|private|reference|rethrow|return|short|soft(?:bool|date|float|int|list|number|string)|static|strictfp|string|sub|super|switch|synchronized|this|throw|throws|transient|try|void|volatile|while)\\b/,\n    boolean: /\\b(?:false|true)\\b/i,\n    function: /\\$?\\b(?!\\d)\\w+(?=\\()/,\n    number: /\\b(?:0b[01]+|0x(?:[\\da-f]*\\.)?[\\da-fp\\-]+|(?:\\d+(?:\\.\\d+)?|\\.\\d+)(?:e\\d+)?[df]|(?:\\d+(?:\\.\\d+)?|\\.\\d+))\\b/i,\n    operator: {\n        pattern: /(^|[^.])(?:\\+[+=]?|-[-=]?|[!=](?:==?|~)?|>>?=?|<(?:=>?|<=?)?|&[&=]?|\\|[|=]?|[*\\/%^]=?|[~?])/,\n        lookbehind: !0\n    },\n    variable: /\\$(?!\\d)\\w+\\b/\n});\nPrism.languages.r = {\n    comment: /#.*/,\n    string: {\n        pattern: /(['\"])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n        greedy: !0\n    },\n    \"percent-operator\": {\n        pattern: /%[^%\\s]*%/,\n        alias: \"operator\"\n    },\n    boolean: /\\b(?:FALSE|TRUE)\\b/,\n    ellipsis: /\\.\\.(?:\\.|\\d+)/,\n    number: [\n        /\\b(?:Inf|NaN)\\b/,\n        /(?:\\b0x[\\dA-Fa-f]+(?:\\.\\d*)?|\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[EePp][+-]?\\d+)?[iL]?/\n    ],\n    keyword: /\\b(?:NA|NA_character_|NA_complex_|NA_integer_|NA_real_|NULL|break|else|for|function|if|in|next|repeat|while)\\b/,\n    operator: /->?>?|<(?:=|<?-)?|[>=!]=?|::?|&&?|\\|\\|?|[+*\\/^$@~]/,\n    punctuation: /[(){}\\[\\],;]/\n};\nPrism.languages.racket = Prism.languages.extend(\"scheme\", {\n    \"lambda-parameter\": {\n        pattern: /([(\\[]lambda\\s+[(\\[])[^()\\[\\]'\\s]+/,\n        lookbehind: !0\n    }\n}), Prism.languages.insertBefore(\"racket\", \"string\", {\n    lang: {\n        pattern: /^#lang.+/m,\n        greedy: !0,\n        alias: \"keyword\"\n    }\n}), Prism.languages.rkt = Prism.languages.racket;\n!function(e) {\n    function s(e, s) {\n        for(var a = 0; a < s; a++)e = e.replace(/<self>/g, function() {\n            return \"(?:\" + e + \")\";\n        });\n        return e.replace(/<self>/g, \"[^\\\\s\\\\S]\").replace(/<str>/g, '(?:@(?!\")|\"(?:[^\\r\\n\\\\\\\\\"]|\\\\\\\\.)*\"|@\"(?:[^\\\\\\\\\"]|\"\"|\\\\\\\\[^])*\"(?!\")|\\'(?:(?:[^\\r\\n\\'\\\\\\\\]|\\\\\\\\.|\\\\\\\\[Uux][\\\\da-fA-F]{1,8})\\'|(?=[^\\\\\\\\](?!\\'))))').replace(/<comment>/g, \"(?:/(?![/*])|//.*[\\r\\n]|/\\\\*[^*]*(?:\\\\*(?!/)[^*]*)*\\\\*/)\");\n    }\n    var a = s(\"\\\\((?:[^()'\\\"@/]|<str>|<comment>|<self>)*\\\\)\", 2), t = s(\"\\\\[(?:[^\\\\[\\\\]'\\\"@/]|<str>|<comment>|<self>)*\\\\]\", 1), r = s(\"\\\\{(?:[^{}'\\\"@/]|<str>|<comment>|<self>)*\\\\}\", 2), n = \"@(?:await\\\\b\\\\s*)?(?:(?!await\\\\b)\\\\w+\\\\b|\" + a + \")(?:[?!]?\\\\.\\\\w+\\\\b|(?:\" + s(\"<(?:[^<>'\\\"@/]|<comment>|<self>)*>\", 1) + \")?\" + a + \"|\" + t + \")*(?![?!\\\\.(\\\\[]|<(?!/))\", l = \"(?:\\\"[^\\\"@]*\\\"|'[^'@]*'|[^\\\\s'\\\"@>=]+(?=[\\\\s>])|[\\\"'][^\\\"'@]*(?:(?:@(?![\\\\w()])|\" + n + \")[^\\\"'@]*)+[\\\"'])\", i = \"(?:\\\\s(?:\\\\s*[^\\\\s>/=]+(?:\\\\s*=\\\\s*<tagAttrValue>|(?=[\\\\s/>])))+)?\".replace(/<tagAttrValue>/, l), g = \"(?!\\\\d)[^\\\\s>/=$<%]+\" + i + \"\\\\s*/?>\", o = \"\\\\B@?(?:<([a-zA-Z][\\\\w:]*)\" + i + \"\\\\s*>(?:[^<]|</?(?!\\\\1\\\\b)\" + g + \"|\" + s(\"<\\\\1\" + i + \"\\\\s*>(?:[^<]|</?(?!\\\\1\\\\b)\" + g + \"|<self>)*</\\\\1\\\\s*>\", 2) + \")*</\\\\1\\\\s*>|<\" + g + \")\";\n    e.languages.cshtml = e.languages.extend(\"markup\", {});\n    var c = {\n        pattern: /\\S[\\s\\S]*/,\n        alias: \"language-csharp\",\n        inside: e.languages.insertBefore(\"csharp\", \"string\", {\n            html: {\n                pattern: RegExp(o),\n                greedy: !0,\n                inside: e.languages.cshtml\n            }\n        }, {\n            csharp: e.languages.extend(\"csharp\", {})\n        })\n    }, p = {\n        pattern: RegExp(\"(^|[^@])\" + n),\n        lookbehind: !0,\n        greedy: !0,\n        alias: \"variable\",\n        inside: {\n            keyword: /^@/,\n            csharp: c\n        }\n    };\n    e.languages.cshtml.tag.pattern = RegExp(\"</?\" + g), e.languages.cshtml.tag.inside[\"attr-value\"].pattern = RegExp(\"=\\\\s*\" + l), e.languages.insertBefore(\"inside\", \"punctuation\", {\n        value: p\n    }, e.languages.cshtml.tag.inside[\"attr-value\"]), e.languages.insertBefore(\"cshtml\", \"prolog\", {\n        \"razor-comment\": {\n            pattern: /@\\*[\\s\\S]*?\\*@/,\n            greedy: !0,\n            alias: \"comment\"\n        },\n        block: {\n            pattern: RegExp(\"(^|[^@])@(?:\" + [\n                r,\n                \"(?:code|functions)\\\\s*\" + r,\n                \"(?:for|foreach|lock|switch|using|while)\\\\s*\" + a + \"\\\\s*\" + r,\n                \"do\\\\s*\" + r + \"\\\\s*while\\\\s*\" + a + \"(?:\\\\s*;)?\",\n                \"try\\\\s*\" + r + \"\\\\s*catch\\\\s*\" + a + \"\\\\s*\" + r + \"\\\\s*finally\\\\s*\" + r,\n                \"if\\\\s*\" + a + \"\\\\s*\" + r + \"(?:\\\\s*else(?:\\\\s+if\\\\s*\" + a + \")?\\\\s*\" + r + \")*\",\n                \"helper\\\\s+\\\\w+\\\\s*\" + a + \"\\\\s*\" + r\n            ].join(\"|\") + \")\"),\n            lookbehind: !0,\n            greedy: !0,\n            inside: {\n                keyword: /^@\\w*/,\n                csharp: c\n            }\n        },\n        directive: {\n            pattern: /^([ \\t]*)@(?:addTagHelper|attribute|implements|inherits|inject|layout|model|namespace|page|preservewhitespace|removeTagHelper|section|tagHelperPrefix|using)(?=\\s).*/m,\n            lookbehind: !0,\n            greedy: !0,\n            inside: {\n                keyword: /^@\\w+/,\n                csharp: c\n            }\n        },\n        value: p,\n        \"delegate-operator\": {\n            pattern: /(^|[^@])@(?=<)/,\n            lookbehind: !0,\n            alias: \"operator\"\n        }\n    }), e.languages.razor = e.languages.cshtml;\n}(Prism);\n!function(t) {\n    var n = t.util.clone(t.languages.javascript), e = \"(?:\\\\{<S>*\\\\.{3}(?:[^{}]|<BRACES>)*\\\\})\";\n    function a(t, n) {\n        return t = t.replace(/<S>/g, function() {\n            return \"(?:\\\\s|//.*(?!.)|/\\\\*(?:[^*]|\\\\*(?!/))\\\\*/)\";\n        }).replace(/<BRACES>/g, function() {\n            return \"(?:\\\\{(?:\\\\{(?:\\\\{[^{}]*\\\\}|[^{}])*\\\\}|[^{}])*\\\\})\";\n        }).replace(/<SPREAD>/g, function() {\n            return e;\n        }), RegExp(t, n);\n    }\n    e = a(e).source, t.languages.jsx = t.languages.extend(\"markup\", n), t.languages.jsx.tag.pattern = a(\"</?(?:[\\\\w.:-]+(?:<S>+(?:[\\\\w.:$-]+(?:=(?:\\\"(?:\\\\\\\\[^]|[^\\\\\\\\\\\"])*\\\"|'(?:\\\\\\\\[^]|[^\\\\\\\\'])*'|[^\\\\s{'\\\"/>=]+|<BRACES>))?|<SPREAD>))*<S>*/?)?>\"), t.languages.jsx.tag.inside.tag.pattern = /^<\\/?[^\\s>\\/]*/, t.languages.jsx.tag.inside[\"attr-value\"].pattern = /=(?!\\{)(?:\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|'(?:\\\\[\\s\\S]|[^\\\\'])*'|[^\\s'\">]+)/, t.languages.jsx.tag.inside.tag.inside[\"class-name\"] = /^[A-Z]\\w*(?:\\.[A-Z]\\w*)*$/, t.languages.jsx.tag.inside.comment = n.comment, t.languages.insertBefore(\"inside\", \"attr-name\", {\n        spread: {\n            pattern: a(\"<SPREAD>\"),\n            inside: t.languages.jsx\n        }\n    }, t.languages.jsx.tag), t.languages.insertBefore(\"inside\", \"special-attr\", {\n        script: {\n            pattern: a(\"=<BRACES>\"),\n            alias: \"language-javascript\",\n            inside: {\n                \"script-punctuation\": {\n                    pattern: /^=(?=\\{)/,\n                    alias: \"punctuation\"\n                },\n                rest: t.languages.jsx\n            }\n        }\n    }, t.languages.jsx.tag);\n    var s = function(t) {\n        return t ? \"string\" == typeof t ? t : \"string\" == typeof t.content ? t.content : t.content.map(s).join(\"\") : \"\";\n    }, g = function(n) {\n        for(var e = [], a = 0; a < n.length; a++){\n            var o = n[a], i = !1;\n            if (\"string\" != typeof o && (\"tag\" === o.type && o.content[0] && \"tag\" === o.content[0].type ? \"</\" === o.content[0].content[0].content ? e.length > 0 && e[e.length - 1].tagName === s(o.content[0].content[1]) && e.pop() : \"/>\" === o.content[o.content.length - 1].content || e.push({\n                tagName: s(o.content[0].content[1]),\n                openedBraces: 0\n            }) : e.length > 0 && \"punctuation\" === o.type && \"{\" === o.content ? e[e.length - 1].openedBraces++ : e.length > 0 && e[e.length - 1].openedBraces > 0 && \"punctuation\" === o.type && \"}\" === o.content ? e[e.length - 1].openedBraces-- : i = !0), (i || \"string\" == typeof o) && e.length > 0 && 0 === e[e.length - 1].openedBraces) {\n                var r = s(o);\n                a < n.length - 1 && (\"string\" == typeof n[a + 1] || \"plain-text\" === n[a + 1].type) && (r += s(n[a + 1]), n.splice(a + 1, 1)), a > 0 && (\"string\" == typeof n[a - 1] || \"plain-text\" === n[a - 1].type) && (r = s(n[a - 1]) + r, n.splice(a - 1, 1), a--), n[a] = new t.Token(\"plain-text\", r, null, r);\n            }\n            o.content && \"string\" != typeof o.content && g(o.content);\n        }\n    };\n    t.hooks.add(\"after-tokenize\", function(t) {\n        \"jsx\" !== t.language && \"tsx\" !== t.language || g(t.tokens);\n    });\n}(Prism);\n!function(e) {\n    var a = e.util.clone(e.languages.typescript);\n    e.languages.tsx = e.languages.extend(\"jsx\", a), delete e.languages.tsx.parameter, delete e.languages.tsx[\"literal-property\"];\n    var t = e.languages.tsx.tag;\n    t.pattern = RegExp(\"(^|[^\\\\w$]|(?=</))(?:\" + t.pattern.source + \")\", t.pattern.flags), t.lookbehind = !0;\n}(Prism);\nPrism.languages.reason = Prism.languages.extend(\"clike\", {\n    string: {\n        pattern: /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n\"])*\"/,\n        greedy: !0\n    },\n    \"class-name\": /\\b[A-Z]\\w*/,\n    keyword: /\\b(?:and|as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|method|module|mutable|new|nonrec|object|of|open|or|private|rec|sig|struct|switch|then|to|try|type|val|virtual|when|while|with)\\b/,\n    operator: /\\.{3}|:[:=]|\\|>|->|=(?:==?|>)?|<=?|>=?|[|^?'#!~`]|[+\\-*\\/]\\.?|\\b(?:asr|land|lor|lsl|lsr|lxor|mod)\\b/\n}), Prism.languages.insertBefore(\"reason\", \"class-name\", {\n    char: {\n        pattern: /'(?:\\\\x[\\da-f]{2}|\\\\o[0-3][0-7][0-7]|\\\\\\d{3}|\\\\.|[^'\\\\\\r\\n])'/,\n        greedy: !0\n    },\n    constructor: /\\b[A-Z]\\w*\\b(?!\\s*\\.)/,\n    label: {\n        pattern: /\\b[a-z]\\w*(?=::)/,\n        alias: \"symbol\"\n    }\n}), delete Prism.languages.reason.function;\n!function(a) {\n    var e = {\n        pattern: /\\\\[\\\\(){}[\\]^$+*?|.]/,\n        alias: \"escape\"\n    }, n = /\\\\(?:x[\\da-fA-F]{2}|u[\\da-fA-F]{4}|u\\{[\\da-fA-F]+\\}|0[0-7]{0,2}|[123][0-7]{2}|c[a-zA-Z]|.)/, t = \"(?:[^\\\\\\\\-]|\" + n.source + \")\", s = RegExp(t + \"-\" + t), i = {\n        pattern: /(<|')[^<>']+(?=[>']$)/,\n        lookbehind: !0,\n        alias: \"variable\"\n    };\n    a.languages.regex = {\n        \"char-class\": {\n            pattern: /((?:^|[^\\\\])(?:\\\\\\\\)*)\\[(?:[^\\\\\\]]|\\\\[\\s\\S])*\\]/,\n            lookbehind: !0,\n            inside: {\n                \"char-class-negation\": {\n                    pattern: /(^\\[)\\^/,\n                    lookbehind: !0,\n                    alias: \"operator\"\n                },\n                \"char-class-punctuation\": {\n                    pattern: /^\\[|\\]$/,\n                    alias: \"punctuation\"\n                },\n                range: {\n                    pattern: s,\n                    inside: {\n                        escape: n,\n                        \"range-punctuation\": {\n                            pattern: /-/,\n                            alias: \"operator\"\n                        }\n                    }\n                },\n                \"special-escape\": e,\n                \"char-set\": {\n                    pattern: /\\\\[wsd]|\\\\p\\{[^{}]+\\}/i,\n                    alias: \"class-name\"\n                },\n                escape: n\n            }\n        },\n        \"special-escape\": e,\n        \"char-set\": {\n            pattern: /\\.|\\\\[wsd]|\\\\p\\{[^{}]+\\}/i,\n            alias: \"class-name\"\n        },\n        backreference: [\n            {\n                pattern: /\\\\(?![123][0-7]{2})[1-9]/,\n                alias: \"keyword\"\n            },\n            {\n                pattern: /\\\\k<[^<>']+>/,\n                alias: \"keyword\",\n                inside: {\n                    \"group-name\": i\n                }\n            }\n        ],\n        anchor: {\n            pattern: /[$^]|\\\\[ABbGZz]/,\n            alias: \"function\"\n        },\n        escape: n,\n        group: [\n            {\n                pattern: /\\((?:\\?(?:<[^<>']+>|'[^<>']+'|[>:]|<?[=!]|[idmnsuxU]+(?:-[idmnsuxU]+)?:?))?/,\n                alias: \"punctuation\",\n                inside: {\n                    \"group-name\": i\n                }\n            },\n            {\n                pattern: /\\)/,\n                alias: \"punctuation\"\n            }\n        ],\n        quantifier: {\n            pattern: /(?:[+*?]|\\{\\d+(?:,\\d*)?\\})[?+]?/,\n            alias: \"number\"\n        },\n        alternation: {\n            pattern: /\\|/,\n            alias: \"keyword\"\n        }\n    };\n}(Prism);\nPrism.languages.rego = {\n    comment: /#.*/,\n    property: {\n        pattern: /(^|[^\\\\.])(?:\"(?:\\\\.|[^\\\\\"\\r\\n])*\"|`[^`]*`|\\b[a-z_]\\w*\\b)(?=\\s*:(?!=))/i,\n        lookbehind: !0,\n        greedy: !0\n    },\n    string: {\n        pattern: /(^|[^\\\\])\"(?:\\\\.|[^\\\\\"\\r\\n])*\"|`[^`]*`/,\n        lookbehind: !0,\n        greedy: !0\n    },\n    keyword: /\\b(?:as|default|else|import|not|null|package|set(?=\\s*\\()|some|with)\\b/,\n    boolean: /\\b(?:false|true)\\b/,\n    function: {\n        pattern: /\\b[a-z_]\\w*\\b(?:\\s*\\.\\s*\\b[a-z_]\\w*\\b)*(?=\\s*\\()/i,\n        inside: {\n            namespace: /\\b\\w+\\b(?=\\s*\\.)/,\n            punctuation: /\\./\n        }\n    },\n    number: /-?\\b\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?\\b/i,\n    operator: /[-+*/%|&]|[<>:=]=?|!=|\\b_\\b/,\n    punctuation: /[,;.\\[\\]{}()]/\n};\nPrism.languages.renpy = {\n    comment: {\n        pattern: /(^|[^\\\\])#.+/,\n        lookbehind: !0\n    },\n    string: {\n        pattern: /(\"\"\"|''')[\\s\\S]+?\\1|(\"|')(?:\\\\.|(?!\\2)[^\\\\])*\\2|(?:^#?(?:(?:[0-9a-fA-F]){3}|[0-9a-fA-F]{6})$)/m,\n        greedy: !0\n    },\n    function: /\\b[a-z_]\\w*(?=\\()/i,\n    property: /\\b(?:Update|UpdateVersion|action|activate_sound|adv_nvl_transition|after_load_transition|align|alpha|alt|anchor|antialias|area|auto|background|bar_invert|bar_resizing|bar_vertical|black_color|bold|bottom_bar|bottom_gutter|bottom_margin|bottom_padding|box_reverse|box_wrap|can_update|caret|child|color|crop|default_afm_enable|default_afm_time|default_fullscreen|default_text_cps|developer|directory_name|drag_handle|drag_joined|drag_name|drag_raise|draggable|dragged|drop_shadow|drop_shadow_color|droppable|dropped|easein|easeout|edgescroll|end_game_transition|end_splash_transition|enter_replay_transition|enter_sound|enter_transition|enter_yesno_transition|executable_name|exit_replay_transition|exit_sound|exit_transition|exit_yesno_transition|fadein|fadeout|first_indent|first_spacing|fit_first|focus|focus_mask|font|foreground|game_main_transition|get_installed_packages|google_play_key|google_play_salt|ground|has_music|has_sound|has_voice|height|help|hinting|hover|hover_background|hover_color|hover_sound|hovered|hyperlink_functions|idle|idle_color|image_style|include_update|insensitive|insensitive_background|insensitive_color|inside|intra_transition|italic|justify|kerning|keyboard_focus|language|layer_clipping|layers|layout|left_bar|left_gutter|left_margin|left_padding|length|line_leading|line_overlap_split|line_spacing|linear|main_game_transition|main_menu_music|maximum|min_width|minimum|minwidth|modal|mouse|mousewheel|name|narrator_menu|newline_indent|nvl_adv_transition|offset|order_reverse|outlines|overlay_functions|pos|position|prefix|radius|range|rest_indent|right_bar|right_gutter|right_margin|right_padding|rotate|rotate_pad|ruby_style|sample_sound|save_directory|say_attribute_transition|screen_height|screen_width|scrollbars|selected_hover|selected_hover_color|selected_idle|selected_idle_color|selected_insensitive|show_side_image|show_two_window|side_spacing|side_xpos|side_ypos|size|size_group|slow_cps|slow_cps_multiplier|spacing|strikethrough|subpixel|text_align|text_style|text_xpos|text_y_fudge|text_ypos|thumb|thumb_offset|thumb_shadow|thumbnail_height|thumbnail_width|time|top_bar|top_gutter|top_margin|top_padding|translations|underline|unscrollable|update|value|version|version_name|version_tuple|vertical|width|window_hide_transition|window_icon|window_left_padding|window_show_transition|window_title|windows_icon|xadjustment|xalign|xanchor|xanchoraround|xaround|xcenter|xfill|xinitial|xmargin|xmaximum|xminimum|xoffset|xofsset|xpadding|xpos|xsize|xzoom|yadjustment|yalign|yanchor|yanchoraround|yaround|ycenter|yfill|yinitial|ymargin|ymaximum|yminimum|yoffset|ypadding|ypos|ysize|ysizexysize|yzoom|zoom|zorder)\\b/,\n    tag: /\\b(?:bar|block|button|buttoscreenn|drag|draggroup|fixed|frame|grid|[hv]box|hotbar|hotspot|image|imagebutton|imagemap|input|key|label|menu|mm_menu_frame|mousearea|nvl|parallel|screen|self|side|tag|text|textbutton|timer|vbar|viewport|window)\\b|\\$/,\n    keyword: /\\b(?:None|add|adjustment|alignaround|allow|angle|animation|around|as|assert|behind|box_layout|break|build|cache|call|center|changed|child_size|choice|circles|class|clear|clicked|clipping|clockwise|config|contains|continue|corner1|corner2|counterclockwise|def|default|define|del|delay|disabled|disabled_text|dissolve|elif|else|event|except|exclude|exec|expression|fade|finally|for|from|function|global|gm_root|has|hide|id|if|import|in|init|is|jump|knot|lambda|left|less_rounded|mm_root|movie|music|null|on|onlayer|pass|pause|persistent|play|print|python|queue|raise|random|renpy|repeat|return|right|rounded_window|scene|scope|set|show|slow|slow_abortable|slow_done|sound|stop|store|style|style_group|substitute|suffix|theme|transform|transform_anchor|transpose|try|ui|unhovered|updater|use|voice|while|widget|widget_hover|widget_selected|widget_text|yield)\\b/,\n    boolean: /\\b(?:[Ff]alse|[Tt]rue)\\b/,\n    number: /(?:\\b(?:0[bo])?(?:(?:\\d|0x[\\da-f])[\\da-f]*(?:\\.\\d*)?)|\\B\\.\\d+)(?:e[+-]?\\d+)?j?/i,\n    operator: /[-+%=]=?|!=|\\*\\*?=?|\\/\\/?=?|<[<=>]?|>[=>]?|[&|^~]|\\b(?:and|at|not|or|with)\\b/,\n    punctuation: /[{}[\\];(),.:]/\n}, Prism.languages.rpy = Prism.languages.renpy;\nPrism.languages.rescript = {\n    comment: {\n        pattern: /\\/\\/.*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n        greedy: !0\n    },\n    char: {\n        pattern: /'(?:[^\\r\\n\\\\]|\\\\(?:.|\\w+))'/,\n        greedy: !0\n    },\n    string: {\n        pattern: /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n\"])*\"/,\n        greedy: !0\n    },\n    \"class-name\": /\\b[A-Z]\\w*|@[a-z.]*|#[A-Za-z]\\w*|#\\d/,\n    function: {\n        pattern: /[a-zA-Z]\\w*(?=\\()|(\\.)[a-z]\\w*/,\n        lookbehind: !0\n    },\n    number: /(?:\\b0x(?:[\\da-f]+(?:\\.[\\da-f]*)?|\\.[\\da-f]+)(?:p[+-]?\\d+)?|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?)[ful]{0,4}/i,\n    boolean: /\\b(?:false|true)\\b/,\n    \"attr-value\": /[A-Za-z]\\w*(?==)/,\n    constant: {\n        pattern: /(\\btype\\s+)[a-z]\\w*/,\n        lookbehind: !0\n    },\n    tag: {\n        pattern: /(<)[a-z]\\w*|(?:<\\/)[a-z]\\w*/,\n        lookbehind: !0,\n        inside: {\n            operator: /<|>|\\//\n        }\n    },\n    keyword: /\\b(?:and|as|assert|begin|bool|class|constraint|do|done|downto|else|end|exception|external|float|for|fun|function|if|in|include|inherit|initializer|int|lazy|let|method|module|mutable|new|nonrec|object|of|open|or|private|rec|string|switch|then|to|try|type|when|while|with)\\b/,\n    operator: /\\.{3}|:[:=]?|\\|>|->|=(?:==?|>)?|<=?|>=?|[|^?'#!~`]|[+\\-*\\/]\\.?|\\b(?:asr|land|lor|lsl|lsr|lxor|mod)\\b/,\n    punctuation: /[(){}[\\],;.]/\n}, Prism.languages.insertBefore(\"rescript\", \"string\", {\n    \"template-string\": {\n        pattern: /`(?:\\\\[\\s\\S]|\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}|(?!\\$\\{)[^\\\\`])*`/,\n        greedy: !0,\n        inside: {\n            \"template-punctuation\": {\n                pattern: /^`|`$/,\n                alias: \"string\"\n            },\n            interpolation: {\n                pattern: /((?:^|[^\\\\])(?:\\\\{2})*)\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}/,\n                lookbehind: !0,\n                inside: {\n                    \"interpolation-punctuation\": {\n                        pattern: /^\\$\\{|\\}$/,\n                        alias: \"tag\"\n                    },\n                    rest: Prism.languages.rescript\n                }\n            },\n            string: /[\\s\\S]+/\n        }\n    }\n}), Prism.languages.res = Prism.languages.rescript;\nPrism.languages.rest = {\n    table: [\n        {\n            pattern: /(^[\\t ]*)(?:\\+[=-]+)+\\+(?:\\r?\\n|\\r)(?:\\1[+|].+[+|](?:\\r?\\n|\\r))+\\1(?:\\+[=-]+)+\\+/m,\n            lookbehind: !0,\n            inside: {\n                punctuation: /\\||(?:\\+[=-]+)+\\+/\n            }\n        },\n        {\n            pattern: /(^[\\t ]*)=+ [ =]*=(?:(?:\\r?\\n|\\r)\\1.+)+(?:\\r?\\n|\\r)\\1=+ [ =]*=(?=(?:\\r?\\n|\\r){2}|\\s*$)/m,\n            lookbehind: !0,\n            inside: {\n                punctuation: /[=-]+/\n            }\n        }\n    ],\n    \"substitution-def\": {\n        pattern: /(^[\\t ]*\\.\\. )\\|(?:[^|\\s](?:[^|]*[^|\\s])?)\\| [^:]+::/m,\n        lookbehind: !0,\n        inside: {\n            substitution: {\n                pattern: /^\\|(?:[^|\\s]|[^|\\s][^|]*[^|\\s])\\|/,\n                alias: \"attr-value\",\n                inside: {\n                    punctuation: /^\\||\\|$/\n                }\n            },\n            directive: {\n                pattern: /( )(?! )[^:]+::/,\n                lookbehind: !0,\n                alias: \"function\",\n                inside: {\n                    punctuation: /::$/\n                }\n            }\n        }\n    },\n    \"link-target\": [\n        {\n            pattern: /(^[\\t ]*\\.\\. )\\[[^\\]]+\\]/m,\n            lookbehind: !0,\n            alias: \"string\",\n            inside: {\n                punctuation: /^\\[|\\]$/\n            }\n        },\n        {\n            pattern: /(^[\\t ]*\\.\\. )_(?:`[^`]+`|(?:[^:\\\\]|\\\\.)+):/m,\n            lookbehind: !0,\n            alias: \"string\",\n            inside: {\n                punctuation: /^_|:$/\n            }\n        }\n    ],\n    directive: {\n        pattern: /(^[\\t ]*\\.\\. )[^:]+::/m,\n        lookbehind: !0,\n        alias: \"function\",\n        inside: {\n            punctuation: /::$/\n        }\n    },\n    comment: {\n        pattern: /(^[\\t ]*\\.\\.)(?:(?: .+)?(?:(?:\\r?\\n|\\r).+)+| .+)(?=(?:\\r?\\n|\\r){2}|$)/m,\n        lookbehind: !0\n    },\n    title: [\n        {\n            pattern: /^(([!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~])\\2+)(?:\\r?\\n|\\r).+(?:\\r?\\n|\\r)\\1$/m,\n            inside: {\n                punctuation: /^[!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~]+|[!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~]+$/,\n                important: /.+/\n            }\n        },\n        {\n            pattern: /(^|(?:\\r?\\n|\\r){2}).+(?:\\r?\\n|\\r)([!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~])\\2+(?=\\r?\\n|\\r|$)/,\n            lookbehind: !0,\n            inside: {\n                punctuation: /[!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~]+$/,\n                important: /.+/\n            }\n        }\n    ],\n    hr: {\n        pattern: /((?:\\r?\\n|\\r){2})([!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~])\\2{3,}(?=(?:\\r?\\n|\\r){2})/,\n        lookbehind: !0,\n        alias: \"punctuation\"\n    },\n    field: {\n        pattern: /(^[\\t ]*):[^:\\r\\n]+:(?= )/m,\n        lookbehind: !0,\n        alias: \"attr-name\"\n    },\n    \"command-line-option\": {\n        pattern: /(^[\\t ]*)(?:[+-][a-z\\d]|(?:--|\\/)[a-z\\d-]+)(?:[ =](?:[a-z][\\w-]*|<[^<>]+>))?(?:, (?:[+-][a-z\\d]|(?:--|\\/)[a-z\\d-]+)(?:[ =](?:[a-z][\\w-]*|<[^<>]+>))?)*(?=(?:\\r?\\n|\\r)? {2,}\\S)/im,\n        lookbehind: !0,\n        alias: \"symbol\"\n    },\n    \"literal-block\": {\n        pattern: /::(?:\\r?\\n|\\r){2}([ \\t]+)(?![ \\t]).+(?:(?:\\r?\\n|\\r)\\1.+)*/,\n        inside: {\n            \"literal-block-punctuation\": {\n                pattern: /^::/,\n                alias: \"punctuation\"\n            }\n        }\n    },\n    \"quoted-literal-block\": {\n        pattern: /::(?:\\r?\\n|\\r){2}([!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~]).*(?:(?:\\r?\\n|\\r)\\1.*)*/,\n        inside: {\n            \"literal-block-punctuation\": {\n                pattern: /^(?:::|([!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~])\\1*)/m,\n                alias: \"punctuation\"\n            }\n        }\n    },\n    \"list-bullet\": {\n        pattern: /(^[\\t ]*)(?:[*+\\-•‣⁃]|\\(?(?:\\d+|[a-z]|[ivxdclm]+)\\)|(?:\\d+|[a-z]|[ivxdclm]+)\\.)(?= )/im,\n        lookbehind: !0,\n        alias: \"punctuation\"\n    },\n    \"doctest-block\": {\n        pattern: /(^[\\t ]*)>>> .+(?:(?:\\r?\\n|\\r).+)*/m,\n        lookbehind: !0,\n        inside: {\n            punctuation: /^>>>/\n        }\n    },\n    inline: [\n        {\n            pattern: /(^|[\\s\\-:\\/'\"<(\\[{])(?::[^:]+:`.*?`|`.*?`:[^:]+:|(\\*\\*?|``?|\\|)(?!\\s)(?:(?!\\2).)*\\S\\2(?=[\\s\\-.,:;!?\\\\\\/'\")\\]}]|$))/m,\n            lookbehind: !0,\n            inside: {\n                bold: {\n                    pattern: /(^\\*\\*).+(?=\\*\\*$)/,\n                    lookbehind: !0\n                },\n                italic: {\n                    pattern: /(^\\*).+(?=\\*$)/,\n                    lookbehind: !0\n                },\n                \"inline-literal\": {\n                    pattern: /(^``).+(?=``$)/,\n                    lookbehind: !0,\n                    alias: \"symbol\"\n                },\n                role: {\n                    pattern: /^:[^:]+:|:[^:]+:$/,\n                    alias: \"function\",\n                    inside: {\n                        punctuation: /^:|:$/\n                    }\n                },\n                \"interpreted-text\": {\n                    pattern: /(^`).+(?=`$)/,\n                    lookbehind: !0,\n                    alias: \"attr-value\"\n                },\n                substitution: {\n                    pattern: /(^\\|).+(?=\\|$)/,\n                    lookbehind: !0,\n                    alias: \"attr-value\"\n                },\n                punctuation: /\\*\\*?|``?|\\|/\n            }\n        }\n    ],\n    link: [\n        {\n            pattern: /\\[[^\\[\\]]+\\]_(?=[\\s\\-.,:;!?\\\\\\/'\")\\]}]|$)/,\n            alias: \"string\",\n            inside: {\n                punctuation: /^\\[|\\]_$/\n            }\n        },\n        {\n            pattern: /(?:\\b[a-z\\d]+(?:[_.:+][a-z\\d]+)*_?_|`[^`]+`_?_|_`[^`]+`)(?=[\\s\\-.,:;!?\\\\\\/'\")\\]}]|$)/i,\n            alias: \"string\",\n            inside: {\n                punctuation: /^_?`|`$|`?_?_$/\n            }\n        }\n    ],\n    punctuation: {\n        pattern: /(^[\\t ]*)(?:\\|(?= |$)|(?:---?|—|\\.\\.|__)(?= )|\\.\\.$)/m,\n        lookbehind: !0\n    }\n};\nPrism.languages.rip = {\n    comment: {\n        pattern: /#.*/,\n        greedy: !0\n    },\n    char: {\n        pattern: /\\B`[^\\s`'\",.:;#\\/\\\\()<>\\[\\]{}]\\b/,\n        greedy: !0\n    },\n    string: {\n        pattern: /(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n        greedy: !0\n    },\n    regex: {\n        pattern: /(^|[^/])\\/(?!\\/)(?:\\[[^\\n\\r\\]]*\\]|\\\\.|[^/\\\\\\r\\n\\[])+\\/(?=\\s*(?:$|[\\r\\n,.;})]))/,\n        lookbehind: !0,\n        greedy: !0\n    },\n    keyword: /(?:=>|->)|\\b(?:case|catch|class|else|exit|finally|if|raise|return|switch|try)\\b/,\n    builtin: /@|\\bSystem\\b/,\n    boolean: /\\b(?:false|true)\\b/,\n    date: /\\b\\d{4}-\\d{2}-\\d{2}\\b/,\n    time: /\\b\\d{2}:\\d{2}:\\d{2}\\b/,\n    datetime: /\\b\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\b/,\n    symbol: /:[^\\d\\s`'\",.:;#\\/\\\\()<>\\[\\]{}][^\\s`'\",.:;#\\/\\\\()<>\\[\\]{}]*/,\n    number: /[+-]?\\b(?:\\d+\\.\\d+|\\d+)\\b/,\n    punctuation: /(?:\\.{2,3})|[`,.:;=\\/\\\\()<>\\[\\]{}]/,\n    reference: /[^\\d\\s`'\",.:;#\\/\\\\()<>\\[\\]{}][^\\s`'\",.:;#\\/\\\\()<>\\[\\]{}]*/\n};\nPrism.languages.roboconf = {\n    comment: /#.*/,\n    keyword: {\n        pattern: /(^|\\s)(?:(?:external|import)\\b|(?:facet|instance of)(?=[ \\t]+[\\w-]+[ \\t]*\\{))/,\n        lookbehind: !0\n    },\n    component: {\n        pattern: /[\\w-]+(?=[ \\t]*\\{)/,\n        alias: \"variable\"\n    },\n    property: /[\\w.-]+(?=[ \\t]*:)/,\n    value: {\n        pattern: /(=[ \\t]*(?![ \\t]))[^,;]+/,\n        lookbehind: !0,\n        alias: \"attr-value\"\n    },\n    optional: {\n        pattern: /\\(optional\\)/,\n        alias: \"builtin\"\n    },\n    wildcard: {\n        pattern: /(\\.)\\*/,\n        lookbehind: !0,\n        alias: \"operator\"\n    },\n    punctuation: /[{},.;:=]/\n};\n!function(t) {\n    var n = {\n        pattern: /(^[ \\t]*| {2}|\\t)#.*/m,\n        lookbehind: !0,\n        greedy: !0\n    }, e = {\n        pattern: /((?:^|[^\\\\])(?:\\\\{2})*)[$@&%]\\{(?:[^{}\\r\\n]|\\{[^{}\\r\\n]*\\})*\\}/,\n        lookbehind: !0,\n        inside: {\n            punctuation: /^[$@&%]\\{|\\}$/\n        }\n    };\n    function a(t, a) {\n        var r = {\n            \"section-header\": {\n                pattern: /^ ?\\*{3}.+?\\*{3}/,\n                alias: \"keyword\"\n            }\n        };\n        for(var o in a)r[o] = a[o];\n        return r.tag = {\n            pattern: /([\\r\\n](?: {2}|\\t)[ \\t]*)\\[[-\\w]+\\]/,\n            lookbehind: !0,\n            inside: {\n                punctuation: /\\[|\\]/\n            }\n        }, r.variable = e, r.comment = n, {\n            pattern: RegExp(\"^ ?\\\\*{3}[ \t]*<name>[ \t]*\\\\*{3}(?:.|[\\r\\n](?!\\\\*{3}))*\".replace(/<name>/g, function() {\n                return t;\n            }), \"im\"),\n            alias: \"section\",\n            inside: r\n        };\n    }\n    var r = {\n        pattern: /(\\[Documentation\\](?: {2}|\\t)[ \\t]*)(?![ \\t]|#)(?:.|(?:\\r\\n?|\\n)[ \\t]*\\.{3})+/,\n        lookbehind: !0,\n        alias: \"string\"\n    }, o = {\n        pattern: /([\\r\\n] ?)(?!#)(?:\\S(?:[ \\t]\\S)*)+/,\n        lookbehind: !0,\n        alias: \"function\",\n        inside: {\n            variable: e\n        }\n    }, i = {\n        pattern: /([\\r\\n](?: {2}|\\t)[ \\t]*)(?!\\[|\\.{3}|#)(?:\\S(?:[ \\t]\\S)*)+/,\n        lookbehind: !0,\n        inside: {\n            variable: e\n        }\n    };\n    t.languages.robotframework = {\n        settings: a(\"Settings\", {\n            documentation: {\n                pattern: /([\\r\\n] ?Documentation(?: {2}|\\t)[ \\t]*)(?![ \\t]|#)(?:.|(?:\\r\\n?|\\n)[ \\t]*\\.{3})+/,\n                lookbehind: !0,\n                alias: \"string\"\n            },\n            property: {\n                pattern: /([\\r\\n] ?)(?!\\.{3}|#)(?:\\S(?:[ \\t]\\S)*)+/,\n                lookbehind: !0\n            }\n        }),\n        variables: a(\"Variables\"),\n        \"test-cases\": a(\"Test Cases\", {\n            \"test-name\": o,\n            documentation: r,\n            property: i\n        }),\n        keywords: a(\"Keywords\", {\n            \"keyword-name\": o,\n            documentation: r,\n            property: i\n        }),\n        tasks: a(\"Tasks\", {\n            \"task-name\": o,\n            documentation: r,\n            property: i\n        }),\n        comment: n\n    }, t.languages.robot = t.languages.robotframework;\n}(Prism);\n!function(e) {\n    for(var a = \"/\\\\*(?:[^*/]|\\\\*(?!/)|/(?!\\\\*)|<self>)*\\\\*/\", t = 0; t < 2; t++)a = a.replace(/<self>/g, function() {\n        return a;\n    });\n    a = a.replace(/<self>/g, function() {\n        return \"[^\\\\s\\\\S]\";\n    }), e.languages.rust = {\n        comment: [\n            {\n                pattern: RegExp(\"(^|[^\\\\\\\\])\" + a),\n                lookbehind: !0,\n                greedy: !0\n            },\n            {\n                pattern: /(^|[^\\\\:])\\/\\/.*/,\n                lookbehind: !0,\n                greedy: !0\n            }\n        ],\n        string: {\n            pattern: /b?\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|b?r(#*)\"(?:[^\"]|\"(?!\\1))*\"\\1/,\n            greedy: !0\n        },\n        char: {\n            pattern: /b?'(?:\\\\(?:x[0-7][\\da-fA-F]|u\\{(?:[\\da-fA-F]_*){1,6}\\}|.)|[^\\\\\\r\\n\\t'])'/,\n            greedy: !0\n        },\n        attribute: {\n            pattern: /#!?\\[(?:[^\\[\\]\"]|\"(?:\\\\[\\s\\S]|[^\\\\\"])*\")*\\]/,\n            greedy: !0,\n            alias: \"attr-name\",\n            inside: {\n                string: null\n            }\n        },\n        \"closure-params\": {\n            pattern: /([=(,:]\\s*|\\bmove\\s*)\\|[^|]*\\||\\|[^|]*\\|(?=\\s*(?:\\{|->))/,\n            lookbehind: !0,\n            greedy: !0,\n            inside: {\n                \"closure-punctuation\": {\n                    pattern: /^\\||\\|$/,\n                    alias: \"punctuation\"\n                },\n                rest: null\n            }\n        },\n        \"lifetime-annotation\": {\n            pattern: /'\\w+/,\n            alias: \"symbol\"\n        },\n        \"fragment-specifier\": {\n            pattern: /(\\$\\w+:)[a-z]+/,\n            lookbehind: !0,\n            alias: \"punctuation\"\n        },\n        variable: /\\$\\w+/,\n        \"function-definition\": {\n            pattern: /(\\bfn\\s+)\\w+/,\n            lookbehind: !0,\n            alias: \"function\"\n        },\n        \"type-definition\": {\n            pattern: /(\\b(?:enum|struct|trait|type|union)\\s+)\\w+/,\n            lookbehind: !0,\n            alias: \"class-name\"\n        },\n        \"module-declaration\": [\n            {\n                pattern: /(\\b(?:crate|mod)\\s+)[a-z][a-z_\\d]*/,\n                lookbehind: !0,\n                alias: \"namespace\"\n            },\n            {\n                pattern: /(\\b(?:crate|self|super)\\s*)::\\s*[a-z][a-z_\\d]*\\b(?:\\s*::(?:\\s*[a-z][a-z_\\d]*\\s*::)*)?/,\n                lookbehind: !0,\n                alias: \"namespace\",\n                inside: {\n                    punctuation: /::/\n                }\n            }\n        ],\n        keyword: [\n            /\\b(?:Self|abstract|as|async|await|become|box|break|const|continue|crate|do|dyn|else|enum|extern|final|fn|for|if|impl|in|let|loop|macro|match|mod|move|mut|override|priv|pub|ref|return|self|static|struct|super|trait|try|type|typeof|union|unsafe|unsized|use|virtual|where|while|yield)\\b/,\n            /\\b(?:bool|char|f(?:32|64)|[ui](?:8|16|32|64|128|size)|str)\\b/\n        ],\n        function: /\\b[a-z_]\\w*(?=\\s*(?:::\\s*<|\\())/,\n        macro: {\n            pattern: /\\b\\w+!/,\n            alias: \"property\"\n        },\n        constant: /\\b[A-Z_][A-Z_\\d]+\\b/,\n        \"class-name\": /\\b[A-Z]\\w*\\b/,\n        namespace: {\n            pattern: /(?:\\b[a-z][a-z_\\d]*\\s*::\\s*)*\\b[a-z][a-z_\\d]*\\s*::(?!\\s*<)/,\n            inside: {\n                punctuation: /::/\n            }\n        },\n        number: /\\b(?:0x[\\dA-Fa-f](?:_?[\\dA-Fa-f])*|0o[0-7](?:_?[0-7])*|0b[01](?:_?[01])*|(?:(?:\\d(?:_?\\d)*)?\\.)?\\d(?:_?\\d)*(?:[Ee][+-]?\\d+)?)(?:_?(?:f32|f64|[iu](?:8|16|32|64|size)?))?\\b/,\n        boolean: /\\b(?:false|true)\\b/,\n        punctuation: /->|\\.\\.=|\\.{1,3}|::|[{}[\\];(),:]/,\n        operator: /[-+*\\/%!^]=?|=[=>]?|&[&=]?|\\|[|=]?|<<?=?|>>?=?|[@?]/\n    }, e.languages.rust[\"closure-params\"].inside.rest = e.languages.rust, e.languages.rust.attribute.inside.string = e.languages.rust.string;\n}(Prism);\n!function(e) {\n    var t = \"(?:\\\"(?:\\\"\\\"|[^\\\"])*\\\"(?!\\\")|'(?:''|[^'])*'(?!'))\", a = /\\b(?:\\d[\\da-f]*x|\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?)\\b/i, n = {\n        pattern: RegExp(t + \"[bx]\"),\n        alias: \"number\"\n    }, i = {\n        pattern: /&[a-z_]\\w*/i\n    }, r = {\n        pattern: /((?:^|\\s|=|\\())%(?:ABORT|BY|CMS|COPY|DISPLAY|DO|ELSE|END|EVAL|GLOBAL|GO|GOTO|IF|INC|INCLUDE|INDEX|INPUT|KTRIM|LENGTH|LET|LIST|LOCAL|PUT|QKTRIM|QSCAN|QSUBSTR|QSYSFUNC|QUPCASE|RETURN|RUN|SCAN|SUBSTR|SUPERQ|SYMDEL|SYMEXIST|SYMGLOBL|SYMLOCAL|SYSCALL|SYSEVALF|SYSEXEC|SYSFUNC|SYSGET|SYSRPUT|THEN|TO|TSO|UNQUOTE|UNTIL|UPCASE|WHILE|WINDOW)\\b/i,\n        lookbehind: !0,\n        alias: \"keyword\"\n    }, s = {\n        pattern: /(^|\\s)(?:proc\\s+\\w+|data(?!=)|quit|run)\\b/i,\n        alias: \"keyword\",\n        lookbehind: !0\n    }, o = [\n        /\\/\\*[\\s\\S]*?\\*\\//,\n        {\n            pattern: /(^[ \\t]*|;\\s*)\\*[^;]*;/m,\n            lookbehind: !0\n        }\n    ], l = {\n        pattern: RegExp(t),\n        greedy: !0\n    }, c = /[$%@.(){}\\[\\];,\\\\]/, d = {\n        pattern: /%?\\b\\w+(?=\\()/,\n        alias: \"keyword\"\n    }, p = {\n        function: d,\n        \"arg-value\": {\n            pattern: /(=\\s*)[A-Z\\.]+/i,\n            lookbehind: !0\n        },\n        operator: /=/,\n        \"macro-variable\": i,\n        arg: {\n            pattern: /[A-Z]+/i,\n            alias: \"keyword\"\n        },\n        number: a,\n        \"numeric-constant\": n,\n        punctuation: c,\n        string: l\n    }, u = {\n        pattern: /\\b(?:format|put)\\b=?[\\w'$.]+/i,\n        inside: {\n            keyword: /^(?:format|put)(?==)/i,\n            equals: /=/,\n            format: {\n                pattern: /(?:\\w|\\$\\d)+\\.\\d?/,\n                alias: \"number\"\n            }\n        }\n    }, m = {\n        pattern: /\\b(?:format|put)\\s+[\\w']+(?:\\s+[$.\\w]+)+(?=;)/i,\n        inside: {\n            keyword: /^(?:format|put)/i,\n            format: {\n                pattern: /[\\w$]+\\.\\d?/,\n                alias: \"number\"\n            }\n        }\n    }, b = {\n        pattern: /((?:^|\\s)=?)(?:catname|checkpoint execute_always|dm|endsas|filename|footnote|%include|libname|%list|lock|missing|options|page|resetline|%run|sasfile|skip|sysecho|title\\d?)\\b/i,\n        lookbehind: !0,\n        alias: \"keyword\"\n    }, g = {\n        pattern: /(^|\\s)(?:submit(?:\\s+(?:load|norun|parseonly))?|endsubmit)\\b/i,\n        lookbehind: !0,\n        alias: \"keyword\"\n    }, k = \"aStore|accessControl|aggregation|audio|autotune|bayesianNetClassifier|bioMedImage|boolRule|builtins|cardinality|cdm|clustering|conditionalRandomFields|configuration|copula|countreg|dataDiscovery|dataPreprocess|dataSciencePilot|dataStep|decisionTree|deduplication|deepLearn|deepNeural|deepRnn|ds2|ecm|entityRes|espCluster|explainModel|factmac|fastKnn|fcmpact|fedSql|freqTab|gVarCluster|gam|gleam|graphSemiSupLearn|hiddenMarkovModel|hyperGroup|ica|image|iml|kernalPca|langModel|ldaTopic|loadStreams|mbc|mixed|mlTools|modelPublishing|network|neuralNet|nmf|nonParametricBayes|nonlinear|optNetwork|optimization|panel|pca|percentile|phreg|pls|qkb|qlim|quantreg|recommend|regression|reinforcementLearn|robustPca|ruleMining|sampling|sandwich|sccasl|search(?:Analytics)?|sentimentAnalysis|sequence|session(?:Prop)?|severity|simSystem|simple|smartData|sparkEmbeddedProcess|sparseML|spatialreg|spc|stabilityMonitoring|svDataDescription|svm|table|text(?:Filters|Frequency|Mining|Parse|Rule(?:Develop|Score)|Topic|Util)|timeData|transpose|tsInfo|tsReconcile|uniTimeSeries|varReduce\", y = {\n        pattern: RegExp(\"(^|\\\\s)(?:action\\\\s+)?(?:<act>)\\\\.[a-z]+\\\\b[^;]+\".replace(/<act>/g, function() {\n            return k;\n        }), \"i\"),\n        lookbehind: !0,\n        inside: {\n            keyword: RegExp(\"(?:<act>)\\\\.[a-z]+\\\\b\".replace(/<act>/g, function() {\n                return k;\n            }), \"i\"),\n            action: {\n                pattern: /(?:action)/i,\n                alias: \"keyword\"\n            },\n            comment: o,\n            function: d,\n            \"arg-value\": p[\"arg-value\"],\n            operator: p.operator,\n            argument: p.arg,\n            number: a,\n            \"numeric-constant\": n,\n            punctuation: c,\n            string: l\n        }\n    }, S = {\n        pattern: /((?:^|\\s)=?)(?:after|analysis|and|array|barchart|barwidth|begingraph|by|call|cas|cbarline|cfill|class(?:lev)?|close|column|computed?|contains|continue|data(?==)|define|delete|describe|document|do\\s+over|do|dol|drop|dul|else|end(?:comp|source)?|entryTitle|eval(?:uate)?|exec(?:ute)?|exit|file(?:name)?|fill(?:attrs)?|flist|fnc|function(?:list)?|global|goto|group(?:by)?|headline|headskip|histogram|if|infile|keep|keylabel|keyword|label|layout|leave|legendlabel|length|libname|loadactionset|merge|midpoints|_?null_|name|noobs|nowd|ods|options|or|otherwise|out(?:put)?|over(?:lay)?|plot|print|put|raise|ranexp|rannor|rbreak|retain|return|select|session|sessref|set|source|statgraph|sum|summarize|table|temp|terminate|then\\s+do|then|title\\d?|to|var|when|where|xaxisopts|y2axisopts|yaxisopts)\\b/i,\n        lookbehind: !0\n    };\n    e.languages.sas = {\n        datalines: {\n            pattern: /^([ \\t]*)(?:cards|(?:data)?lines);[\\s\\S]+?^[ \\t]*;/im,\n            lookbehind: !0,\n            alias: \"string\",\n            inside: {\n                keyword: {\n                    pattern: /^(?:cards|(?:data)?lines)/i\n                },\n                punctuation: /;/\n            }\n        },\n        \"proc-sql\": {\n            pattern: /(^proc\\s+(?:fed)?sql(?:\\s+[\\w|=]+)?;)[\\s\\S]+?(?=^(?:proc\\s+\\w+|data|quit|run);|(?![\\s\\S]))/im,\n            lookbehind: !0,\n            inside: {\n                sql: {\n                    pattern: RegExp(\"^[ \t]*(?:select|alter\\\\s+table|(?:create|describe|drop)\\\\s+(?:index|table(?:\\\\s+constraints)?|view)|create\\\\s+unique\\\\s+index|insert\\\\s+into|update)(?:<str>|[^;\\\"'])+;\".replace(/<str>/g, function() {\n                        return t;\n                    }), \"im\"),\n                    alias: \"language-sql\",\n                    inside: e.languages.sql\n                },\n                \"global-statements\": b,\n                \"sql-statements\": {\n                    pattern: /(^|\\s)(?:disconnect\\s+from|begin|commit|exec(?:ute)?|reset|rollback|validate)\\b/i,\n                    lookbehind: !0,\n                    alias: \"keyword\"\n                },\n                number: a,\n                \"numeric-constant\": n,\n                punctuation: c,\n                string: l\n            }\n        },\n        \"proc-groovy\": {\n            pattern: /(^proc\\s+groovy(?:\\s+[\\w|=]+)?;)[\\s\\S]+?(?=^(?:proc\\s+\\w+|data|quit|run);|(?![\\s\\S]))/im,\n            lookbehind: !0,\n            inside: {\n                comment: o,\n                groovy: {\n                    pattern: RegExp(\"(^[ \t]*submit(?:\\\\s+(?:load|norun|parseonly))?)(?:<str>|[^\\\"'])+?(?=endsubmit;)\".replace(/<str>/g, function() {\n                        return t;\n                    }), \"im\"),\n                    lookbehind: !0,\n                    alias: \"language-groovy\",\n                    inside: e.languages.groovy\n                },\n                keyword: S,\n                \"submit-statement\": g,\n                \"global-statements\": b,\n                number: a,\n                \"numeric-constant\": n,\n                punctuation: c,\n                string: l\n            }\n        },\n        \"proc-lua\": {\n            pattern: /(^proc\\s+lua(?:\\s+[\\w|=]+)?;)[\\s\\S]+?(?=^(?:proc\\s+\\w+|data|quit|run);|(?![\\s\\S]))/im,\n            lookbehind: !0,\n            inside: {\n                comment: o,\n                lua: {\n                    pattern: RegExp(\"(^[ \t]*submit(?:\\\\s+(?:load|norun|parseonly))?)(?:<str>|[^\\\"'])+?(?=endsubmit;)\".replace(/<str>/g, function() {\n                        return t;\n                    }), \"im\"),\n                    lookbehind: !0,\n                    alias: \"language-lua\",\n                    inside: e.languages.lua\n                },\n                keyword: S,\n                \"submit-statement\": g,\n                \"global-statements\": b,\n                number: a,\n                \"numeric-constant\": n,\n                punctuation: c,\n                string: l\n            }\n        },\n        \"proc-cas\": {\n            pattern: /(^proc\\s+cas(?:\\s+[\\w|=]+)?;)[\\s\\S]+?(?=^(?:proc\\s+\\w+|quit|data);|(?![\\s\\S]))/im,\n            lookbehind: !0,\n            inside: {\n                comment: o,\n                \"statement-var\": {\n                    pattern: /((?:^|\\s)=?)saveresult\\s[^;]+/im,\n                    lookbehind: !0,\n                    inside: {\n                        statement: {\n                            pattern: /^saveresult\\s+\\S+/i,\n                            inside: {\n                                keyword: /^(?:saveresult)/i\n                            }\n                        },\n                        rest: p\n                    }\n                },\n                \"cas-actions\": y,\n                statement: {\n                    pattern: /((?:^|\\s)=?)(?:default|(?:un)?set|on|output|upload)[^;]+/im,\n                    lookbehind: !0,\n                    inside: p\n                },\n                step: s,\n                keyword: S,\n                function: d,\n                format: u,\n                altformat: m,\n                \"global-statements\": b,\n                number: a,\n                \"numeric-constant\": n,\n                punctuation: c,\n                string: l\n            }\n        },\n        \"proc-args\": {\n            pattern: RegExp(\"(^proc\\\\s+\\\\w+\\\\s+)(?!\\\\s)(?:[^;\\\"']|<str>)+;\".replace(/<str>/g, function() {\n                return t;\n            }), \"im\"),\n            lookbehind: !0,\n            inside: p\n        },\n        \"macro-keyword\": r,\n        \"macro-variable\": i,\n        \"macro-string-functions\": {\n            pattern: /((?:^|\\s|=))%(?:BQUOTE|NRBQUOTE|NRQUOTE|NRSTR|QUOTE|STR)\\(.*?(?:[^%]\\))/i,\n            lookbehind: !0,\n            inside: {\n                function: {\n                    pattern: /%(?:BQUOTE|NRBQUOTE|NRQUOTE|NRSTR|QUOTE|STR)/i,\n                    alias: \"keyword\"\n                },\n                \"macro-keyword\": r,\n                \"macro-variable\": i,\n                \"escaped-char\": {\n                    pattern: /%['\"()<>=¬^~;,#]/\n                },\n                punctuation: c\n            }\n        },\n        \"macro-declaration\": {\n            pattern: /^%macro[^;]+(?=;)/im,\n            inside: {\n                keyword: /%macro/i\n            }\n        },\n        \"macro-end\": {\n            pattern: /^%mend[^;]+(?=;)/im,\n            inside: {\n                keyword: /%mend/i\n            }\n        },\n        macro: {\n            pattern: /%_\\w+(?=\\()/,\n            alias: \"keyword\"\n        },\n        input: {\n            pattern: /\\binput\\s[-\\w\\s/*.$&]+;/i,\n            inside: {\n                input: {\n                    alias: \"keyword\",\n                    pattern: /^input/i\n                },\n                comment: o,\n                number: a,\n                \"numeric-constant\": n\n            }\n        },\n        \"options-args\": {\n            pattern: /(^options)[-'\"|/\\\\<>*+=:()\\w\\s]*(?=;)/im,\n            lookbehind: !0,\n            inside: p\n        },\n        \"cas-actions\": y,\n        comment: o,\n        function: d,\n        format: u,\n        altformat: m,\n        \"numeric-constant\": n,\n        datetime: {\n            pattern: RegExp(t + \"(?:dt?|t)\"),\n            alias: \"number\"\n        },\n        string: l,\n        step: s,\n        keyword: S,\n        \"operator-keyword\": {\n            pattern: /\\b(?:eq|ge|gt|in|le|lt|ne|not)\\b/i,\n            alias: \"operator\"\n        },\n        number: a,\n        operator: /\\*\\*?|\\|\\|?|!!?|¦¦?|<[>=]?|>[<=]?|[-+\\/=&]|[~¬^]=?/,\n        punctuation: c\n    };\n}(Prism);\n!function(e) {\n    e.languages.sass = e.languages.extend(\"css\", {\n        comment: {\n            pattern: /^([ \\t]*)\\/[\\/*].*(?:(?:\\r?\\n|\\r)\\1[ \\t].+)*/m,\n            lookbehind: !0,\n            greedy: !0\n        }\n    }), e.languages.insertBefore(\"sass\", \"atrule\", {\n        \"atrule-line\": {\n            pattern: /^(?:[ \\t]*)[@+=].+/m,\n            greedy: !0,\n            inside: {\n                atrule: /(?:@[\\w-]+|[+=])/\n            }\n        }\n    }), delete e.languages.sass.atrule;\n    var r = /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/, t = [\n        /[+*\\/%]|[=!]=|<=?|>=?|\\b(?:and|not|or)\\b/,\n        {\n            pattern: /(\\s)-(?=\\s)/,\n            lookbehind: !0\n        }\n    ];\n    e.languages.insertBefore(\"sass\", \"property\", {\n        \"variable-line\": {\n            pattern: /^[ \\t]*\\$.+/m,\n            greedy: !0,\n            inside: {\n                punctuation: /:/,\n                variable: r,\n                operator: t\n            }\n        },\n        \"property-line\": {\n            pattern: /^[ \\t]*(?:[^:\\s]+ *:.*|:[^:\\s].*)/m,\n            greedy: !0,\n            inside: {\n                property: [\n                    /[^:\\s]+(?=\\s*:)/,\n                    {\n                        pattern: /(:)[^:\\s]+/,\n                        lookbehind: !0\n                    }\n                ],\n                punctuation: /:/,\n                variable: r,\n                operator: t,\n                important: e.languages.sass.important\n            }\n        }\n    }), delete e.languages.sass.property, delete e.languages.sass.important, e.languages.insertBefore(\"sass\", \"punctuation\", {\n        selector: {\n            pattern: /^([ \\t]*)\\S(?:,[^,\\r\\n]+|[^,\\r\\n]*)(?:,[^,\\r\\n]+)*(?:,(?:\\r?\\n|\\r)\\1[ \\t]+\\S(?:,[^,\\r\\n]+|[^,\\r\\n]*)(?:,[^,\\r\\n]+)*)*/m,\n            lookbehind: !0,\n            greedy: !0\n        }\n    });\n}(Prism);\nPrism.languages.scss = Prism.languages.extend(\"css\", {\n    comment: {\n        pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n        lookbehind: !0\n    },\n    atrule: {\n        pattern: /@[\\w-](?:\\([^()]+\\)|[^()\\s]|\\s+(?!\\s))*?(?=\\s+[{;])/,\n        inside: {\n            rule: /@[\\w-]+/\n        }\n    },\n    url: /(?:[-a-z]+-)?url(?=\\()/i,\n    selector: {\n        pattern: /(?=\\S)[^@;{}()]?(?:[^@;{}()\\s]|\\s+(?!\\s)|#\\{\\$[-\\w]+\\})+(?=\\s*\\{(?:\\}|\\s|[^}][^:{}]*[:{][^}]))/,\n        inside: {\n            parent: {\n                pattern: /&/,\n                alias: \"important\"\n            },\n            placeholder: /%[-\\w]+/,\n            variable: /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n        }\n    },\n    property: {\n        pattern: /(?:[-\\w]|\\$[-\\w]|#\\{\\$[-\\w]+\\})+(?=\\s*:)/,\n        inside: {\n            variable: /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n        }\n    }\n}), Prism.languages.insertBefore(\"scss\", \"atrule\", {\n    keyword: [\n        /@(?:content|debug|each|else(?: if)?|extend|for|forward|function|if|import|include|mixin|return|use|warn|while)\\b/i,\n        {\n            pattern: /( )(?:from|through)(?= )/,\n            lookbehind: !0\n        }\n    ]\n}), Prism.languages.insertBefore(\"scss\", \"important\", {\n    variable: /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n}), Prism.languages.insertBefore(\"scss\", \"function\", {\n    \"module-modifier\": {\n        pattern: /\\b(?:as|hide|show|with)\\b/i,\n        alias: \"keyword\"\n    },\n    placeholder: {\n        pattern: /%[-\\w]+/,\n        alias: \"selector\"\n    },\n    statement: {\n        pattern: /\\B!(?:default|optional)\\b/i,\n        alias: \"keyword\"\n    },\n    boolean: /\\b(?:false|true)\\b/,\n    null: {\n        pattern: /\\bnull\\b/,\n        alias: \"keyword\"\n    },\n    operator: {\n        pattern: /(\\s)(?:[-+*\\/%]|[=!]=|<=?|>=?|and|not|or)(?=\\s)/,\n        lookbehind: !0\n    }\n}), Prism.languages.scss.atrule.inside.rest = Prism.languages.scss;\nPrism.languages.scala = Prism.languages.extend(\"java\", {\n    \"triple-quoted-string\": {\n        pattern: /\"\"\"[\\s\\S]*?\"\"\"/,\n        greedy: !0,\n        alias: \"string\"\n    },\n    string: {\n        pattern: /(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n        greedy: !0\n    },\n    keyword: /<-|=>|\\b(?:abstract|case|catch|class|def|derives|do|else|enum|extends|extension|final|finally|for|forSome|given|if|implicit|import|infix|inline|lazy|match|new|null|object|opaque|open|override|package|private|protected|return|sealed|self|super|this|throw|trait|transparent|try|type|using|val|var|while|with|yield)\\b/,\n    number: /\\b0x(?:[\\da-f]*\\.)?[\\da-f]+|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e\\d+)?[dfl]?/i,\n    builtin: /\\b(?:Any|AnyRef|AnyVal|Boolean|Byte|Char|Double|Float|Int|Long|Nothing|Short|String|Unit)\\b/,\n    symbol: /'[^\\d\\s\\\\]\\w*/\n}), Prism.languages.insertBefore(\"scala\", \"triple-quoted-string\", {\n    \"string-interpolation\": {\n        pattern: /\\b[a-z]\\w*(?:\"\"\"(?:[^$]|\\$(?:[^{]|\\{(?:[^{}]|\\{[^{}]*\\})*\\}))*?\"\"\"|\"(?:[^$\"\\r\\n]|\\$(?:[^{]|\\{(?:[^{}]|\\{[^{}]*\\})*\\}))*\")/i,\n        greedy: !0,\n        inside: {\n            id: {\n                pattern: /^\\w+/,\n                greedy: !0,\n                alias: \"function\"\n            },\n            escape: {\n                pattern: /\\\\\\$\"|\\$[$\"]/,\n                greedy: !0,\n                alias: \"symbol\"\n            },\n            interpolation: {\n                pattern: /\\$(?:\\w+|\\{(?:[^{}]|\\{[^{}]*\\})*\\})/,\n                greedy: !0,\n                inside: {\n                    punctuation: /^\\$\\{?|\\}$/,\n                    expression: {\n                        pattern: /[\\s\\S]+/,\n                        inside: Prism.languages.scala\n                    }\n                }\n            },\n            string: /[\\s\\S]+/\n        }\n    }\n}), delete Prism.languages.scala[\"class-name\"], delete Prism.languages.scala.function, delete Prism.languages.scala.constant;\n!function(s) {\n    var n = [\n        '\"(?:\\\\\\\\[^]|\\\\$\\\\([^)]+\\\\)|\\\\$(?!\\\\()|`[^`]+`|[^\"\\\\\\\\`$])*\"',\n        \"'[^']*'\",\n        \"\\\\$'(?:[^'\\\\\\\\]|\\\\\\\\[^])*'\",\n        \"<<-?\\\\s*([\\\"']?)(\\\\w+)\\\\1\\\\s[^]*?[\\r\\n]\\\\2\"\n    ].join(\"|\");\n    s.languages[\"shell-session\"] = {\n        command: {\n            pattern: RegExp('^(?:[^\\\\s@:$#%*!/\\\\\\\\]+@[^\\r\\n@:$#%*!/\\\\\\\\]+(?::[^\\x00-\\\\x1F$#%*?\"<>:;|]+)?|[/~.][^\\x00-\\\\x1F$#%*?\"<>@:;|]*)?[$#%](?=\\\\s)' + \"(?:[^\\\\\\\\\\r\\n \t'\\\"<$]|[ \t](?:(?!#)|#.*$)|\\\\\\\\(?:[^\\r]|\\r\\n?)|\\\\$(?!')|<(?!<)|<<str>>)+\".replace(/<<str>>/g, function() {\n                return n;\n            }), \"m\"),\n            greedy: !0,\n            inside: {\n                info: {\n                    pattern: /^[^#$%]+/,\n                    alias: \"punctuation\",\n                    inside: {\n                        user: /^[^\\s@:$#%*!/\\\\]+@[^\\r\\n@:$#%*!/\\\\]+/,\n                        punctuation: /:/,\n                        path: /[\\s\\S]+/\n                    }\n                },\n                bash: {\n                    pattern: /(^[$#%]\\s*)\\S[\\s\\S]*/,\n                    lookbehind: !0,\n                    alias: \"language-bash\",\n                    inside: s.languages.bash\n                },\n                \"shell-symbol\": {\n                    pattern: /^[$#%]/,\n                    alias: \"important\"\n                }\n            }\n        },\n        output: /.(?:.*(?:[\\r\\n]|.$))*/\n    }, s.languages[\"sh-session\"] = s.languages.shellsession = s.languages[\"shell-session\"];\n}(Prism);\nPrism.languages.smali = {\n    comment: /#.*/,\n    string: {\n        pattern: /\"(?:[^\\r\\n\\\\\"]|\\\\.)*\"|'(?:[^\\r\\n\\\\']|\\\\(?:.|u[\\da-fA-F]{4}))'/,\n        greedy: !0\n    },\n    \"class-name\": {\n        pattern: /(^|[^L])L(?:(?:\\w+|`[^`\\r\\n]*`)\\/)*(?:[\\w$]+|`[^`\\r\\n]*`)(?=\\s*;)/,\n        lookbehind: !0,\n        inside: {\n            \"class-name\": {\n                pattern: /(^L|\\/)(?:[\\w$]+|`[^`\\r\\n]*`)$/,\n                lookbehind: !0\n            },\n            namespace: {\n                pattern: /^(L)(?:(?:\\w+|`[^`\\r\\n]*`)\\/)+/,\n                lookbehind: !0,\n                inside: {\n                    punctuation: /\\//\n                }\n            },\n            builtin: /^L/\n        }\n    },\n    builtin: [\n        {\n            pattern: /([();\\[])[BCDFIJSVZ]+/,\n            lookbehind: !0\n        },\n        {\n            pattern: /([\\w$>]:)[BCDFIJSVZ]/,\n            lookbehind: !0\n        }\n    ],\n    keyword: [\n        {\n            pattern: /(\\.end\\s+)[\\w-]+/,\n            lookbehind: !0\n        },\n        {\n            pattern: /(^|[^\\w.-])\\.(?!\\d)[\\w-]+/,\n            lookbehind: !0\n        },\n        {\n            pattern: /(^|[^\\w.-])(?:abstract|annotation|bridge|constructor|enum|final|interface|private|protected|public|runtime|static|synthetic|system|transient)(?![\\w.-])/,\n            lookbehind: !0\n        }\n    ],\n    function: {\n        pattern: /(^|[^\\w.-])(?:\\w+|<[\\w$-]+>)(?=\\()/,\n        lookbehind: !0\n    },\n    field: {\n        pattern: /[\\w$]+(?=:)/,\n        alias: \"variable\"\n    },\n    register: {\n        pattern: /(^|[^\\w.-])[vp]\\d(?![\\w.-])/,\n        lookbehind: !0,\n        alias: \"variable\"\n    },\n    boolean: {\n        pattern: /(^|[^\\w.-])(?:false|true)(?![\\w.-])/,\n        lookbehind: !0\n    },\n    number: {\n        pattern: /(^|[^/\\w.-])-?(?:NAN|INFINITY|0x(?:[\\dA-F]+(?:\\.[\\dA-F]*)?|\\.[\\dA-F]+)(?:p[+-]?[\\dA-F]+)?|(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?)[dflst]?(?![\\w.-])/i,\n        lookbehind: !0\n    },\n    label: {\n        pattern: /(:)\\w+/,\n        lookbehind: !0,\n        alias: \"property\"\n    },\n    operator: /->|\\.\\.|[\\[=]/,\n    punctuation: /[{}(),;:]/\n};\nPrism.languages.smalltalk = {\n    comment: {\n        pattern: /\"(?:\"\"|[^\"])*\"/,\n        greedy: !0\n    },\n    char: {\n        pattern: /\\$./,\n        greedy: !0\n    },\n    string: {\n        pattern: /'(?:''|[^'])*'/,\n        greedy: !0\n    },\n    symbol: /#[\\da-z]+|#(?:-|([+\\/\\\\*~<>=@%|&?!])\\1?)|#(?=\\()/i,\n    \"block-arguments\": {\n        pattern: /(\\[\\s*):[^\\[|]*\\|/,\n        lookbehind: !0,\n        inside: {\n            variable: /:[\\da-z]+/i,\n            punctuation: /\\|/\n        }\n    },\n    \"temporary-variables\": {\n        pattern: /\\|[^|]+\\|/,\n        inside: {\n            variable: /[\\da-z]+/i,\n            punctuation: /\\|/\n        }\n    },\n    keyword: /\\b(?:new|nil|self|super)\\b/,\n    boolean: /\\b(?:false|true)\\b/,\n    number: [\n        /\\d+r-?[\\dA-Z]+(?:\\.[\\dA-Z]+)?(?:e-?\\d+)?/,\n        /\\b\\d+(?:\\.\\d+)?(?:e-?\\d+)?/\n    ],\n    operator: /[<=]=?|:=|~[~=]|\\/\\/?|\\\\\\\\|>[>=]?|[!^+\\-*&|,@]/,\n    punctuation: /[.;:?\\[\\](){}]/\n};\n!function(e) {\n    e.languages.smarty = {\n        comment: {\n            pattern: /^\\{\\*[\\s\\S]*?\\*\\}/,\n            greedy: !0\n        },\n        \"embedded-php\": {\n            pattern: /^\\{php\\}[\\s\\S]*?\\{\\/php\\}/,\n            greedy: !0,\n            inside: {\n                smarty: {\n                    pattern: /^\\{php\\}|\\{\\/php\\}$/,\n                    inside: null\n                },\n                php: {\n                    pattern: /[\\s\\S]+/,\n                    alias: \"language-php\",\n                    inside: e.languages.php\n                }\n            }\n        },\n        string: [\n            {\n                pattern: /\"(?:\\\\.|[^\"\\\\\\r\\n])*\"/,\n                greedy: !0,\n                inside: {\n                    interpolation: {\n                        pattern: /\\{[^{}]*\\}|`[^`]*`/,\n                        inside: {\n                            \"interpolation-punctuation\": {\n                                pattern: /^[{`]|[`}]$/,\n                                alias: \"punctuation\"\n                            },\n                            expression: {\n                                pattern: /[\\s\\S]+/,\n                                inside: null\n                            }\n                        }\n                    },\n                    variable: /\\$\\w+/\n                }\n            },\n            {\n                pattern: /'(?:\\\\.|[^'\\\\\\r\\n])*'/,\n                greedy: !0\n            }\n        ],\n        keyword: {\n            pattern: /(^\\{\\/?)[a-z_]\\w*\\b(?!\\()/i,\n            lookbehind: !0,\n            greedy: !0\n        },\n        delimiter: {\n            pattern: /^\\{\\/?|\\}$/,\n            greedy: !0,\n            alias: \"punctuation\"\n        },\n        number: /\\b0x[\\dA-Fa-f]+|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[Ee][-+]?\\d+)?/,\n        variable: [\n            /\\$(?!\\d)\\w+/,\n            /#(?!\\d)\\w+#/,\n            {\n                pattern: /(\\.|->|\\w\\s*=)(?!\\d)\\w+\\b(?!\\()/,\n                lookbehind: !0\n            },\n            {\n                pattern: /(\\[)(?!\\d)\\w+(?=\\])/,\n                lookbehind: !0\n            }\n        ],\n        function: {\n            pattern: /(\\|\\s*)@?[a-z_]\\w*|\\b[a-z_]\\w*(?=\\()/i,\n            lookbehind: !0\n        },\n        \"attr-name\": /\\b[a-z_]\\w*(?=\\s*=)/i,\n        boolean: /\\b(?:false|no|off|on|true|yes)\\b/,\n        punctuation: /[\\[\\](){}.,:`]|->/,\n        operator: [\n            /[+\\-*\\/%]|==?=?|[!<>]=?|&&|\\|\\|?/,\n            /\\bis\\s+(?:not\\s+)?(?:div|even|odd)(?:\\s+by)?\\b/,\n            /\\b(?:and|eq|gt?e|gt|lt?e|lt|mod|neq?|not|or)\\b/\n        ]\n    }, e.languages.smarty[\"embedded-php\"].inside.smarty.inside = e.languages.smarty, e.languages.smarty.string[0].inside.interpolation.inside.expression.inside = e.languages.smarty;\n    var n = /\"(?:\\\\.|[^\"\\\\\\r\\n])*\"|'(?:\\\\.|[^'\\\\\\r\\n])*'/, t = RegExp(\"\\\\{\\\\*[^]*?\\\\*\\\\}|\\\\{php\\\\}[^]*?\\\\{/php\\\\}|\" + \"\\\\{(?:[^{}\\\"']|<str>|\\\\{(?:[^{}\\\"']|<str>|\\\\{(?:[^{}\\\"']|<str>)*\\\\})*\\\\})*\\\\}\".replace(/<str>/g, function() {\n        return n.source;\n    }), \"g\");\n    e.hooks.add(\"before-tokenize\", function(n) {\n        var a = !1;\n        e.languages[\"markup-templating\"].buildPlaceholders(n, \"smarty\", t, function(e) {\n            return \"{/literal}\" === e && (a = !1), !a && (\"{literal}\" === e && (a = !0), !0);\n        });\n    }), e.hooks.add(\"after-tokenize\", function(n) {\n        e.languages[\"markup-templating\"].tokenizePlaceholders(n, \"smarty\");\n    });\n}(Prism);\n!function(e) {\n    var n = /\\b(?:abstype|and|andalso|as|case|datatype|do|else|end|eqtype|exception|fn|fun|functor|handle|if|in|include|infix|infixr|let|local|nonfix|of|op|open|orelse|raise|rec|sharing|sig|signature|struct|structure|then|type|val|where|while|with|withtype)\\b/i;\n    e.languages.sml = {\n        comment: /\\(\\*(?:[^*(]|\\*(?!\\))|\\((?!\\*)|\\(\\*(?:[^*(]|\\*(?!\\))|\\((?!\\*))*\\*\\))*\\*\\)/,\n        string: {\n            pattern: /#?\"(?:[^\"\\\\]|\\\\.)*\"/,\n            greedy: !0\n        },\n        \"class-name\": [\n            {\n                pattern: RegExp(\"((?:^|[^:]):\\\\s*)<TERMINAL>(?:\\\\s*(?:(?:\\\\*|->)\\\\s*<TERMINAL>|,\\\\s*<TERMINAL>(?:(?=<NOT-LAST>)|(?!<NOT-LAST>)\\\\s+<LONG-ID>)))*\".replace(/<NOT-LAST>/g, function() {\n                    return \"\\\\s*(?:[*,]|->)\";\n                }).replace(/<TERMINAL>/g, function() {\n                    return \"(?:'[\\\\w']*|<LONG-ID>|\\\\((?:[^()]|\\\\([^()]*\\\\))*\\\\)|\\\\{(?:[^{}]|\\\\{[^{}]*\\\\})*\\\\})(?:\\\\s+<LONG-ID>)*\";\n                }).replace(/<LONG-ID>/g, function() {\n                    return \"(?!<KEYWORD>)[a-z\\\\d_][\\\\w'.]*\";\n                }).replace(/<KEYWORD>/g, function() {\n                    return n.source;\n                }), \"i\"),\n                lookbehind: !0,\n                greedy: !0,\n                inside: null\n            },\n            {\n                pattern: /((?:^|[^\\w'])(?:datatype|exception|functor|signature|structure|type)\\s+)[a-z_][\\w'.]*/i,\n                lookbehind: !0\n            }\n        ],\n        function: {\n            pattern: /((?:^|[^\\w'])fun\\s+)[a-z_][\\w'.]*/i,\n            lookbehind: !0\n        },\n        keyword: n,\n        variable: {\n            pattern: /(^|[^\\w'])'[\\w']*/,\n            lookbehind: !0\n        },\n        number: /~?\\b(?:\\d+(?:\\.\\d+)?(?:e~?\\d+)?|0x[\\da-f]+)\\b/i,\n        word: {\n            pattern: /\\b0w(?:\\d+|x[\\da-f]+)\\b/i,\n            alias: \"constant\"\n        },\n        boolean: /\\b(?:false|true)\\b/i,\n        operator: /\\.\\.\\.|:[>=:]|=>?|->|[<>]=?|[!+\\-*/^#|@~]/,\n        punctuation: /[(){}\\[\\].:,;]/\n    }, e.languages.sml[\"class-name\"][0].inside = e.languages.sml, e.languages.smlnj = e.languages.sml;\n}(Prism);\nPrism.languages.solidity = Prism.languages.extend(\"clike\", {\n    \"class-name\": {\n        pattern: /(\\b(?:contract|enum|interface|library|new|struct|using)\\s+)(?!\\d)[\\w$]+/,\n        lookbehind: !0\n    },\n    keyword: /\\b(?:_|anonymous|as|assembly|assert|break|calldata|case|constant|constructor|continue|contract|default|delete|do|else|emit|enum|event|external|for|from|function|if|import|indexed|inherited|interface|internal|is|let|library|mapping|memory|modifier|new|payable|pragma|private|public|pure|require|returns?|revert|selfdestruct|solidity|storage|struct|suicide|switch|this|throw|using|var|view|while)\\b/,\n    operator: /=>|->|:=|=:|\\*\\*|\\+\\+|--|\\|\\||&&|<<=?|>>=?|[-+*/%^&|<>!=]=?|[~?]/\n}), Prism.languages.insertBefore(\"solidity\", \"keyword\", {\n    builtin: /\\b(?:address|bool|byte|u?int(?:8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256)?|string|bytes(?:[1-9]|[12]\\d|3[0-2])?)\\b/\n}), Prism.languages.insertBefore(\"solidity\", \"number\", {\n    version: {\n        pattern: /([<>]=?|\\^)\\d+\\.\\d+\\.\\d+\\b/,\n        lookbehind: !0,\n        alias: \"number\"\n    }\n}), Prism.languages.sol = Prism.languages.solidity;\n!function(n) {\n    var t = {\n        pattern: /\\{[\\da-f]{8}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{12}\\}/i,\n        alias: \"constant\",\n        inside: {\n            punctuation: /[{}]/\n        }\n    };\n    n.languages[\"solution-file\"] = {\n        comment: {\n            pattern: /#.*/,\n            greedy: !0\n        },\n        string: {\n            pattern: /\"[^\"\\r\\n]*\"|'[^'\\r\\n]*'/,\n            greedy: !0,\n            inside: {\n                guid: t\n            }\n        },\n        object: {\n            pattern: /^([ \\t]*)(?:([A-Z]\\w*)\\b(?=.*(?:\\r\\n?|\\n)(?:\\1[ \\t].*(?:\\r\\n?|\\n))*\\1End\\2(?=[ \\t]*$))|End[A-Z]\\w*(?=[ \\t]*$))/m,\n            lookbehind: !0,\n            greedy: !0,\n            alias: \"keyword\"\n        },\n        property: {\n            pattern: /^([ \\t]*)(?!\\s)[^\\r\\n\"#=()]*[^\\s\"#=()](?=\\s*=)/m,\n            lookbehind: !0,\n            inside: {\n                guid: t\n            }\n        },\n        guid: t,\n        number: /\\b\\d+(?:\\.\\d+)*\\b/,\n        boolean: /\\b(?:FALSE|TRUE)\\b/,\n        operator: /=/,\n        punctuation: /[(),]/\n    }, n.languages.sln = n.languages[\"solution-file\"];\n}(Prism);\n!function(e) {\n    var a = /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/, t = /\\b\\d+(?:\\.\\d+)?(?:[eE][+-]?\\d+)?\\b|\\b0x[\\dA-F]+\\b/;\n    e.languages.soy = {\n        comment: [\n            /\\/\\*[\\s\\S]*?\\*\\//,\n            {\n                pattern: /(\\s)\\/\\/.*/,\n                lookbehind: !0,\n                greedy: !0\n            }\n        ],\n        \"command-arg\": {\n            pattern: /(\\{+\\/?\\s*(?:alias|call|delcall|delpackage|deltemplate|namespace|template)\\s+)\\.?[\\w.]+/,\n            lookbehind: !0,\n            alias: \"string\",\n            inside: {\n                punctuation: /\\./\n            }\n        },\n        parameter: {\n            pattern: /(\\{+\\/?\\s*@?param\\??\\s+)\\.?[\\w.]+/,\n            lookbehind: !0,\n            alias: \"variable\"\n        },\n        keyword: [\n            {\n                pattern: /(\\{+\\/?[^\\S\\r\\n]*)(?:\\\\[nrt]|alias|call|case|css|default|delcall|delpackage|deltemplate|else(?:if)?|fallbackmsg|for(?:each)?|if(?:empty)?|lb|let|literal|msg|namespace|nil|@?param\\??|rb|sp|switch|template|xid)/,\n                lookbehind: !0\n            },\n            /\\b(?:any|as|attributes|bool|css|float|html|in|int|js|list|map|null|number|string|uri)\\b/\n        ],\n        delimiter: {\n            pattern: /^\\{+\\/?|\\/?\\}+$/,\n            alias: \"punctuation\"\n        },\n        property: /\\w+(?==)/,\n        variable: {\n            pattern: /\\$[^\\W\\d]\\w*(?:\\??(?:\\.\\w+|\\[[^\\]]+\\]))*/,\n            inside: {\n                string: {\n                    pattern: a,\n                    greedy: !0\n                },\n                number: t,\n                punctuation: /[\\[\\].?]/\n            }\n        },\n        string: {\n            pattern: a,\n            greedy: !0\n        },\n        function: [\n            /\\w+(?=\\()/,\n            {\n                pattern: /(\\|[^\\S\\r\\n]*)\\w+/,\n                lookbehind: !0\n            }\n        ],\n        boolean: /\\b(?:false|true)\\b/,\n        number: t,\n        operator: /\\?:?|<=?|>=?|==?|!=|[+*/%-]|\\b(?:and|not|or)\\b/,\n        punctuation: /[{}()\\[\\]|.,:]/\n    }, e.hooks.add(\"before-tokenize\", function(a) {\n        var t = !1;\n        e.languages[\"markup-templating\"].buildPlaceholders(a, \"soy\", /\\{\\{.+?\\}\\}|\\{.+?\\}|\\s\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\//g, function(e) {\n            return \"{/literal}\" === e && (t = !1), !t && (\"{literal}\" === e && (t = !0), !0);\n        });\n    }), e.hooks.add(\"after-tokenize\", function(a) {\n        e.languages[\"markup-templating\"].tokenizePlaceholders(a, \"soy\");\n    });\n}(Prism);\nPrism.languages.turtle = {\n    comment: {\n        pattern: /#.*/,\n        greedy: !0\n    },\n    \"multiline-string\": {\n        pattern: /\"\"\"(?:(?:\"\"?)?(?:[^\"\\\\]|\\\\.))*\"\"\"|'''(?:(?:''?)?(?:[^'\\\\]|\\\\.))*'''/,\n        greedy: !0,\n        alias: \"string\",\n        inside: {\n            comment: /#.*/\n        }\n    },\n    string: {\n        pattern: /\"(?:[^\\\\\"\\r\\n]|\\\\.)*\"|'(?:[^\\\\'\\r\\n]|\\\\.)*'/,\n        greedy: !0\n    },\n    url: {\n        pattern: /<(?:[^\\x00-\\x20<>\"{}|^`\\\\]|\\\\(?:u[\\da-fA-F]{4}|U[\\da-fA-F]{8}))*>/,\n        greedy: !0,\n        inside: {\n            punctuation: /[<>]/\n        }\n    },\n    function: {\n        pattern: /(?:(?![-.\\d\\xB7])[-.\\w\\xB7\\xC0-\\uFFFD]+)?:(?:(?![-.])(?:[-.:\\w\\xC0-\\uFFFD]|%[\\da-f]{2}|\\\\.)+)?/i,\n        inside: {\n            \"local-name\": {\n                pattern: /([^:]*:)[\\s\\S]+/,\n                lookbehind: !0\n            },\n            prefix: {\n                pattern: /[\\s\\S]+/,\n                inside: {\n                    punctuation: /:/\n                }\n            }\n        }\n    },\n    number: /[+-]?\\b\\d+(?:\\.\\d*)?(?:e[+-]?\\d+)?/i,\n    punctuation: /[{}.,;()[\\]]|\\^\\^/,\n    boolean: /\\b(?:false|true)\\b/,\n    keyword: [\n        /(?:\\ba|@prefix|@base)\\b|=/,\n        /\\b(?:base|graph|prefix)\\b/i\n    ],\n    tag: {\n        pattern: /@[a-z]+(?:-[a-z\\d]+)*/i,\n        inside: {\n            punctuation: /@/\n        }\n    }\n}, Prism.languages.trig = Prism.languages.turtle;\nPrism.languages.sparql = Prism.languages.extend(\"turtle\", {\n    boolean: /\\b(?:false|true)\\b/i,\n    variable: {\n        pattern: /[?$]\\w+/,\n        greedy: !0\n    }\n}), Prism.languages.insertBefore(\"sparql\", \"punctuation\", {\n    keyword: [\n        /\\b(?:A|ADD|ALL|AS|ASC|ASK|BNODE|BY|CLEAR|CONSTRUCT|COPY|CREATE|DATA|DEFAULT|DELETE|DESC|DESCRIBE|DISTINCT|DROP|EXISTS|FILTER|FROM|GROUP|HAVING|INSERT|INTO|LIMIT|LOAD|MINUS|MOVE|NAMED|NOT|NOW|OFFSET|OPTIONAL|ORDER|RAND|REDUCED|SELECT|SEPARATOR|SERVICE|SILENT|STRUUID|UNION|USING|UUID|VALUES|WHERE)\\b/i,\n        /\\b(?:ABS|AVG|BIND|BOUND|CEIL|COALESCE|CONCAT|CONTAINS|COUNT|DATATYPE|DAY|ENCODE_FOR_URI|FLOOR|GROUP_CONCAT|HOURS|IF|IRI|isBLANK|isIRI|isLITERAL|isNUMERIC|isURI|LANG|LANGMATCHES|LCASE|MAX|MD5|MIN|MINUTES|MONTH|REGEX|REPLACE|ROUND|sameTerm|SAMPLE|SECONDS|SHA1|SHA256|SHA384|SHA512|STR|STRAFTER|STRBEFORE|STRDT|STRENDS|STRLANG|STRLEN|STRSTARTS|SUBSTR|SUM|TIMEZONE|TZ|UCASE|URI|YEAR)\\b(?=\\s*\\()/i,\n        /\\b(?:BASE|GRAPH|PREFIX)\\b/i\n    ]\n}), Prism.languages.rq = Prism.languages.sparql;\nPrism.languages[\"splunk-spl\"] = {\n    comment: /`comment\\(\"(?:\\\\.|[^\\\\\"])*\"\\)`/,\n    string: {\n        pattern: /\"(?:\\\\.|[^\\\\\"])*\"/,\n        greedy: !0\n    },\n    keyword: /\\b(?:abstract|accum|addcoltotals|addinfo|addtotals|analyzefields|anomalies|anomalousvalue|anomalydetection|append|appendcols|appendcsv|appendlookup|appendpipe|arules|associate|audit|autoregress|bin|bucket|bucketdir|chart|cluster|cofilter|collect|concurrency|contingency|convert|correlate|datamodel|dbinspect|dedup|delete|delta|diff|erex|eval|eventcount|eventstats|extract|fieldformat|fields|fieldsummary|filldown|fillnull|findtypes|folderize|foreach|format|from|gauge|gentimes|geom|geomfilter|geostats|head|highlight|history|iconify|input|inputcsv|inputlookup|iplocation|join|kmeans|kv|kvform|loadjob|localize|localop|lookup|makecontinuous|makemv|makeresults|map|mcollect|metadata|metasearch|meventcollect|mstats|multikv|multisearch|mvcombine|mvexpand|nomv|outlier|outputcsv|outputlookup|outputtext|overlap|pivot|predict|rangemap|rare|regex|relevancy|reltime|rename|replace|rest|return|reverse|rex|rtorder|run|savedsearch|script|scrub|search|searchtxn|selfjoin|sendemail|set|setfields|sichart|sirare|sistats|sitimechart|sitop|sort|spath|stats|strcat|streamstats|table|tags|tail|timechart|timewrap|top|transaction|transpose|trendline|tscollect|tstats|typeahead|typelearner|typer|union|uniq|untable|where|x11|xmlkv|xmlunescape|xpath|xyseries)\\b/i,\n    \"operator-word\": {\n        pattern: /\\b(?:and|as|by|not|or|xor)\\b/i,\n        alias: \"operator\"\n    },\n    function: /\\b\\w+(?=\\s*\\()/,\n    property: /\\b\\w+(?=\\s*=(?!=))/,\n    date: {\n        pattern: /\\b\\d{1,2}\\/\\d{1,2}\\/\\d{1,4}(?:(?::\\d{1,2}){3})?\\b/,\n        alias: \"number\"\n    },\n    number: /\\b\\d+(?:\\.\\d+)?\\b/,\n    boolean: /\\b(?:f|false|t|true)\\b/i,\n    operator: /[<>=]=?|[-+*/%|]/,\n    punctuation: /[()[\\],]/\n};\nPrism.languages.sqf = Prism.languages.extend(\"clike\", {\n    string: {\n        pattern: /\"(?:(?:\"\")?[^\"])*\"(?!\")|'(?:[^'])*'/,\n        greedy: !0\n    },\n    keyword: /\\b(?:breakOut|breakTo|call|case|catch|default|do|echo|else|execFSM|execVM|exitWith|for|forEach|forEachMember|forEachMemberAgent|forEachMemberTeam|from|goto|if|nil|preprocessFile|preprocessFileLineNumbers|private|scopeName|spawn|step|switch|then|throw|to|try|while|with)\\b/i,\n    boolean: /\\b(?:false|true)\\b/i,\n    function: /\\b(?:abs|accTime|acos|action|actionIDs|actionKeys|actionKeysImages|actionKeysNames|actionKeysNamesArray|actionName|actionParams|activateAddons|activatedAddons|activateKey|add3DENConnection|add3DENEventHandler|add3DENLayer|addAction|addBackpack|addBackpackCargo|addBackpackCargoGlobal|addBackpackGlobal|addCamShake|addCuratorAddons|addCuratorCameraArea|addCuratorEditableObjects|addCuratorEditingArea|addCuratorPoints|addEditorObject|addEventHandler|addForce|addForceGeneratorRTD|addGoggles|addGroupIcon|addHandgunItem|addHeadgear|addItem|addItemCargo|addItemCargoGlobal|addItemPool|addItemToBackpack|addItemToUniform|addItemToVest|addLiveStats|addMagazine|addMagazineAmmoCargo|addMagazineCargo|addMagazineCargoGlobal|addMagazineGlobal|addMagazinePool|addMagazines|addMagazineTurret|addMenu|addMenuItem|addMissionEventHandler|addMPEventHandler|addMusicEventHandler|addOwnedMine|addPlayerScores|addPrimaryWeaponItem|addPublicVariableEventHandler|addRating|addResources|addScore|addScoreSide|addSecondaryWeaponItem|addSwitchableUnit|addTeamMember|addToRemainsCollector|addTorque|addUniform|addVehicle|addVest|addWaypoint|addWeapon|addWeaponCargo|addWeaponCargoGlobal|addWeaponGlobal|addWeaponItem|addWeaponPool|addWeaponTurret|admin|agent|agents|AGLToASL|aimedAtTarget|aimPos|airDensityCurveRTD|airDensityRTD|airplaneThrottle|airportSide|AISFinishHeal|alive|all3DENEntities|allAirports|allControls|allCurators|allCutLayers|allDead|allDeadMen|allDisplays|allGroups|allMapMarkers|allMines|allMissionObjects|allow3DMode|allowCrewInImmobile|allowCuratorLogicIgnoreAreas|allowDamage|allowDammage|allowFileOperations|allowFleeing|allowGetIn|allowSprint|allPlayers|allSimpleObjects|allSites|allTurrets|allUnits|allUnitsUAV|allVariables|ammo|ammoOnPylon|animate|animateBay|animateDoor|animatePylon|animateSource|animationNames|animationPhase|animationSourcePhase|animationState|append|apply|armoryPoints|arrayIntersect|asin|ASLToAGL|ASLToATL|assert|assignAsCargo|assignAsCargoIndex|assignAsCommander|assignAsDriver|assignAsGunner|assignAsTurret|assignCurator|assignedCargo|assignedCommander|assignedDriver|assignedGunner|assignedItems|assignedTarget|assignedTeam|assignedVehicle|assignedVehicleRole|assignItem|assignTeam|assignToAirport|atan|atan2|atg|ATLToASL|attachedObject|attachedObjects|attachedTo|attachObject|attachTo|attackEnabled|backpack|backpackCargo|backpackContainer|backpackItems|backpackMagazines|backpackSpaceFor|behaviour|benchmark|binocular|blufor|boundingBox|boundingBoxReal|boundingCenter|briefingName|buildingExit|buildingPos|buldozer_EnableRoadDiag|buldozer_IsEnabledRoadDiag|buldozer_LoadNewRoads|buldozer_reloadOperMap|buttonAction|buttonSetAction|cadetMode|callExtension|camCommand|camCommit|camCommitPrepared|camCommitted|camConstuctionSetParams|camCreate|camDestroy|cameraEffect|cameraEffectEnableHUD|cameraInterest|cameraOn|cameraView|campaignConfigFile|camPreload|camPreloaded|camPrepareBank|camPrepareDir|camPrepareDive|camPrepareFocus|camPrepareFov|camPrepareFovRange|camPreparePos|camPrepareRelPos|camPrepareTarget|camSetBank|camSetDir|camSetDive|camSetFocus|camSetFov|camSetFovRange|camSetPos|camSetRelPos|camSetTarget|camTarget|camUseNVG|canAdd|canAddItemToBackpack|canAddItemToUniform|canAddItemToVest|cancelSimpleTaskDestination|canFire|canMove|canSlingLoad|canStand|canSuspend|canTriggerDynamicSimulation|canUnloadInCombat|canVehicleCargo|captive|captiveNum|cbChecked|cbSetChecked|ceil|channelEnabled|cheatsEnabled|checkAIFeature|checkVisibility|civilian|className|clear3DENAttribute|clear3DENInventory|clearAllItemsFromBackpack|clearBackpackCargo|clearBackpackCargoGlobal|clearForcesRTD|clearGroupIcons|clearItemCargo|clearItemCargoGlobal|clearItemPool|clearMagazineCargo|clearMagazineCargoGlobal|clearMagazinePool|clearOverlay|clearRadio|clearVehicleInit|clearWeaponCargo|clearWeaponCargoGlobal|clearWeaponPool|clientOwner|closeDialog|closeDisplay|closeOverlay|collapseObjectTree|collect3DENHistory|collectiveRTD|combatMode|commandArtilleryFire|commandChat|commander|commandFire|commandFollow|commandFSM|commandGetOut|commandingMenu|commandMove|commandRadio|commandStop|commandSuppressiveFire|commandTarget|commandWatch|comment|commitOverlay|compile|compileFinal|completedFSM|composeText|configClasses|configFile|configHierarchy|configName|configNull|configProperties|configSourceAddonList|configSourceMod|configSourceModList|confirmSensorTarget|connectTerminalToUAV|controlNull|controlsGroupCtrl|copyFromClipboard|copyToClipboard|copyWaypoints|cos|count|countEnemy|countFriendly|countSide|countType|countUnknown|create3DENComposition|create3DENEntity|createAgent|createCenter|createDialog|createDiaryLink|createDiaryRecord|createDiarySubject|createDisplay|createGearDialog|createGroup|createGuardedPoint|createLocation|createMarker|createMarkerLocal|createMenu|createMine|createMissionDisplay|createMPCampaignDisplay|createSimpleObject|createSimpleTask|createSite|createSoundSource|createTask|createTeam|createTrigger|createUnit|createVehicle|createVehicleCrew|createVehicleLocal|crew|ctAddHeader|ctAddRow|ctClear|ctCurSel|ctData|ctFindHeaderRows|ctFindRowHeader|ctHeaderControls|ctHeaderCount|ctRemoveHeaders|ctRemoveRows|ctrlActivate|ctrlAddEventHandler|ctrlAngle|ctrlAutoScrollDelay|ctrlAutoScrollRewind|ctrlAutoScrollSpeed|ctrlChecked|ctrlClassName|ctrlCommit|ctrlCommitted|ctrlCreate|ctrlDelete|ctrlEnable|ctrlEnabled|ctrlFade|ctrlHTMLLoaded|ctrlIDC|ctrlIDD|ctrlMapAnimAdd|ctrlMapAnimClear|ctrlMapAnimCommit|ctrlMapAnimDone|ctrlMapCursor|ctrlMapMouseOver|ctrlMapScale|ctrlMapScreenToWorld|ctrlMapWorldToScreen|ctrlModel|ctrlModelDirAndUp|ctrlModelScale|ctrlParent|ctrlParentControlsGroup|ctrlPosition|ctrlRemoveAllEventHandlers|ctrlRemoveEventHandler|ctrlScale|ctrlSetActiveColor|ctrlSetAngle|ctrlSetAutoScrollDelay|ctrlSetAutoScrollRewind|ctrlSetAutoScrollSpeed|ctrlSetBackgroundColor|ctrlSetChecked|ctrlSetDisabledColor|ctrlSetEventHandler|ctrlSetFade|ctrlSetFocus|ctrlSetFont|ctrlSetFontH1|ctrlSetFontH1B|ctrlSetFontH2|ctrlSetFontH2B|ctrlSetFontH3|ctrlSetFontH3B|ctrlSetFontH4|ctrlSetFontH4B|ctrlSetFontH5|ctrlSetFontH5B|ctrlSetFontH6|ctrlSetFontH6B|ctrlSetFontHeight|ctrlSetFontHeightH1|ctrlSetFontHeightH2|ctrlSetFontHeightH3|ctrlSetFontHeightH4|ctrlSetFontHeightH5|ctrlSetFontHeightH6|ctrlSetFontHeightSecondary|ctrlSetFontP|ctrlSetFontPB|ctrlSetFontSecondary|ctrlSetForegroundColor|ctrlSetModel|ctrlSetModelDirAndUp|ctrlSetModelScale|ctrlSetPixelPrecision|ctrlSetPosition|ctrlSetScale|ctrlSetStructuredText|ctrlSetText|ctrlSetTextColor|ctrlSetTextColorSecondary|ctrlSetTextSecondary|ctrlSetTooltip|ctrlSetTooltipColorBox|ctrlSetTooltipColorShade|ctrlSetTooltipColorText|ctrlShow|ctrlShown|ctrlText|ctrlTextHeight|ctrlTextSecondary|ctrlTextWidth|ctrlType|ctrlVisible|ctRowControls|ctRowCount|ctSetCurSel|ctSetData|ctSetHeaderTemplate|ctSetRowTemplate|ctSetValue|ctValue|curatorAddons|curatorCamera|curatorCameraArea|curatorCameraAreaCeiling|curatorCoef|curatorEditableObjects|curatorEditingArea|curatorEditingAreaType|curatorMouseOver|curatorPoints|curatorRegisteredObjects|curatorSelected|curatorWaypointCost|current3DENOperation|currentChannel|currentCommand|currentMagazine|currentMagazineDetail|currentMagazineDetailTurret|currentMagazineTurret|currentMuzzle|currentNamespace|currentTask|currentTasks|currentThrowable|currentVisionMode|currentWaypoint|currentWeapon|currentWeaponMode|currentWeaponTurret|currentZeroing|cursorObject|cursorTarget|customChat|customRadio|cutFadeOut|cutObj|cutRsc|cutText|damage|date|dateToNumber|daytime|deActivateKey|debriefingText|debugFSM|debugLog|deg|delete3DENEntities|deleteAt|deleteCenter|deleteCollection|deleteEditorObject|deleteGroup|deleteGroupWhenEmpty|deleteIdentity|deleteLocation|deleteMarker|deleteMarkerLocal|deleteRange|deleteResources|deleteSite|deleteStatus|deleteTeam|deleteVehicle|deleteVehicleCrew|deleteWaypoint|detach|detectedMines|diag_activeMissionFSMs|diag_activeScripts|diag_activeSQFScripts|diag_activeSQSScripts|diag_captureFrame|diag_captureFrameToFile|diag_captureSlowFrame|diag_codePerformance|diag_drawMode|diag_dynamicSimulationEnd|diag_enable|diag_enabled|diag_fps|diag_fpsMin|diag_frameNo|diag_lightNewLoad|diag_list|diag_log|diag_logSlowFrame|diag_mergeConfigFile|diag_recordTurretLimits|diag_setLightNew|diag_tickTime|diag_toggle|dialog|diarySubjectExists|didJIP|didJIPOwner|difficulty|difficultyEnabled|difficultyEnabledRTD|difficultyOption|direction|directSay|disableAI|disableCollisionWith|disableConversation|disableDebriefingStats|disableMapIndicators|disableNVGEquipment|disableRemoteSensors|disableSerialization|disableTIEquipment|disableUAVConnectability|disableUserInput|displayAddEventHandler|displayCtrl|displayNull|displayParent|displayRemoveAllEventHandlers|displayRemoveEventHandler|displaySetEventHandler|dissolveTeam|distance|distance2D|distanceSqr|distributionRegion|do3DENAction|doArtilleryFire|doFire|doFollow|doFSM|doGetOut|doMove|doorPhase|doStop|doSuppressiveFire|doTarget|doWatch|drawArrow|drawEllipse|drawIcon|drawIcon3D|drawLine|drawLine3D|drawLink|drawLocation|drawPolygon|drawRectangle|drawTriangle|driver|drop|dynamicSimulationDistance|dynamicSimulationDistanceCoef|dynamicSimulationEnabled|dynamicSimulationSystemEnabled|east|edit3DENMissionAttributes|editObject|editorSetEventHandler|effectiveCommander|emptyPositions|enableAI|enableAIFeature|enableAimPrecision|enableAttack|enableAudioFeature|enableAutoStartUpRTD|enableAutoTrimRTD|enableCamShake|enableCaustics|enableChannel|enableCollisionWith|enableCopilot|enableDebriefingStats|enableDiagLegend|enableDynamicSimulation|enableDynamicSimulationSystem|enableEndDialog|enableEngineArtillery|enableEnvironment|enableFatigue|enableGunLights|enableInfoPanelComponent|enableIRLasers|enableMimics|enablePersonTurret|enableRadio|enableReload|enableRopeAttach|enableSatNormalOnDetail|enableSaving|enableSentences|enableSimulation|enableSimulationGlobal|enableStamina|enableStressDamage|enableTeamSwitch|enableTraffic|enableUAVConnectability|enableUAVWaypoints|enableVehicleCargo|enableVehicleSensor|enableWeaponDisassembly|endl|endLoadingScreen|endMission|engineOn|enginesIsOnRTD|enginesPowerRTD|enginesRpmRTD|enginesTorqueRTD|entities|environmentEnabled|estimatedEndServerTime|estimatedTimeLeft|evalObjectArgument|everyBackpack|everyContainer|exec|execEditorScript|exp|expectedDestination|exportJIPMessages|eyeDirection|eyePos|face|faction|fadeMusic|fadeRadio|fadeSound|fadeSpeech|failMission|fillWeaponsFromPool|find|findCover|findDisplay|findEditorObject|findEmptyPosition|findEmptyPositionReady|findIf|findNearestEnemy|finishMissionInit|finite|fire|fireAtTarget|firstBackpack|flag|flagAnimationPhase|flagOwner|flagSide|flagTexture|fleeing|floor|flyInHeight|flyInHeightASL|fog|fogForecast|fogParams|forceAddUniform|forceAtPositionRTD|forcedMap|forceEnd|forceFlagTexture|forceFollowRoad|forceGeneratorRTD|forceMap|forceRespawn|forceSpeed|forceWalk|forceWeaponFire|forceWeatherChange|forgetTarget|format|formation|formationDirection|formationLeader|formationMembers|formationPosition|formationTask|formatText|formLeader|freeLook|fromEditor|fuel|fullCrew|gearIDCAmmoCount|gearSlotAmmoCount|gearSlotData|get3DENActionState|get3DENAttribute|get3DENCamera|get3DENConnections|get3DENEntity|get3DENEntityID|get3DENGrid|get3DENIconsVisible|get3DENLayerEntities|get3DENLinesVisible|get3DENMissionAttribute|get3DENMouseOver|get3DENSelected|getAimingCoef|getAllEnvSoundControllers|getAllHitPointsDamage|getAllOwnedMines|getAllSoundControllers|getAmmoCargo|getAnimAimPrecision|getAnimSpeedCoef|getArray|getArtilleryAmmo|getArtilleryComputerSettings|getArtilleryETA|getAssignedCuratorLogic|getAssignedCuratorUnit|getBackpackCargo|getBleedingRemaining|getBurningValue|getCameraViewDirection|getCargoIndex|getCenterOfMass|getClientState|getClientStateNumber|getCompatiblePylonMagazines|getConnectedUAV|getContainerMaxLoad|getCursorObjectParams|getCustomAimCoef|getDammage|getDescription|getDir|getDirVisual|getDLCAssetsUsage|getDLCAssetsUsageByName|getDLCs|getDLCUsageTime|getEditorCamera|getEditorMode|getEditorObjectScope|getElevationOffset|getEngineTargetRpmRTD|getEnvSoundController|getFatigue|getFieldManualStartPage|getForcedFlagTexture|getFriend|getFSMVariable|getFuelCargo|getGroupIcon|getGroupIconParams|getGroupIcons|getHideFrom|getHit|getHitIndex|getHitPointDamage|getItemCargo|getMagazineCargo|getMarkerColor|getMarkerPos|getMarkerSize|getMarkerType|getMass|getMissionConfig|getMissionConfigValue|getMissionDLCs|getMissionLayerEntities|getMissionLayers|getModelInfo|getMousePosition|getMusicPlayedTime|getNumber|getObjectArgument|getObjectChildren|getObjectDLC|getObjectMaterials|getObjectProxy|getObjectTextures|getObjectType|getObjectViewDistance|getOxygenRemaining|getPersonUsedDLCs|getPilotCameraDirection|getPilotCameraPosition|getPilotCameraRotation|getPilotCameraTarget|getPlateNumber|getPlayerChannel|getPlayerScores|getPlayerUID|getPlayerUIDOld|getPos|getPosASL|getPosASLVisual|getPosASLW|getPosATL|getPosATLVisual|getPosVisual|getPosWorld|getPylonMagazines|getRelDir|getRelPos|getRemoteSensorsDisabled|getRepairCargo|getResolution|getRotorBrakeRTD|getShadowDistance|getShotParents|getSlingLoad|getSoundController|getSoundControllerResult|getSpeed|getStamina|getStatValue|getSuppression|getTerrainGrid|getTerrainHeightASL|getText|getTotalDLCUsageTime|getTrimOffsetRTD|getUnitLoadout|getUnitTrait|getUserMFDText|getUserMFDValue|getVariable|getVehicleCargo|getWeaponCargo|getWeaponSway|getWingsOrientationRTD|getWingsPositionRTD|getWPPos|glanceAt|globalChat|globalRadio|goggles|group|groupChat|groupFromNetId|groupIconSelectable|groupIconsVisible|groupId|groupOwner|groupRadio|groupSelectedUnits|groupSelectUnit|grpNull|gunner|gusts|halt|handgunItems|handgunMagazine|handgunWeapon|handsHit|hasInterface|hasPilotCamera|hasWeapon|hcAllGroups|hcGroupParams|hcLeader|hcRemoveAllGroups|hcRemoveGroup|hcSelected|hcSelectGroup|hcSetGroup|hcShowBar|hcShownBar|headgear|hideBody|hideObject|hideObjectGlobal|hideSelection|hint|hintC|hintCadet|hintSilent|hmd|hostMission|htmlLoad|HUDMovementLevels|humidity|image|importAllGroups|importance|in|inArea|inAreaArray|incapacitatedState|independent|inflame|inflamed|infoPanel|infoPanelComponentEnabled|infoPanelComponents|infoPanels|inGameUISetEventHandler|inheritsFrom|initAmbientLife|inPolygon|inputAction|inRangeOfArtillery|insertEditorObject|intersect|is3DEN|is3DENMultiplayer|isAbleToBreathe|isAgent|isAimPrecisionEnabled|isArray|isAutoHoverOn|isAutonomous|isAutoStartUpEnabledRTD|isAutotest|isAutoTrimOnRTD|isBleeding|isBurning|isClass|isCollisionLightOn|isCopilotEnabled|isDamageAllowed|isDedicated|isDLCAvailable|isEngineOn|isEqualTo|isEqualType|isEqualTypeAll|isEqualTypeAny|isEqualTypeArray|isEqualTypeParams|isFilePatchingEnabled|isFlashlightOn|isFlatEmpty|isForcedWalk|isFormationLeader|isGroupDeletedWhenEmpty|isHidden|isInRemainsCollector|isInstructorFigureEnabled|isIRLaserOn|isKeyActive|isKindOf|isLaserOn|isLightOn|isLocalized|isManualFire|isMarkedForCollection|isMultiplayer|isMultiplayerSolo|isNil|isNull|isNumber|isObjectHidden|isObjectRTD|isOnRoad|isPipEnabled|isPlayer|isRealTime|isRemoteExecuted|isRemoteExecutedJIP|isServer|isShowing3DIcons|isSimpleObject|isSprintAllowed|isStaminaEnabled|isSteamMission|isStreamFriendlyUIEnabled|isStressDamageEnabled|isText|isTouchingGround|isTurnedOut|isTutHintsEnabled|isUAVConnectable|isUAVConnected|isUIContext|isUniformAllowed|isVehicleCargo|isVehicleRadarOn|isVehicleSensorEnabled|isWalking|isWeaponDeployed|isWeaponRested|itemCargo|items|itemsWithMagazines|join|joinAs|joinAsSilent|joinSilent|joinString|kbAddDatabase|kbAddDatabaseTargets|kbAddTopic|kbHasTopic|kbReact|kbRemoveTopic|kbTell|kbWasSaid|keyImage|keyName|knowsAbout|land|landAt|landResult|language|laserTarget|lbAdd|lbClear|lbColor|lbColorRight|lbCurSel|lbData|lbDelete|lbIsSelected|lbPicture|lbPictureRight|lbSelection|lbSetColor|lbSetColorRight|lbSetCurSel|lbSetData|lbSetPicture|lbSetPictureColor|lbSetPictureColorDisabled|lbSetPictureColorSelected|lbSetPictureRight|lbSetPictureRightColor|lbSetPictureRightColorDisabled|lbSetPictureRightColorSelected|lbSetSelectColor|lbSetSelectColorRight|lbSetSelected|lbSetText|lbSetTextRight|lbSetTooltip|lbSetValue|lbSize|lbSort|lbSortByValue|lbText|lbTextRight|lbValue|leader|leaderboardDeInit|leaderboardGetRows|leaderboardInit|leaderboardRequestRowsFriends|leaderboardRequestRowsGlobal|leaderboardRequestRowsGlobalAroundUser|leaderboardsRequestUploadScore|leaderboardsRequestUploadScoreKeepBest|leaderboardState|leaveVehicle|libraryCredits|libraryDisclaimers|lifeState|lightAttachObject|lightDetachObject|lightIsOn|lightnings|limitSpeed|linearConversion|lineBreak|lineIntersects|lineIntersectsObjs|lineIntersectsSurfaces|lineIntersectsWith|linkItem|list|listObjects|listRemoteTargets|listVehicleSensors|ln|lnbAddArray|lnbAddColumn|lnbAddRow|lnbClear|lnbColor|lnbColorRight|lnbCurSelRow|lnbData|lnbDeleteColumn|lnbDeleteRow|lnbGetColumnsPosition|lnbPicture|lnbPictureRight|lnbSetColor|lnbSetColorRight|lnbSetColumnsPos|lnbSetCurSelRow|lnbSetData|lnbSetPicture|lnbSetPictureColor|lnbSetPictureColorRight|lnbSetPictureColorSelected|lnbSetPictureColorSelectedRight|lnbSetPictureRight|lnbSetText|lnbSetTextRight|lnbSetValue|lnbSize|lnbSort|lnbSortByValue|lnbText|lnbTextRight|lnbValue|load|loadAbs|loadBackpack|loadFile|loadGame|loadIdentity|loadMagazine|loadOverlay|loadStatus|loadUniform|loadVest|local|localize|locationNull|locationPosition|lock|lockCameraTo|lockCargo|lockDriver|locked|lockedCargo|lockedDriver|lockedTurret|lockIdentity|lockTurret|lockWP|log|logEntities|logNetwork|logNetworkTerminate|lookAt|lookAtPos|magazineCargo|magazines|magazinesAllTurrets|magazinesAmmo|magazinesAmmoCargo|magazinesAmmoFull|magazinesDetail|magazinesDetailBackpack|magazinesDetailUniform|magazinesDetailVest|magazinesTurret|magazineTurretAmmo|mapAnimAdd|mapAnimClear|mapAnimCommit|mapAnimDone|mapCenterOnCamera|mapGridPosition|markAsFinishedOnSteam|markerAlpha|markerBrush|markerColor|markerDir|markerPos|markerShape|markerSize|markerText|markerType|max|members|menuAction|menuAdd|menuChecked|menuClear|menuCollapse|menuData|menuDelete|menuEnable|menuEnabled|menuExpand|menuHover|menuPicture|menuSetAction|menuSetCheck|menuSetData|menuSetPicture|menuSetValue|menuShortcut|menuShortcutText|menuSize|menuSort|menuText|menuURL|menuValue|min|mineActive|mineDetectedBy|missionConfigFile|missionDifficulty|missionName|missionNamespace|missionStart|missionVersion|modelToWorld|modelToWorldVisual|modelToWorldVisualWorld|modelToWorldWorld|modParams|moonIntensity|moonPhase|morale|move|move3DENCamera|moveInAny|moveInCargo|moveInCommander|moveInDriver|moveInGunner|moveInTurret|moveObjectToEnd|moveOut|moveTime|moveTo|moveToCompleted|moveToFailed|musicVolume|name|nameSound|nearEntities|nearestBuilding|nearestLocation|nearestLocations|nearestLocationWithDubbing|nearestObject|nearestObjects|nearestTerrainObjects|nearObjects|nearObjectsReady|nearRoads|nearSupplies|nearTargets|needReload|netId|netObjNull|newOverlay|nextMenuItemIndex|nextWeatherChange|nMenuItems|numberOfEnginesRTD|numberToDate|objectCurators|objectFromNetId|objectParent|objNull|objStatus|onBriefingGear|onBriefingGroup|onBriefingNotes|onBriefingPlan|onBriefingTeamSwitch|onCommandModeChanged|onDoubleClick|onEachFrame|onGroupIconClick|onGroupIconOverEnter|onGroupIconOverLeave|onHCGroupSelectionChanged|onMapSingleClick|onPlayerConnected|onPlayerDisconnected|onPreloadFinished|onPreloadStarted|onShowNewObject|onTeamSwitch|openCuratorInterface|openDLCPage|openDSInterface|openMap|openSteamApp|openYoutubeVideo|opfor|orderGetIn|overcast|overcastForecast|owner|param|params|parseNumber|parseSimpleArray|parseText|parsingNamespace|particlesQuality|pi|pickWeaponPool|pitch|pixelGrid|pixelGridBase|pixelGridNoUIScale|pixelH|pixelW|playableSlotsNumber|playableUnits|playAction|playActionNow|player|playerRespawnTime|playerSide|playersNumber|playGesture|playMission|playMove|playMoveNow|playMusic|playScriptedMission|playSound|playSound3D|position|positionCameraToWorld|posScreenToWorld|posWorldToScreen|ppEffectAdjust|ppEffectCommit|ppEffectCommitted|ppEffectCreate|ppEffectDestroy|ppEffectEnable|ppEffectEnabled|ppEffectForceInNVG|precision|preloadCamera|preloadObject|preloadSound|preloadTitleObj|preloadTitleRsc|primaryWeapon|primaryWeaponItems|primaryWeaponMagazine|priority|processDiaryLink|processInitCommands|productVersion|profileName|profileNamespace|profileNameSteam|progressLoadingScreen|progressPosition|progressSetPosition|publicVariable|publicVariableClient|publicVariableServer|pushBack|pushBackUnique|putWeaponPool|queryItemsPool|queryMagazinePool|queryWeaponPool|rad|radioChannelAdd|radioChannelCreate|radioChannelRemove|radioChannelSetCallSign|radioChannelSetLabel|radioVolume|rain|rainbow|random|rank|rankId|rating|rectangular|registeredTasks|registerTask|reload|reloadEnabled|remoteControl|remoteExec|remoteExecCall|remoteExecutedOwner|remove3DENConnection|remove3DENEventHandler|remove3DENLayer|removeAction|removeAll3DENEventHandlers|removeAllActions|removeAllAssignedItems|removeAllContainers|removeAllCuratorAddons|removeAllCuratorCameraAreas|removeAllCuratorEditingAreas|removeAllEventHandlers|removeAllHandgunItems|removeAllItems|removeAllItemsWithMagazines|removeAllMissionEventHandlers|removeAllMPEventHandlers|removeAllMusicEventHandlers|removeAllOwnedMines|removeAllPrimaryWeaponItems|removeAllWeapons|removeBackpack|removeBackpackGlobal|removeCuratorAddons|removeCuratorCameraArea|removeCuratorEditableObjects|removeCuratorEditingArea|removeDrawIcon|removeDrawLinks|removeEventHandler|removeFromRemainsCollector|removeGoggles|removeGroupIcon|removeHandgunItem|removeHeadgear|removeItem|removeItemFromBackpack|removeItemFromUniform|removeItemFromVest|removeItems|removeMagazine|removeMagazineGlobal|removeMagazines|removeMagazinesTurret|removeMagazineTurret|removeMenuItem|removeMissionEventHandler|removeMPEventHandler|removeMusicEventHandler|removeOwnedMine|removePrimaryWeaponItem|removeSecondaryWeaponItem|removeSimpleTask|removeSwitchableUnit|removeTeamMember|removeUniform|removeVest|removeWeapon|removeWeaponAttachmentCargo|removeWeaponCargo|removeWeaponGlobal|removeWeaponTurret|reportRemoteTarget|requiredVersion|resetCamShake|resetSubgroupDirection|resistance|resize|resources|respawnVehicle|restartEditorCamera|reveal|revealMine|reverse|reversedMouseY|roadAt|roadsConnectedTo|roleDescription|ropeAttachedObjects|ropeAttachedTo|ropeAttachEnabled|ropeAttachTo|ropeCreate|ropeCut|ropeDestroy|ropeDetach|ropeEndPosition|ropeLength|ropes|ropeUnwind|ropeUnwound|rotorsForcesRTD|rotorsRpmRTD|round|runInitScript|safeZoneH|safeZoneW|safeZoneWAbs|safeZoneX|safeZoneXAbs|safeZoneY|save3DENInventory|saveGame|saveIdentity|saveJoysticks|saveOverlay|saveProfileNamespace|saveStatus|saveVar|savingEnabled|say|say2D|say3D|score|scoreSide|screenshot|screenToWorld|scriptDone|scriptName|scriptNull|scudState|secondaryWeapon|secondaryWeaponItems|secondaryWeaponMagazine|select|selectBestPlaces|selectDiarySubject|selectedEditorObjects|selectEditorObject|selectionNames|selectionPosition|selectLeader|selectMax|selectMin|selectNoPlayer|selectPlayer|selectRandom|selectRandomWeighted|selectWeapon|selectWeaponTurret|sendAUMessage|sendSimpleCommand|sendTask|sendTaskResult|sendUDPMessage|serverCommand|serverCommandAvailable|serverCommandExecutable|serverName|serverTime|set|set3DENAttribute|set3DENAttributes|set3DENGrid|set3DENIconsVisible|set3DENLayer|set3DENLinesVisible|set3DENLogicType|set3DENMissionAttribute|set3DENMissionAttributes|set3DENModelsVisible|set3DENObjectType|set3DENSelected|setAccTime|setActualCollectiveRTD|setAirplaneThrottle|setAirportSide|setAmmo|setAmmoCargo|setAmmoOnPylon|setAnimSpeedCoef|setAperture|setApertureNew|setArmoryPoints|setAttributes|setAutonomous|setBehaviour|setBleedingRemaining|setBrakesRTD|setCameraInterest|setCamShakeDefParams|setCamShakeParams|setCamUseTI|setCaptive|setCenterOfMass|setCollisionLight|setCombatMode|setCompassOscillation|setConvoySeparation|setCuratorCameraAreaCeiling|setCuratorCoef|setCuratorEditingAreaType|setCuratorWaypointCost|setCurrentChannel|setCurrentTask|setCurrentWaypoint|setCustomAimCoef|setCustomWeightRTD|setDamage|setDammage|setDate|setDebriefingText|setDefaultCamera|setDestination|setDetailMapBlendPars|setDir|setDirection|setDrawIcon|setDriveOnPath|setDropInterval|setDynamicSimulationDistance|setDynamicSimulationDistanceCoef|setEditorMode|setEditorObjectScope|setEffectCondition|setEngineRpmRTD|setFace|setFaceAnimation|setFatigue|setFeatureType|setFlagAnimationPhase|setFlagOwner|setFlagSide|setFlagTexture|setFog|setForceGeneratorRTD|setFormation|setFormationTask|setFormDir|setFriend|setFromEditor|setFSMVariable|setFuel|setFuelCargo|setGroupIcon|setGroupIconParams|setGroupIconsSelectable|setGroupIconsVisible|setGroupId|setGroupIdGlobal|setGroupOwner|setGusts|setHideBehind|setHit|setHitIndex|setHitPointDamage|setHorizonParallaxCoef|setHUDMovementLevels|setIdentity|setImportance|setInfoPanel|setLeader|setLightAmbient|setLightAttenuation|setLightBrightness|setLightColor|setLightDayLight|setLightFlareMaxDistance|setLightFlareSize|setLightIntensity|setLightnings|setLightUseFlare|setLocalWindParams|setMagazineTurretAmmo|setMarkerAlpha|setMarkerAlphaLocal|setMarkerBrush|setMarkerBrushLocal|setMarkerColor|setMarkerColorLocal|setMarkerDir|setMarkerDirLocal|setMarkerPos|setMarkerPosLocal|setMarkerShape|setMarkerShapeLocal|setMarkerSize|setMarkerSizeLocal|setMarkerText|setMarkerTextLocal|setMarkerType|setMarkerTypeLocal|setMass|setMimic|setMousePosition|setMusicEffect|setMusicEventHandler|setName|setNameSound|setObjectArguments|setObjectMaterial|setObjectMaterialGlobal|setObjectProxy|setObjectTexture|setObjectTextureGlobal|setObjectViewDistance|setOvercast|setOwner|setOxygenRemaining|setParticleCircle|setParticleClass|setParticleFire|setParticleParams|setParticleRandom|setPilotCameraDirection|setPilotCameraRotation|setPilotCameraTarget|setPilotLight|setPiPEffect|setPitch|setPlateNumber|setPlayable|setPlayerRespawnTime|setPos|setPosASL|setPosASL2|setPosASLW|setPosATL|setPosition|setPosWorld|setPylonLoadOut|setPylonsPriority|setRadioMsg|setRain|setRainbow|setRandomLip|setRank|setRectangular|setRepairCargo|setRotorBrakeRTD|setShadowDistance|setShotParents|setSide|setSimpleTaskAlwaysVisible|setSimpleTaskCustomData|setSimpleTaskDescription|setSimpleTaskDestination|setSimpleTaskTarget|setSimpleTaskType|setSimulWeatherLayers|setSize|setSkill|setSlingLoad|setSoundEffect|setSpeaker|setSpeech|setSpeedMode|setStamina|setStaminaScheme|setStatValue|setSuppression|setSystemOfUnits|setTargetAge|setTaskMarkerOffset|setTaskResult|setTaskState|setTerrainGrid|setText|setTimeMultiplier|setTitleEffect|setToneMapping|setToneMappingParams|setTrafficDensity|setTrafficDistance|setTrafficGap|setTrafficSpeed|setTriggerActivation|setTriggerArea|setTriggerStatements|setTriggerText|setTriggerTimeout|setTriggerType|setType|setUnconscious|setUnitAbility|setUnitLoadout|setUnitPos|setUnitPosWeak|setUnitRank|setUnitRecoilCoefficient|setUnitTrait|setUnloadInCombat|setUserActionText|setUserMFDText|setUserMFDValue|setVariable|setVectorDir|setVectorDirAndUp|setVectorUp|setVehicleAmmo|setVehicleAmmoDef|setVehicleArmor|setVehicleCargo|setVehicleId|setVehicleInit|setVehicleLock|setVehiclePosition|setVehicleRadar|setVehicleReceiveRemoteTargets|setVehicleReportOwnPosition|setVehicleReportRemoteTargets|setVehicleTIPars|setVehicleVarName|setVelocity|setVelocityModelSpace|setVelocityTransformation|setViewDistance|setVisibleIfTreeCollapsed|setWantedRpmRTD|setWaves|setWaypointBehaviour|setWaypointCombatMode|setWaypointCompletionRadius|setWaypointDescription|setWaypointForceBehaviour|setWaypointFormation|setWaypointHousePosition|setWaypointLoiterRadius|setWaypointLoiterType|setWaypointName|setWaypointPosition|setWaypointScript|setWaypointSpeed|setWaypointStatements|setWaypointTimeout|setWaypointType|setWaypointVisible|setWeaponReloadingTime|setWind|setWindDir|setWindForce|setWindStr|setWingForceScaleRTD|setWPPos|show3DIcons|showChat|showCinemaBorder|showCommandingMenu|showCompass|showCuratorCompass|showGPS|showHUD|showLegend|showMap|shownArtilleryComputer|shownChat|shownCompass|shownCuratorCompass|showNewEditorObject|shownGPS|shownHUD|shownMap|shownPad|shownRadio|shownScoretable|shownUAVFeed|shownWarrant|shownWatch|showPad|showRadio|showScoretable|showSubtitles|showUAVFeed|showWarrant|showWatch|showWaypoint|showWaypoints|side|sideAmbientLife|sideChat|sideEmpty|sideEnemy|sideFriendly|sideLogic|sideRadio|sideUnknown|simpleTasks|simulationEnabled|simulCloudDensity|simulCloudOcclusion|simulInClouds|simulWeatherSync|sin|size|sizeOf|skill|skillFinal|skipTime|sleep|sliderPosition|sliderRange|sliderSetPosition|sliderSetRange|sliderSetSpeed|sliderSpeed|slingLoadAssistantShown|soldierMagazines|someAmmo|sort|soundVolume|speaker|speed|speedMode|splitString|sqrt|squadParams|stance|startLoadingScreen|stop|stopEngineRTD|stopped|str|sunOrMoon|supportInfo|suppressFor|surfaceIsWater|surfaceNormal|surfaceType|swimInDepth|switchableUnits|switchAction|switchCamera|switchGesture|switchLight|switchMove|synchronizedObjects|synchronizedTriggers|synchronizedWaypoints|synchronizeObjectsAdd|synchronizeObjectsRemove|synchronizeTrigger|synchronizeWaypoint|systemChat|systemOfUnits|tan|targetKnowledge|targets|targetsAggregate|targetsQuery|taskAlwaysVisible|taskChildren|taskCompleted|taskCustomData|taskDescription|taskDestination|taskHint|taskMarkerOffset|taskNull|taskParent|taskResult|taskState|taskType|teamMember|teamMemberNull|teamName|teams|teamSwitch|teamSwitchEnabled|teamType|terminate|terrainIntersect|terrainIntersectASL|terrainIntersectAtASL|text|textLog|textLogFormat|tg|time|timeMultiplier|titleCut|titleFadeOut|titleObj|titleRsc|titleText|toArray|toFixed|toLower|toString|toUpper|triggerActivated|triggerActivation|triggerArea|triggerAttachedVehicle|triggerAttachObject|triggerAttachVehicle|triggerDynamicSimulation|triggerStatements|triggerText|triggerTimeout|triggerTimeoutCurrent|triggerType|turretLocal|turretOwner|turretUnit|tvAdd|tvClear|tvCollapse|tvCollapseAll|tvCount|tvCurSel|tvData|tvDelete|tvExpand|tvExpandAll|tvPicture|tvPictureRight|tvSetColor|tvSetCurSel|tvSetData|tvSetPicture|tvSetPictureColor|tvSetPictureColorDisabled|tvSetPictureColorSelected|tvSetPictureRight|tvSetPictureRightColor|tvSetPictureRightColorDisabled|tvSetPictureRightColorSelected|tvSetSelectColor|tvSetText|tvSetTooltip|tvSetValue|tvSort|tvSortByValue|tvText|tvTooltip|tvValue|type|typeName|typeOf|UAVControl|uiNamespace|uiSleep|unassignCurator|unassignItem|unassignTeam|unassignVehicle|underwater|uniform|uniformContainer|uniformItems|uniformMagazines|unitAddons|unitAimPosition|unitAimPositionVisual|unitBackpack|unitIsUAV|unitPos|unitReady|unitRecoilCoefficient|units|unitsBelowHeight|unlinkItem|unlockAchievement|unregisterTask|updateDrawIcon|updateMenuItem|updateObjectTree|useAIOperMapObstructionTest|useAISteeringComponent|useAudioTimeForMoves|userInputDisabled|vectorAdd|vectorCos|vectorCrossProduct|vectorDiff|vectorDir|vectorDirVisual|vectorDistance|vectorDistanceSqr|vectorDotProduct|vectorFromTo|vectorMagnitude|vectorMagnitudeSqr|vectorModelToWorld|vectorModelToWorldVisual|vectorMultiply|vectorNormalized|vectorUp|vectorUpVisual|vectorWorldToModel|vectorWorldToModelVisual|vehicle|vehicleCargoEnabled|vehicleChat|vehicleRadio|vehicleReceiveRemoteTargets|vehicleReportOwnPosition|vehicleReportRemoteTargets|vehicles|vehicleVarName|velocity|velocityModelSpace|verifySignature|vest|vestContainer|vestItems|vestMagazines|viewDistance|visibleCompass|visibleGPS|visibleMap|visiblePosition|visiblePositionASL|visibleScoretable|visibleWatch|waitUntil|waves|waypointAttachedObject|waypointAttachedVehicle|waypointAttachObject|waypointAttachVehicle|waypointBehaviour|waypointCombatMode|waypointCompletionRadius|waypointDescription|waypointForceBehaviour|waypointFormation|waypointHousePosition|waypointLoiterRadius|waypointLoiterType|waypointName|waypointPosition|waypoints|waypointScript|waypointsEnabledUAV|waypointShow|waypointSpeed|waypointStatements|waypointTimeout|waypointTimeoutCurrent|waypointType|waypointVisible|weaponAccessories|weaponAccessoriesCargo|weaponCargo|weaponDirection|weaponInertia|weaponLowered|weapons|weaponsItems|weaponsItemsCargo|weaponState|weaponsTurret|weightRTD|west|WFSideText|wind|windDir|windRTD|windStr|wingsForcesRTD|worldName|worldSize|worldToModel|worldToModelVisual|worldToScreen)\\b/i,\n    number: /(?:\\$|\\b0x)[\\da-f]+\\b|(?:\\B\\.\\d+|\\b\\d+(?:\\.\\d+)?)(?:e[+-]?\\d+)?\\b/i,\n    operator: /##|>>|&&|\\|\\||[!=<>]=?|[-+*/%#^]|\\b(?:and|mod|not|or)\\b/i,\n    \"magic-variable\": {\n        pattern: /\\b(?:this|thisList|thisTrigger|_exception|_fnc_scriptName|_fnc_scriptNameParent|_forEachIndex|_this|_thisEventHandler|_thisFSM|_thisScript|_x)\\b/i,\n        alias: \"keyword\"\n    },\n    constant: /\\bDIK(?:_[a-z\\d]+)+\\b/i\n}), Prism.languages.insertBefore(\"sqf\", \"string\", {\n    macro: {\n        pattern: /(^[ \\t]*)#[a-z](?:[^\\r\\n\\\\]|\\\\(?:\\r\\n|[\\s\\S]))*/im,\n        lookbehind: !0,\n        greedy: !0,\n        alias: \"property\",\n        inside: {\n            directive: {\n                pattern: /#[a-z]+\\b/i,\n                alias: \"keyword\"\n            },\n            comment: Prism.languages.sqf.comment\n        }\n    }\n}), delete Prism.languages.sqf[\"class-name\"];\nPrism.languages.squirrel = Prism.languages.extend(\"clike\", {\n    comment: [\n        Prism.languages.clike.comment[0],\n        {\n            pattern: /(^|[^\\\\:])(?:\\/\\/|#).*/,\n            lookbehind: !0,\n            greedy: !0\n        }\n    ],\n    string: {\n        pattern: /(^|[^\\\\\"'@])(?:@\"(?:[^\"]|\"\")*\"(?!\")|\"(?:[^\\\\\\r\\n\"]|\\\\.)*\")/,\n        lookbehind: !0,\n        greedy: !0\n    },\n    \"class-name\": {\n        pattern: /(\\b(?:class|enum|extends|instanceof)\\s+)\\w+(?:\\.\\w+)*/,\n        lookbehind: !0,\n        inside: {\n            punctuation: /\\./\n        }\n    },\n    keyword: /\\b(?:__FILE__|__LINE__|base|break|case|catch|class|clone|const|constructor|continue|default|delete|else|enum|extends|for|foreach|function|if|in|instanceof|local|null|resume|return|static|switch|this|throw|try|typeof|while|yield)\\b/,\n    number: /\\b(?:0x[0-9a-fA-F]+|\\d+(?:\\.(?:\\d+|[eE][+-]?\\d+))?)\\b/,\n    operator: /\\+\\+|--|<=>|<[-<]|>>>?|&&?|\\|\\|?|[-+*/%!=<>]=?|[~^]|::?/,\n    punctuation: /[(){}\\[\\],;.]/\n}), Prism.languages.insertBefore(\"squirrel\", \"string\", {\n    char: {\n        pattern: /(^|[^\\\\\"'])'(?:[^\\\\']|\\\\(?:[xuU][0-9a-fA-F]{0,8}|[\\s\\S]))'/,\n        lookbehind: !0,\n        greedy: !0\n    }\n}), Prism.languages.insertBefore(\"squirrel\", \"operator\", {\n    \"attribute-punctuation\": {\n        pattern: /<\\/|\\/>/,\n        alias: \"important\"\n    },\n    lambda: {\n        pattern: /@(?=\\()/,\n        alias: \"operator\"\n    }\n});\n!function(e) {\n    var r = /\\b(?:algebra_solver|algebra_solver_newton|integrate_1d|integrate_ode|integrate_ode_bdf|integrate_ode_rk45|map_rect|ode_(?:adams|bdf|ckrk|rk45)(?:_tol)?|ode_adjoint_tol_ctl|reduce_sum|reduce_sum_static)\\b/;\n    e.languages.stan = {\n        comment: /\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/|#(?!include).*/,\n        string: {\n            pattern: /\"[\\x20\\x21\\x23-\\x5B\\x5D-\\x7E]*\"/,\n            greedy: !0\n        },\n        directive: {\n            pattern: /^([ \\t]*)#include\\b.*/m,\n            lookbehind: !0,\n            alias: \"property\"\n        },\n        \"function-arg\": {\n            pattern: RegExp(\"(\" + r.source + \"\\\\s*\\\\(\\\\s*)[a-zA-Z]\\\\w*\"),\n            lookbehind: !0,\n            alias: \"function\"\n        },\n        constraint: {\n            pattern: /(\\b(?:int|matrix|real|row_vector|vector)\\s*)<[^<>]*>/,\n            lookbehind: !0,\n            inside: {\n                expression: {\n                    pattern: /(=\\s*)\\S(?:\\S|\\s+(?!\\s))*?(?=\\s*(?:>$|,\\s*\\w+\\s*=))/,\n                    lookbehind: !0,\n                    inside: null\n                },\n                property: /\\b[a-z]\\w*(?=\\s*=)/i,\n                operator: /=/,\n                punctuation: /^<|>$|,/\n            }\n        },\n        keyword: [\n            {\n                pattern: /\\bdata(?=\\s*\\{)|\\b(?:functions|generated|model|parameters|quantities|transformed)\\b/,\n                alias: \"program-block\"\n            },\n            /\\b(?:array|break|cholesky_factor_corr|cholesky_factor_cov|complex|continue|corr_matrix|cov_matrix|data|else|for|if|in|increment_log_prob|int|matrix|ordered|positive_ordered|print|real|reject|return|row_vector|simplex|target|unit_vector|vector|void|while)\\b/,\n            r\n        ],\n        function: /\\b[a-z]\\w*(?=\\s*\\()/i,\n        number: /(?:\\b\\d+(?:_\\d+)*(?:\\.(?:\\d+(?:_\\d+)*)?)?|\\B\\.\\d+(?:_\\d+)*)(?:E[+-]?\\d+(?:_\\d+)*)?i?(?!\\w)/i,\n        boolean: /\\b(?:false|true)\\b/,\n        operator: /<-|\\.[*/]=?|\\|\\|?|&&|[!=<>+\\-*/]=?|['^%~?:]/,\n        punctuation: /[()\\[\\]{},;]/\n    }, e.languages.stan.constraint.inside.expression.inside = e.languages.stan;\n}(Prism);\nPrism.languages.stata = {\n    comment: [\n        {\n            pattern: /(^[ \\t]*)\\*.*/m,\n            lookbehind: !0,\n            greedy: !0\n        },\n        {\n            pattern: /(^|\\s)\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\//,\n            lookbehind: !0,\n            greedy: !0\n        }\n    ],\n    \"string-literal\": {\n        pattern: /\"[^\"\\r\\n]*\"|[‘`']\".*?\"[’`']/,\n        greedy: !0,\n        inside: {\n            interpolation: {\n                pattern: /\\$\\{[^{}]*\\}|[‘`']\\w[^’`'\\r\\n]*[’`']/,\n                inside: {\n                    punctuation: /^\\$\\{|\\}$/,\n                    expression: {\n                        pattern: /[\\s\\S]+/,\n                        inside: null\n                    }\n                }\n            },\n            string: /[\\s\\S]+/\n        }\n    },\n    mata: {\n        pattern: /(^[ \\t]*mata[ \\t]*:)[\\s\\S]+?(?=^end\\b)/m,\n        lookbehind: !0,\n        greedy: !0,\n        alias: \"language-mata\",\n        inside: Prism.languages.mata\n    },\n    java: {\n        pattern: /(^[ \\t]*java[ \\t]*:)[\\s\\S]+?(?=^end\\b)/m,\n        lookbehind: !0,\n        greedy: !0,\n        alias: \"language-java\",\n        inside: Prism.languages.java\n    },\n    python: {\n        pattern: /(^[ \\t]*python[ \\t]*:)[\\s\\S]+?(?=^end\\b)/m,\n        lookbehind: !0,\n        greedy: !0,\n        alias: \"language-python\",\n        inside: Prism.languages.python\n    },\n    command: {\n        pattern: /(^[ \\t]*(?:\\.[ \\t]+)?(?:(?:bayes|bootstrap|by|bysort|capture|collect|fmm|fp|frame|jackknife|mfp|mi|nestreg|noisily|permute|quietly|rolling|simulate|statsby|stepwise|svy|version|xi)\\b[^:\\r\\n]*:[ \\t]*|(?:capture|noisily|quietly|version)[ \\t]+)?)[a-zA-Z]\\w*/m,\n        lookbehind: !0,\n        greedy: !0,\n        alias: \"keyword\"\n    },\n    variable: /\\$\\w+|[‘`']\\w[^’`'\\r\\n]*[’`']/,\n    keyword: /\\b(?:bayes|bootstrap|by|bysort|capture|clear|collect|fmm|fp|frame|if|in|jackknife|mi[ \\t]+estimate|mfp|nestreg|noisily|of|permute|quietly|rolling|simulate|sort|statsby|stepwise|svy|varlist|version|xi)\\b/,\n    boolean: /\\b(?:off|on)\\b/,\n    number: /\\b\\d+(?:\\.\\d+)?\\b|\\B\\.\\d+/,\n    function: /\\b[a-z_]\\w*(?=\\()/i,\n    operator: /\\+\\+|--|##?|[<>!=~]=?|[+\\-*^&|/]/,\n    punctuation: /[(){}[\\],:]/\n}, Prism.languages.stata[\"string-literal\"].inside.interpolation.inside.expression.inside = Prism.languages.stata;\nPrism.languages.iecst = {\n    comment: [\n        {\n            pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?(?:\\*\\/|$)|\\(\\*[\\s\\S]*?(?:\\*\\)|$)|\\{[\\s\\S]*?(?:\\}|$))/,\n            lookbehind: !0,\n            greedy: !0\n        },\n        {\n            pattern: /(^|[^\\\\:])\\/\\/.*/,\n            lookbehind: !0,\n            greedy: !0\n        }\n    ],\n    string: {\n        pattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n        greedy: !0\n    },\n    keyword: [\n        /\\b(?:END_)?(?:PROGRAM|CONFIGURATION|INTERFACE|FUNCTION_BLOCK|FUNCTION|ACTION|TRANSITION|TYPE|STRUCT|(?:INITIAL_)?STEP|NAMESPACE|LIBRARY|CHANNEL|FOLDER|RESOURCE|VAR_(?:ACCESS|CONFIG|EXTERNAL|GLOBAL|INPUT|IN_OUT|OUTPUT|TEMP)|VAR|METHOD|PROPERTY)\\b/i,\n        /\\b(?:AT|BY|(?:END_)?(?:CASE|FOR|IF|REPEAT|WHILE)|CONSTANT|CONTINUE|DO|ELSE|ELSIF|EXIT|EXTENDS|FROM|GET|GOTO|IMPLEMENTS|JMP|NON_RETAIN|OF|PRIVATE|PROTECTED|PUBLIC|RETAIN|RETURN|SET|TASK|THEN|TO|UNTIL|USING|WITH|__CATCH|__ENDTRY|__FINALLY|__TRY)\\b/\n    ],\n    \"class-name\": /\\b(?:ANY|ARRAY|BOOL|BYTE|U?(?:D|L|S)?INT|(?:D|L)?WORD|DATE(?:_AND_TIME)?|DT|L?REAL|POINTER|STRING|TIME(?:_OF_DAY)?|TOD)\\b/,\n    address: {\n        pattern: /%[IQM][XBWDL][\\d.]*|%[IQ][\\d.]*/,\n        alias: \"symbol\"\n    },\n    number: /\\b(?:16#[\\da-f]+|2#[01_]+|0x[\\da-f]+)\\b|\\b(?:D|DT|T|TOD)#[\\d_shmd:]*|\\b[A-Z]*#[\\d.,_]*|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,\n    boolean: /\\b(?:FALSE|NULL|TRUE)\\b/,\n    operator: /S?R?:?=>?|&&?|\\*\\*?|<[=>]?|>=?|[-:^/+#]|\\b(?:AND|EQ|EXPT|GE|GT|LE|LT|MOD|NE|NOT|OR|XOR)\\b/,\n    function: /\\b[a-z_]\\w*(?=\\s*\\()/i,\n    punctuation: /[()[\\].,;]/\n};\n!function(e) {\n    var n = {\n        pattern: /(\\b\\d+)(?:%|[a-z]+)/,\n        lookbehind: !0\n    }, r = {\n        pattern: /(^|[^\\w.-])-?(?:\\d+(?:\\.\\d+)?|\\.\\d+)/,\n        lookbehind: !0\n    }, t = {\n        comment: {\n            pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n            lookbehind: !0\n        },\n        url: {\n            pattern: /\\burl\\(([\"']?).*?\\1\\)/i,\n            greedy: !0\n        },\n        string: {\n            pattern: /(\"|')(?:(?!\\1)[^\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*\\1/,\n            greedy: !0\n        },\n        interpolation: null,\n        func: null,\n        important: /\\B!(?:important|optional)\\b/i,\n        keyword: {\n            pattern: /(^|\\s+)(?:(?:else|for|if|return|unless)(?=\\s|$)|@[\\w-]+)/,\n            lookbehind: !0\n        },\n        hexcode: /#[\\da-f]{3,6}/i,\n        color: [\n            /\\b(?:AliceBlue|AntiqueWhite|Aqua|Aquamarine|Azure|Beige|Bisque|Black|BlanchedAlmond|Blue|BlueViolet|Brown|BurlyWood|CadetBlue|Chartreuse|Chocolate|Coral|CornflowerBlue|Cornsilk|Crimson|Cyan|DarkBlue|DarkCyan|DarkGoldenRod|DarkGr[ae]y|DarkGreen|DarkKhaki|DarkMagenta|DarkOliveGreen|DarkOrange|DarkOrchid|DarkRed|DarkSalmon|DarkSeaGreen|DarkSlateBlue|DarkSlateGr[ae]y|DarkTurquoise|DarkViolet|DeepPink|DeepSkyBlue|DimGr[ae]y|DodgerBlue|FireBrick|FloralWhite|ForestGreen|Fuchsia|Gainsboro|GhostWhite|Gold|GoldenRod|Gr[ae]y|Green|GreenYellow|HoneyDew|HotPink|IndianRed|Indigo|Ivory|Khaki|Lavender|LavenderBlush|LawnGreen|LemonChiffon|LightBlue|LightCoral|LightCyan|LightGoldenRodYellow|LightGr[ae]y|LightGreen|LightPink|LightSalmon|LightSeaGreen|LightSkyBlue|LightSlateGr[ae]y|LightSteelBlue|LightYellow|Lime|LimeGreen|Linen|Magenta|Maroon|MediumAquaMarine|MediumBlue|MediumOrchid|MediumPurple|MediumSeaGreen|MediumSlateBlue|MediumSpringGreen|MediumTurquoise|MediumVioletRed|MidnightBlue|MintCream|MistyRose|Moccasin|NavajoWhite|Navy|OldLace|Olive|OliveDrab|Orange|OrangeRed|Orchid|PaleGoldenRod|PaleGreen|PaleTurquoise|PaleVioletRed|PapayaWhip|PeachPuff|Peru|Pink|Plum|PowderBlue|Purple|Red|RosyBrown|RoyalBlue|SaddleBrown|Salmon|SandyBrown|SeaGreen|SeaShell|Sienna|Silver|SkyBlue|SlateBlue|SlateGr[ae]y|Snow|SpringGreen|SteelBlue|Tan|Teal|Thistle|Tomato|Transparent|Turquoise|Violet|Wheat|White|WhiteSmoke|Yellow|YellowGreen)\\b/i,\n            {\n                pattern: /\\b(?:hsl|rgb)\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*\\)\\B|\\b(?:hsl|rgb)a\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*,\\s*(?:0|0?\\.\\d+|1)\\s*\\)\\B/i,\n                inside: {\n                    unit: n,\n                    number: r,\n                    function: /[\\w-]+(?=\\()/,\n                    punctuation: /[(),]/\n                }\n            }\n        ],\n        entity: /\\\\[\\da-f]{1,8}/i,\n        unit: n,\n        boolean: /\\b(?:false|true)\\b/,\n        operator: [\n            /~|[+!\\/%<>?=]=?|[-:]=|\\*[*=]?|\\.{2,3}|&&|\\|\\||\\B-\\B|\\b(?:and|in|is(?: a| defined| not|nt)?|not|or)\\b/\n        ],\n        number: r,\n        punctuation: /[{}()\\[\\];:,]/\n    };\n    t.interpolation = {\n        pattern: /\\{[^\\r\\n}:]+\\}/,\n        alias: \"variable\",\n        inside: {\n            delimiter: {\n                pattern: /^\\{|\\}$/,\n                alias: \"punctuation\"\n            },\n            rest: t\n        }\n    }, t.func = {\n        pattern: /[\\w-]+\\([^)]*\\).*/,\n        inside: {\n            function: /^[^(]+/,\n            rest: t\n        }\n    }, e.languages.stylus = {\n        \"atrule-declaration\": {\n            pattern: /(^[ \\t]*)@.+/m,\n            lookbehind: !0,\n            inside: {\n                atrule: /^@[\\w-]+/,\n                rest: t\n            }\n        },\n        \"variable-declaration\": {\n            pattern: /(^[ \\t]*)[\\w$-]+\\s*.?=[ \\t]*(?:\\{[^{}]*\\}|\\S.*|$)/m,\n            lookbehind: !0,\n            inside: {\n                variable: /^\\S+/,\n                rest: t\n            }\n        },\n        statement: {\n            pattern: /(^[ \\t]*)(?:else|for|if|return|unless)[ \\t].+/m,\n            lookbehind: !0,\n            inside: {\n                keyword: /^\\S+/,\n                rest: t\n            }\n        },\n        \"property-declaration\": {\n            pattern: /((?:^|\\{)([ \\t]*))(?:[\\w-]|\\{[^}\\r\\n]+\\})+(?:\\s*:\\s*|[ \\t]+)(?!\\s)[^{\\r\\n]*(?:;|[^{\\r\\n,]$(?!(?:\\r?\\n|\\r)(?:\\{|\\2[ \\t])))/m,\n            lookbehind: !0,\n            inside: {\n                property: {\n                    pattern: /^[^\\s:]+/,\n                    inside: {\n                        interpolation: t.interpolation\n                    }\n                },\n                rest: t\n            }\n        },\n        selector: {\n            pattern: /(^[ \\t]*)(?:(?=\\S)(?:[^{}\\r\\n:()]|::?[\\w-]+(?:\\([^)\\r\\n]*\\)|(?![\\w-]))|\\{[^}\\r\\n]+\\})+)(?:(?:\\r?\\n|\\r)(?:\\1(?:(?=\\S)(?:[^{}\\r\\n:()]|::?[\\w-]+(?:\\([^)\\r\\n]*\\)|(?![\\w-]))|\\{[^}\\r\\n]+\\})+)))*(?:,$|\\{|(?=(?:\\r?\\n|\\r)(?:\\{|\\1[ \\t])))/m,\n            lookbehind: !0,\n            inside: {\n                interpolation: t.interpolation,\n                comment: t.comment,\n                punctuation: /[{},]/\n            }\n        },\n        func: t.func,\n        string: t.string,\n        comment: {\n            pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n            lookbehind: !0,\n            greedy: !0\n        },\n        interpolation: t.interpolation,\n        punctuation: /[{}()\\[\\];:.]/\n    };\n}(Prism);\nPrism.languages.supercollider = {\n    comment: {\n        pattern: /\\/\\/.*|\\/\\*(?:[^*/]|\\*(?!\\/)|\\/(?!\\*)|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/)*\\*\\//,\n        greedy: !0\n    },\n    string: {\n        pattern: /(^|[^\\\\])\"(?:[^\"\\\\]|\\\\[\\s\\S])*\"/,\n        lookbehind: !0,\n        greedy: !0\n    },\n    char: {\n        pattern: /\\$(?:[^\\\\\\r\\n]|\\\\.)/,\n        greedy: !0\n    },\n    symbol: {\n        pattern: /(^|[^\\\\])'(?:[^'\\\\]|\\\\[\\s\\S])*'|\\\\\\w+/,\n        lookbehind: !0,\n        greedy: !0\n    },\n    keyword: /\\b(?:_|arg|classvar|const|nil|var|while)\\b/,\n    boolean: /\\b(?:false|true)\\b/,\n    label: {\n        pattern: /\\b[a-z_]\\w*(?=\\s*:)/,\n        alias: \"property\"\n    },\n    number: /\\b(?:inf|pi|0x[0-9a-fA-F]+|\\d+(?:\\.\\d+)?(?:[eE][+-]?\\d+)?(?:pi)?|\\d+r[0-9a-zA-Z]+(?:\\.[0-9a-zA-Z]+)?|\\d+[sb]{1,4}\\d*)\\b/,\n    \"class-name\": /\\b[A-Z]\\w*\\b/,\n    operator: /\\.{2,3}|#(?![[{])|&&|[!=]==?|\\+>>|\\+{1,3}|-[->]|=>|>>|\\?\\?|@\\|?@|\\|(?:@|[!=]=)?\\||!\\?|<[!=>]|\\*{1,2}|<{2,3}\\*?|[-!%&/<>?@|=`]/,\n    punctuation: /[{}()[\\].:,;]|#[[{]/\n}, Prism.languages.sclang = Prism.languages.supercollider;\nPrism.languages.swift = {\n    comment: {\n        pattern: /(^|[^\\\\:])(?:\\/\\/.*|\\/\\*(?:[^/*]|\\/(?!\\*)|\\*(?!\\/)|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/)*\\*\\/)/,\n        lookbehind: !0,\n        greedy: !0\n    },\n    \"string-literal\": [\n        {\n            pattern: RegExp('(^|[^\"#])(?:\"(?:\\\\\\\\(?:\\\\((?:[^()]|\\\\([^()]*\\\\))*\\\\)|\\r\\n|[^(])|[^\\\\\\\\\\r\\n\"])*\"|\"\"\"(?:\\\\\\\\(?:\\\\((?:[^()]|\\\\([^()]*\\\\))*\\\\)|[^(])|[^\\\\\\\\\"]|\"(?!\"\"))*\"\"\")(?![\"#])'),\n            lookbehind: !0,\n            greedy: !0,\n            inside: {\n                interpolation: {\n                    pattern: /(\\\\\\()(?:[^()]|\\([^()]*\\))*(?=\\))/,\n                    lookbehind: !0,\n                    inside: null\n                },\n                \"interpolation-punctuation\": {\n                    pattern: /^\\)|\\\\\\($/,\n                    alias: \"punctuation\"\n                },\n                punctuation: /\\\\(?=[\\r\\n])/,\n                string: /[\\s\\S]+/\n            }\n        },\n        {\n            pattern: RegExp('(^|[^\"#])(#+)(?:\"(?:\\\\\\\\(?:#+\\\\((?:[^()]|\\\\([^()]*\\\\))*\\\\)|\\r\\n|[^#])|[^\\\\\\\\\\r\\n])*?\"|\"\"\"(?:\\\\\\\\(?:#+\\\\((?:[^()]|\\\\([^()]*\\\\))*\\\\)|[^#])|[^\\\\\\\\])*?\"\"\")\\\\2'),\n            lookbehind: !0,\n            greedy: !0,\n            inside: {\n                interpolation: {\n                    pattern: /(\\\\#+\\()(?:[^()]|\\([^()]*\\))*(?=\\))/,\n                    lookbehind: !0,\n                    inside: null\n                },\n                \"interpolation-punctuation\": {\n                    pattern: /^\\)|\\\\#+\\($/,\n                    alias: \"punctuation\"\n                },\n                string: /[\\s\\S]+/\n            }\n        }\n    ],\n    directive: {\n        pattern: RegExp(\"#(?:(?:elseif|if)\\\\b(?:[ \t]*(?:![ \t]*)?(?:\\\\b\\\\w+\\\\b(?:[ \t]*\\\\((?:[^()]|\\\\([^()]*\\\\))*\\\\))?|\\\\((?:[^()]|\\\\([^()]*\\\\))*\\\\))(?:[ \t]*(?:&&|\\\\|\\\\|))?)+|(?:else|endif)\\\\b)\"),\n        alias: \"property\",\n        inside: {\n            \"directive-name\": /^#\\w+/,\n            boolean: /\\b(?:false|true)\\b/,\n            number: /\\b\\d+(?:\\.\\d+)*\\b/,\n            operator: /!|&&|\\|\\||[<>]=?/,\n            punctuation: /[(),]/\n        }\n    },\n    literal: {\n        pattern: /#(?:colorLiteral|column|dsohandle|file(?:ID|Literal|Path)?|function|imageLiteral|line)\\b/,\n        alias: \"constant\"\n    },\n    \"other-directive\": {\n        pattern: /#\\w+\\b/,\n        alias: \"property\"\n    },\n    attribute: {\n        pattern: /@\\w+/,\n        alias: \"atrule\"\n    },\n    \"function-definition\": {\n        pattern: /(\\bfunc\\s+)\\w+/,\n        lookbehind: !0,\n        alias: \"function\"\n    },\n    label: {\n        pattern: /\\b(break|continue)\\s+\\w+|\\b[a-zA-Z_]\\w*(?=\\s*:\\s*(?:for|repeat|while)\\b)/,\n        lookbehind: !0,\n        alias: \"important\"\n    },\n    keyword: /\\b(?:Any|Protocol|Self|Type|actor|as|assignment|associatedtype|associativity|async|await|break|case|catch|class|continue|convenience|default|defer|deinit|didSet|do|dynamic|else|enum|extension|fallthrough|fileprivate|final|for|func|get|guard|higherThan|if|import|in|indirect|infix|init|inout|internal|is|isolated|lazy|left|let|lowerThan|mutating|none|nonisolated|nonmutating|open|operator|optional|override|postfix|precedencegroup|prefix|private|protocol|public|repeat|required|rethrows|return|right|safe|self|set|some|static|struct|subscript|super|switch|throw|throws|try|typealias|unowned|unsafe|var|weak|where|while|willSet)\\b/,\n    boolean: /\\b(?:false|true)\\b/,\n    nil: {\n        pattern: /\\bnil\\b/,\n        alias: \"constant\"\n    },\n    \"short-argument\": /\\$\\d+\\b/,\n    omit: {\n        pattern: /\\b_\\b/,\n        alias: \"keyword\"\n    },\n    number: /\\b(?:[\\d_]+(?:\\.[\\de_]+)?|0x[a-f0-9_]+(?:\\.[a-f0-9p_]+)?|0b[01_]+|0o[0-7_]+)\\b/i,\n    \"class-name\": /\\b[A-Z](?:[A-Z_\\d]*[a-z]\\w*)?\\b/,\n    function: /\\b[a-z_]\\w*(?=\\s*\\()/i,\n    constant: /\\b(?:[A-Z_]{2,}|k[A-Z][A-Za-z_]+)\\b/,\n    operator: /[-+*/%=!<>&|^~?]+|\\.[.\\-+*/%=!<>&|^~?]+/,\n    punctuation: /[{}[\\]();,.:\\\\]/\n}, Prism.languages.swift[\"string-literal\"].forEach(function(e) {\n    e.inside.interpolation.inside = Prism.languages.swift;\n});\n!function(e) {\n    var t = {\n        pattern: /^[;#].*/m,\n        greedy: !0\n    }, n = '\"(?:[^\\r\\n\"\\\\\\\\]|\\\\\\\\(?:[^\\r]|\\r\\n?))*\"(?!\\\\S)';\n    e.languages.systemd = {\n        comment: t,\n        section: {\n            pattern: /^\\[[^\\n\\r\\[\\]]*\\](?=[ \\t]*$)/m,\n            greedy: !0,\n            inside: {\n                punctuation: /^\\[|\\]$/,\n                \"section-name\": {\n                    pattern: /[\\s\\S]+/,\n                    alias: \"selector\"\n                }\n            }\n        },\n        key: {\n            pattern: /^[^\\s=]+(?=[ \\t]*=)/m,\n            greedy: !0,\n            alias: \"attr-name\"\n        },\n        value: {\n            pattern: RegExp(\"(=[ \t]*(?!\\\\s))(?:\" + n + '|(?=[^\"\\r\\n]))(?:[^\\\\s\\\\\\\\]|[ \t]+(?:(?![ \t\"])|' + n + \")|\\\\\\\\[\\r\\n]+(?:[#;].*[\\r\\n]+)*(?![#;]))*\"),\n            lookbehind: !0,\n            greedy: !0,\n            alias: \"attr-value\",\n            inside: {\n                comment: t,\n                quoted: {\n                    pattern: RegExp(\"(^|\\\\s)\" + n),\n                    lookbehind: !0,\n                    greedy: !0\n                },\n                punctuation: /\\\\$/m,\n                boolean: {\n                    pattern: /^(?:false|no|off|on|true|yes)$/,\n                    greedy: !0\n                }\n            }\n        },\n        punctuation: /=/\n    };\n}(Prism);\n!function(e) {\n    function t(e, t, a) {\n        return {\n            pattern: RegExp(\"<#\" + e + \"[\\\\s\\\\S]*?#>\"),\n            alias: \"block\",\n            inside: {\n                delimiter: {\n                    pattern: RegExp(\"^<#\" + e + \"|#>$\"),\n                    alias: \"important\"\n                },\n                content: {\n                    pattern: /[\\s\\S]+/,\n                    inside: t,\n                    alias: a\n                }\n            }\n        };\n    }\n    e.languages[\"t4-templating\"] = Object.defineProperty({}, \"createT4\", {\n        value: function(a) {\n            var n = e.languages[a], i = \"language-\" + a;\n            return {\n                block: {\n                    pattern: /<#[\\s\\S]+?#>/,\n                    inside: {\n                        directive: t(\"@\", {\n                            \"attr-value\": {\n                                pattern: /=(?:(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|[^\\s'\">=]+)/,\n                                inside: {\n                                    punctuation: /^=|^[\"']|[\"']$/\n                                }\n                            },\n                            keyword: /\\b\\w+(?=\\s)/,\n                            \"attr-name\": /\\b\\w+/\n                        }),\n                        expression: t(\"=\", n, i),\n                        \"class-feature\": t(\"\\\\+\", n, i),\n                        standard: t(\"\", n, i)\n                    }\n                }\n            };\n        }\n    });\n}(Prism);\nPrism.languages.t4 = Prism.languages[\"t4-cs\"] = Prism.languages[\"t4-templating\"].createT4(\"csharp\");\nPrism.languages.vbnet = Prism.languages.extend(\"basic\", {\n    comment: [\n        {\n            pattern: /(?:!|REM\\b).+/i,\n            inside: {\n                keyword: /^REM/i\n            }\n        },\n        {\n            pattern: /(^|[^\\\\:])'.*/,\n            lookbehind: !0,\n            greedy: !0\n        }\n    ],\n    string: {\n        pattern: /(^|[^\"])\"(?:\"\"|[^\"])*\"(?!\")/,\n        lookbehind: !0,\n        greedy: !0\n    },\n    keyword: /(?:\\b(?:ADDHANDLER|ADDRESSOF|ALIAS|AND|ANDALSO|AS|BEEP|BLOAD|BOOLEAN|BSAVE|BYREF|BYTE|BYVAL|CALL(?: ABSOLUTE)?|CASE|CATCH|CBOOL|CBYTE|CCHAR|CDATE|CDBL|CDEC|CHAIN|CHAR|CHDIR|CINT|CLASS|CLEAR|CLNG|CLOSE|CLS|COBJ|COM|COMMON|CONST|CONTINUE|CSBYTE|CSHORT|CSNG|CSTR|CTYPE|CUINT|CULNG|CUSHORT|DATA|DATE|DECIMAL|DECLARE|DEF(?: FN| SEG|DBL|INT|LNG|SNG|STR)|DEFAULT|DELEGATE|DIM|DIRECTCAST|DO|DOUBLE|ELSE|ELSEIF|END|ENUM|ENVIRON|ERASE|ERROR|EVENT|EXIT|FALSE|FIELD|FILES|FINALLY|FOR(?: EACH)?|FRIEND|FUNCTION|GET|GETTYPE|GETXMLNAMESPACE|GLOBAL|GOSUB|GOTO|HANDLES|IF|IMPLEMENTS|IMPORTS|IN|INHERITS|INPUT|INTEGER|INTERFACE|IOCTL|IS|ISNOT|KEY|KILL|LET|LIB|LIKE|LINE INPUT|LOCATE|LOCK|LONG|LOOP|LSET|ME|MKDIR|MOD|MODULE|MUSTINHERIT|MUSTOVERRIDE|MYBASE|MYCLASS|NAME|NAMESPACE|NARROWING|NEW|NEXT|NOT|NOTHING|NOTINHERITABLE|NOTOVERRIDABLE|OBJECT|OF|OFF|ON(?: COM| ERROR| KEY| TIMER)?|OPEN|OPERATOR|OPTION(?: BASE)?|OPTIONAL|OR|ORELSE|OUT|OVERLOADS|OVERRIDABLE|OVERRIDES|PARAMARRAY|PARTIAL|POKE|PRIVATE|PROPERTY|PROTECTED|PUBLIC|PUT|RAISEEVENT|READ|READONLY|REDIM|REM|REMOVEHANDLER|RESTORE|RESUME|RETURN|RMDIR|RSET|RUN|SBYTE|SELECT(?: CASE)?|SET|SHADOWS|SHARED|SHELL|SHORT|SINGLE|SLEEP|STATIC|STEP|STOP|STRING|STRUCTURE|SUB|SWAP|SYNCLOCK|SYSTEM|THEN|THROW|TIMER|TO|TROFF|TRON|TRUE|TRY|TRYCAST|TYPE|TYPEOF|UINTEGER|ULONG|UNLOCK|UNTIL|USHORT|USING|VIEW PRINT|WAIT|WEND|WHEN|WHILE|WIDENING|WITH|WITHEVENTS|WRITE|WRITEONLY|XOR)|\\B(?:#CONST|#ELSE|#ELSEIF|#END|#IF))(?:\\$|\\b)/i,\n    punctuation: /[,;:(){}]/\n});\nPrism.languages[\"t4-vb\"] = Prism.languages[\"t4-templating\"].createT4(\"vbnet\");\n!function(e) {\n    var n = /[*&][^\\s[\\]{},]+/, r = /!(?:<[\\w\\-%#;/?:@&=+$,.!~*'()[\\]]+>|(?:[a-zA-Z\\d-]*!)?[\\w\\-%#;/?:@&=+$.~*'()]+)?/, t = \"(?:\" + r.source + \"(?:[ \t]+\" + n.source + \")?|\" + n.source + \"(?:[ \t]+\" + r.source + \")?)\", a = \"(?:[^\\\\s\\\\x00-\\\\x08\\\\x0e-\\\\x1f!\\\"#%&'*,\\\\-:>?@[\\\\]`{|}\\\\x7f-\\\\x84\\\\x86-\\\\x9f\\ud800-\\udfff\\\\ufffe\\\\uffff]|[?:-]<PLAIN>)(?:[ \t]*(?:(?![#:])<PLAIN>|:<PLAIN>))*\".replace(/<PLAIN>/g, function() {\n        return \"[^\\\\s\\\\x00-\\\\x08\\\\x0e-\\\\x1f,[\\\\]{}\\\\x7f-\\\\x84\\\\x86-\\\\x9f\\ud800-\\udfff\\\\ufffe\\\\uffff]\";\n    }), d = \"\\\"(?:[^\\\"\\\\\\\\\\r\\n]|\\\\\\\\.)*\\\"|'(?:[^'\\\\\\\\\\r\\n]|\\\\\\\\.)*'\";\n    function o(e, n) {\n        n = (n || \"\").replace(/m/g, \"\") + \"m\";\n        var r = \"([:\\\\-,[{]\\\\s*(?:\\\\s<<prop>>[ \t]+)?)(?:<<value>>)(?=[ \t]*(?:$|,|\\\\]|\\\\}|(?:[\\r\\n]\\\\s*)?#))\".replace(/<<prop>>/g, function() {\n            return t;\n        }).replace(/<<value>>/g, function() {\n            return e;\n        });\n        return RegExp(r, n);\n    }\n    e.languages.yaml = {\n        scalar: {\n            pattern: RegExp(\"([\\\\-:]\\\\s*(?:\\\\s<<prop>>[ \t]+)?[|>])[ \t]*(?:((?:\\r?\\n|\\r)[ \t]+)\\\\S[^\\r\\n]*(?:\\\\2[^\\r\\n]+)*)\".replace(/<<prop>>/g, function() {\n                return t;\n            })),\n            lookbehind: !0,\n            alias: \"string\"\n        },\n        comment: /#.*/,\n        key: {\n            pattern: RegExp(\"((?:^|[:\\\\-,[{\\r\\n?])[ \t]*(?:<<prop>>[ \t]+)?)<<key>>(?=\\\\s*:\\\\s)\".replace(/<<prop>>/g, function() {\n                return t;\n            }).replace(/<<key>>/g, function() {\n                return \"(?:\" + a + \"|\" + d + \")\";\n            })),\n            lookbehind: !0,\n            greedy: !0,\n            alias: \"atrule\"\n        },\n        directive: {\n            pattern: /(^[ \\t]*)%.+/m,\n            lookbehind: !0,\n            alias: \"important\"\n        },\n        datetime: {\n            pattern: o(\"\\\\d{4}-\\\\d\\\\d?-\\\\d\\\\d?(?:[tT]|[ \t]+)\\\\d\\\\d?:\\\\d{2}:\\\\d{2}(?:\\\\.\\\\d*)?(?:[ \t]*(?:Z|[-+]\\\\d\\\\d?(?::\\\\d{2})?))?|\\\\d{4}-\\\\d{2}-\\\\d{2}|\\\\d\\\\d?:\\\\d{2}(?::\\\\d{2}(?:\\\\.\\\\d*)?)?\"),\n            lookbehind: !0,\n            alias: \"number\"\n        },\n        boolean: {\n            pattern: o(\"false|true\", \"i\"),\n            lookbehind: !0,\n            alias: \"important\"\n        },\n        null: {\n            pattern: o(\"null|~\", \"i\"),\n            lookbehind: !0,\n            alias: \"important\"\n        },\n        string: {\n            pattern: o(d),\n            lookbehind: !0,\n            greedy: !0\n        },\n        number: {\n            pattern: o(\"[+-]?(?:0x[\\\\da-f]+|0o[0-7]+|(?:\\\\d+(?:\\\\.\\\\d*)?|\\\\.\\\\d+)(?:e[+-]?\\\\d+)?|\\\\.inf|\\\\.nan)\", \"i\"),\n            lookbehind: !0\n        },\n        tag: r,\n        important: n,\n        punctuation: /---|[:[\\]{}\\-,|>?]|\\.\\.\\./\n    }, e.languages.yml = e.languages.yaml;\n}(Prism);\nPrism.languages.tap = {\n    fail: /not ok[^#{\\n\\r]*/,\n    pass: /ok[^#{\\n\\r]*/,\n    pragma: /pragma [+-][a-z]+/,\n    bailout: /bail out!.*/i,\n    version: /TAP version \\d+/i,\n    plan: /\\b\\d+\\.\\.\\d+(?: +#.*)?/,\n    subtest: {\n        pattern: /# Subtest(?:: .*)?/,\n        greedy: !0\n    },\n    punctuation: /[{}]/,\n    directive: /#.*/,\n    yamlish: {\n        pattern: /(^[ \\t]*)---[\\s\\S]*?[\\r\\n][ \\t]*\\.\\.\\.$/m,\n        lookbehind: !0,\n        inside: Prism.languages.yaml,\n        alias: \"language-yaml\"\n    }\n};\nPrism.languages.tcl = {\n    comment: {\n        pattern: /(^|[^\\\\])#.*/,\n        lookbehind: !0\n    },\n    string: {\n        pattern: /\"(?:[^\"\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*\"/,\n        greedy: !0\n    },\n    variable: [\n        {\n            pattern: /(\\$)(?:::)?(?:[a-zA-Z0-9]+::)*\\w+/,\n            lookbehind: !0\n        },\n        {\n            pattern: /(\\$)\\{[^}]+\\}/,\n            lookbehind: !0\n        },\n        {\n            pattern: /(^[\\t ]*set[ \\t]+)(?:::)?(?:[a-zA-Z0-9]+::)*\\w+/m,\n            lookbehind: !0\n        }\n    ],\n    function: {\n        pattern: /(^[\\t ]*proc[ \\t]+)\\S+/m,\n        lookbehind: !0\n    },\n    builtin: [\n        {\n            pattern: /(^[\\t ]*)(?:break|class|continue|error|eval|exit|for|foreach|if|proc|return|switch|while)\\b/m,\n            lookbehind: !0\n        },\n        /\\b(?:else|elseif)\\b/\n    ],\n    scope: {\n        pattern: /(^[\\t ]*)(?:global|upvar|variable)\\b/m,\n        lookbehind: !0,\n        alias: \"constant\"\n    },\n    keyword: {\n        pattern: /(^[\\t ]*|\\[)(?:Safe_Base|Tcl|after|append|apply|array|auto_(?:execok|import|load|mkindex|qualify|reset)|automkindex_old|bgerror|binary|catch|cd|chan|clock|close|concat|dde|dict|encoding|eof|exec|expr|fblocked|fconfigure|fcopy|file(?:event|name)?|flush|gets|glob|history|http|incr|info|interp|join|lappend|lassign|lindex|linsert|list|llength|load|lrange|lrepeat|lreplace|lreverse|lsearch|lset|lsort|math(?:func|op)|memory|msgcat|namespace|open|package|parray|pid|pkg_mkIndex|platform|puts|pwd|re_syntax|read|refchan|regexp|registry|regsub|rename|scan|seek|set|socket|source|split|string|subst|tcl(?:_endOfWord|_findLibrary|startOf(?:Next|Previous)Word|test|vars|wordBreak(?:After|Before))|tell|time|tm|trace|unknown|unload|unset|update|uplevel|vwait)\\b/m,\n        lookbehind: !0\n    },\n    operator: /!=?|\\*\\*?|==|&&?|\\|\\|?|<[=<]?|>[=>]?|[-+~\\/%?^]|\\b(?:eq|in|ne|ni)\\b/,\n    punctuation: /[{}()\\[\\]]/\n};\n!function(e) {\n    e.languages.tt2 = e.languages.extend(\"clike\", {\n        comment: /#.*|\\[%#[\\s\\S]*?%\\]/,\n        keyword: /\\b(?:BLOCK|CALL|CASE|CATCH|CLEAR|DEBUG|DEFAULT|ELSE|ELSIF|END|FILTER|FINAL|FOREACH|GET|IF|IN|INCLUDE|INSERT|LAST|MACRO|META|NEXT|PERL|PROCESS|RAWPERL|RETURN|SET|STOP|SWITCH|TAGS|THROW|TRY|UNLESS|USE|WHILE|WRAPPER)\\b/,\n        punctuation: /[[\\]{},()]/\n    }), e.languages.insertBefore(\"tt2\", \"number\", {\n        operator: /=[>=]?|!=?|<=?|>=?|&&|\\|\\|?|\\b(?:and|not|or)\\b/,\n        variable: {\n            pattern: /\\b[a-z]\\w*(?:\\s*\\.\\s*(?:\\d+|\\$?[a-z]\\w*))*\\b/i\n        }\n    }), e.languages.insertBefore(\"tt2\", \"keyword\", {\n        delimiter: {\n            pattern: /^(?:\\[%|%%)-?|-?%\\]$/,\n            alias: \"punctuation\"\n        }\n    }), e.languages.insertBefore(\"tt2\", \"string\", {\n        \"single-quoted-string\": {\n            pattern: /'[^\\\\']*(?:\\\\[\\s\\S][^\\\\']*)*'/,\n            greedy: !0,\n            alias: \"string\"\n        },\n        \"double-quoted-string\": {\n            pattern: /\"[^\\\\\"]*(?:\\\\[\\s\\S][^\\\\\"]*)*\"/,\n            greedy: !0,\n            alias: \"string\",\n            inside: {\n                variable: {\n                    pattern: /\\$(?:[a-z]\\w*(?:\\.(?:\\d+|\\$?[a-z]\\w*))*)/i\n                }\n            }\n        }\n    }), delete e.languages.tt2.string, e.hooks.add(\"before-tokenize\", function(t) {\n        e.languages[\"markup-templating\"].buildPlaceholders(t, \"tt2\", /\\[%[\\s\\S]+?%\\]/g);\n    }), e.hooks.add(\"after-tokenize\", function(t) {\n        e.languages[\"markup-templating\"].tokenizePlaceholders(t, \"tt2\");\n    });\n}(Prism);\n!function(n) {\n    function e(n, e) {\n        return RegExp(n.replace(/<MOD>/g, function() {\n            return \"(?:\\\\([^|()\\n]+\\\\)|\\\\[[^\\\\]\\n]+\\\\]|\\\\{[^}\\n]+\\\\})\";\n        }).replace(/<PAR>/g, function() {\n            return \"(?:\\\\)|\\\\((?![^|()\\n]+\\\\)))\";\n        }), e || \"\");\n    }\n    var i = {\n        css: {\n            pattern: /\\{[^{}]+\\}/,\n            inside: {\n                rest: n.languages.css\n            }\n        },\n        \"class-id\": {\n            pattern: /(\\()[^()]+(?=\\))/,\n            lookbehind: !0,\n            alias: \"attr-value\"\n        },\n        lang: {\n            pattern: /(\\[)[^\\[\\]]+(?=\\])/,\n            lookbehind: !0,\n            alias: \"attr-value\"\n        },\n        punctuation: /[\\\\\\/]\\d+|\\S/\n    }, t = n.languages.textile = n.languages.extend(\"markup\", {\n        phrase: {\n            pattern: /(^|\\r|\\n)\\S[\\s\\S]*?(?=$|\\r?\\n\\r?\\n|\\r\\r)/,\n            lookbehind: !0,\n            inside: {\n                \"block-tag\": {\n                    pattern: e(\"^[a-z]\\\\w*(?:<MOD>|<PAR>|[<>=])*\\\\.\"),\n                    inside: {\n                        modifier: {\n                            pattern: e(\"(^[a-z]\\\\w*)(?:<MOD>|<PAR>|[<>=])+(?=\\\\.)\"),\n                            lookbehind: !0,\n                            inside: i\n                        },\n                        tag: /^[a-z]\\w*/,\n                        punctuation: /\\.$/\n                    }\n                },\n                list: {\n                    pattern: e(\"^[*#]+<MOD>*\\\\s+\\\\S.*\", \"m\"),\n                    inside: {\n                        modifier: {\n                            pattern: e(\"(^[*#]+)<MOD>+\"),\n                            lookbehind: !0,\n                            inside: i\n                        },\n                        punctuation: /^[*#]+/\n                    }\n                },\n                table: {\n                    pattern: e(\"^(?:(?:<MOD>|<PAR>|[<>=^~])+\\\\.\\\\s*)?(?:\\\\|(?:(?:<MOD>|<PAR>|[<>=^~_]|[\\\\\\\\/]\\\\d+)+\\\\.|(?!(?:<MOD>|<PAR>|[<>=^~_]|[\\\\\\\\/]\\\\d+)+\\\\.))[^|]*)+\\\\|\", \"m\"),\n                    inside: {\n                        modifier: {\n                            pattern: e(\"(^|\\\\|(?:\\r?\\n|\\r)?)(?:<MOD>|<PAR>|[<>=^~_]|[\\\\\\\\/]\\\\d+)+(?=\\\\.)\"),\n                            lookbehind: !0,\n                            inside: i\n                        },\n                        punctuation: /\\||^\\./\n                    }\n                },\n                inline: {\n                    pattern: e(\"(^|[^a-zA-Z\\\\d])(\\\\*\\\\*|__|\\\\?\\\\?|[*_%@+\\\\-^~])<MOD>*.+?\\\\2(?![a-zA-Z\\\\d])\"),\n                    lookbehind: !0,\n                    inside: {\n                        bold: {\n                            pattern: e(\"(^(\\\\*\\\\*?)<MOD>*).+?(?=\\\\2)\"),\n                            lookbehind: !0\n                        },\n                        italic: {\n                            pattern: e(\"(^(__?)<MOD>*).+?(?=\\\\2)\"),\n                            lookbehind: !0\n                        },\n                        cite: {\n                            pattern: e(\"(^\\\\?\\\\?<MOD>*).+?(?=\\\\?\\\\?)\"),\n                            lookbehind: !0,\n                            alias: \"string\"\n                        },\n                        code: {\n                            pattern: e(\"(^@<MOD>*).+?(?=@)\"),\n                            lookbehind: !0,\n                            alias: \"keyword\"\n                        },\n                        inserted: {\n                            pattern: e(\"(^\\\\+<MOD>*).+?(?=\\\\+)\"),\n                            lookbehind: !0\n                        },\n                        deleted: {\n                            pattern: e(\"(^-<MOD>*).+?(?=-)\"),\n                            lookbehind: !0\n                        },\n                        span: {\n                            pattern: e(\"(^%<MOD>*).+?(?=%)\"),\n                            lookbehind: !0\n                        },\n                        modifier: {\n                            pattern: e(\"(^\\\\*\\\\*|__|\\\\?\\\\?|[*_%@+\\\\-^~])<MOD>+\"),\n                            lookbehind: !0,\n                            inside: i\n                        },\n                        punctuation: /[*_%?@+\\-^~]+/\n                    }\n                },\n                \"link-ref\": {\n                    pattern: /^\\[[^\\]]+\\]\\S+$/m,\n                    inside: {\n                        string: {\n                            pattern: /(^\\[)[^\\]]+(?=\\])/,\n                            lookbehind: !0\n                        },\n                        url: {\n                            pattern: /(^\\])\\S+$/,\n                            lookbehind: !0\n                        },\n                        punctuation: /[\\[\\]]/\n                    }\n                },\n                link: {\n                    pattern: e('\"<MOD>*[^\"]+\":.+?(?=[^\\\\w/]?(?:\\\\s|$))'),\n                    inside: {\n                        text: {\n                            pattern: e('(^\"<MOD>*)[^\"]+(?=\")'),\n                            lookbehind: !0\n                        },\n                        modifier: {\n                            pattern: e('(^\")<MOD>+'),\n                            lookbehind: !0,\n                            inside: i\n                        },\n                        url: {\n                            pattern: /(:).+/,\n                            lookbehind: !0\n                        },\n                        punctuation: /[\":]/\n                    }\n                },\n                image: {\n                    pattern: e(\"!(?:<MOD>|<PAR>|[<>=])*(?![<>=])[^!\\\\s()]+(?:\\\\([^)]+\\\\))?!(?::.+?(?=[^\\\\w/]?(?:\\\\s|$)))?\"),\n                    inside: {\n                        source: {\n                            pattern: e(\"(^!(?:<MOD>|<PAR>|[<>=])*)(?![<>=])[^!\\\\s()]+(?:\\\\([^)]+\\\\))?(?=!)\"),\n                            lookbehind: !0,\n                            alias: \"url\"\n                        },\n                        modifier: {\n                            pattern: e(\"(^!)(?:<MOD>|<PAR>|[<>=])+\"),\n                            lookbehind: !0,\n                            inside: i\n                        },\n                        url: {\n                            pattern: /(:).+/,\n                            lookbehind: !0\n                        },\n                        punctuation: /[!:]/\n                    }\n                },\n                footnote: {\n                    pattern: /\\b\\[\\d+\\]/,\n                    alias: \"comment\",\n                    inside: {\n                        punctuation: /\\[|\\]/\n                    }\n                },\n                acronym: {\n                    pattern: /\\b[A-Z\\d]+\\([^)]+\\)/,\n                    inside: {\n                        comment: {\n                            pattern: /(\\()[^()]+(?=\\))/,\n                            lookbehind: !0\n                        },\n                        punctuation: /[()]/\n                    }\n                },\n                mark: {\n                    pattern: /\\b\\((?:C|R|TM)\\)/,\n                    alias: \"comment\",\n                    inside: {\n                        punctuation: /[()]/\n                    }\n                }\n            }\n        }\n    }), a = t.phrase.inside, o = {\n        inline: a.inline,\n        link: a.link,\n        image: a.image,\n        footnote: a.footnote,\n        acronym: a.acronym,\n        mark: a.mark\n    };\n    t.tag.pattern = /<\\/?(?!\\d)[a-z0-9]+(?:\\s+[^\\s>\\/=]+(?:=(?:(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|[^\\s'\">=]+))?)*\\s*\\/?>/i;\n    var r = a.inline.inside;\n    r.bold.inside = o, r.italic.inside = o, r.inserted.inside = o, r.deleted.inside = o, r.span.inside = o;\n    var d = a.table.inside;\n    d.inline = o.inline, d.link = o.link, d.image = o.image, d.footnote = o.footnote, d.acronym = o.acronym, d.mark = o.mark;\n}(Prism);\n!function(e) {\n    function n(e) {\n        return e.replace(/__/g, function() {\n            return \"(?:[\\\\w-]+|'[^'\\n\\r]*'|\\\"(?:\\\\\\\\.|[^\\\\\\\\\\\"\\r\\n])*\\\")\";\n        });\n    }\n    e.languages.toml = {\n        comment: {\n            pattern: /#.*/,\n            greedy: !0\n        },\n        table: {\n            pattern: RegExp(n(\"(^[\t ]*\\\\[\\\\s*(?:\\\\[\\\\s*)?)__(?:\\\\s*\\\\.\\\\s*__)*(?=\\\\s*\\\\])\"), \"m\"),\n            lookbehind: !0,\n            greedy: !0,\n            alias: \"class-name\"\n        },\n        key: {\n            pattern: RegExp(n(\"(^[\t ]*|[{,]\\\\s*)__(?:\\\\s*\\\\.\\\\s*__)*(?=\\\\s*=)\"), \"m\"),\n            lookbehind: !0,\n            greedy: !0,\n            alias: \"property\"\n        },\n        string: {\n            pattern: /\"\"\"(?:\\\\[\\s\\S]|[^\\\\])*?\"\"\"|'''[\\s\\S]*?'''|'[^'\\n\\r]*'|\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/,\n            greedy: !0\n        },\n        date: [\n            {\n                pattern: /\\b\\d{4}-\\d{2}-\\d{2}(?:[T\\s]\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|[+-]\\d{2}:\\d{2})?)?\\b/i,\n                alias: \"number\"\n            },\n            {\n                pattern: /\\b\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?\\b/,\n                alias: \"number\"\n            }\n        ],\n        number: /(?:\\b0(?:x[\\da-zA-Z]+(?:_[\\da-zA-Z]+)*|o[0-7]+(?:_[0-7]+)*|b[10]+(?:_[10]+)*))\\b|[-+]?\\b\\d+(?:_\\d+)*(?:\\.\\d+(?:_\\d+)*)?(?:[eE][+-]?\\d+(?:_\\d+)*)?\\b|[-+]?\\b(?:inf|nan)\\b/,\n        boolean: /\\b(?:false|true)\\b/,\n        punctuation: /[.,=[\\]{}]/\n    };\n}(Prism);\n!function(e) {\n    e.languages.tremor = {\n        comment: {\n            pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|(?:--|\\/\\/|#).*)/,\n            lookbehind: !0\n        },\n        \"interpolated-string\": null,\n        extractor: {\n            pattern: /\\b[a-z_]\\w*\\|(?:[^\\r\\n\\\\|]|\\\\(?:\\r\\n|[\\s\\S]))*\\|/i,\n            greedy: !0,\n            inside: {\n                regex: {\n                    pattern: /(^re)\\|[\\s\\S]+/,\n                    lookbehind: !0\n                },\n                function: /^\\w+/,\n                value: /\\|[\\s\\S]+/\n            }\n        },\n        identifier: {\n            pattern: /`[^`]*`/,\n            greedy: !0\n        },\n        function: /\\b[a-z_]\\w*(?=\\s*(?:::\\s*<|\\())\\b/,\n        keyword: /\\b(?:args|as|by|case|config|connect|connector|const|copy|create|default|define|deploy|drop|each|emit|end|erase|event|flow|fn|for|from|group|having|insert|into|intrinsic|let|links|match|merge|mod|move|of|operator|patch|pipeline|recur|script|select|set|sliding|state|stream|to|tumbling|update|use|when|where|window|with)\\b/,\n        boolean: /\\b(?:false|null|true)\\b/i,\n        number: /\\b(?:0b[01_]*|0x[0-9a-fA-F_]*|\\d[\\d_]*(?:\\.\\d[\\d_]*)?(?:[Ee][+-]?[\\d_]+)?)\\b/,\n        \"pattern-punctuation\": {\n            pattern: /%(?=[({[])/,\n            alias: \"punctuation\"\n        },\n        operator: /[-+*\\/%~!^]=?|=[=>]?|&[&=]?|\\|[|=]?|<<?=?|>>?>?=?|(?:absent|and|not|or|present|xor)\\b/,\n        punctuation: /::|[;\\[\\]()\\{\\},.:]/\n    };\n    var n = '#\\\\{(?:[^\"{}]|\\\\{[^{}]*\\\\}|\"(?:[^\"\\\\\\\\\\r\\n]|\\\\\\\\(?:\\r\\n|[^]))*\")*\\\\}';\n    e.languages.tremor[\"interpolated-string\"] = {\n        pattern: RegExp('(^|[^\\\\\\\\])(?:\"\"\"(?:[^\"\\\\\\\\#]|\\\\\\\\[^]|\"(?!\"\")|#(?!\\\\{)|' + n + ')*\"\"\"|\"(?:[^\"\\\\\\\\\\r\\n#]|\\\\\\\\(?:\\r\\n|[^])|#(?!\\\\{)|' + n + ')*\")'),\n        lookbehind: !0,\n        greedy: !0,\n        inside: {\n            interpolation: {\n                pattern: RegExp(n),\n                inside: {\n                    punctuation: /^#\\{|\\}$/,\n                    expression: {\n                        pattern: /[\\s\\S]+/,\n                        inside: e.languages.tremor\n                    }\n                }\n            },\n            string: /[\\s\\S]+/\n        }\n    }, e.languages.troy = e.languages.tremor, e.languages.trickle = e.languages.tremor;\n}(Prism);\nPrism.languages.twig = {\n    comment: /^\\{#[\\s\\S]*?#\\}$/,\n    \"tag-name\": {\n        pattern: /(^\\{%-?\\s*)\\w+/,\n        lookbehind: !0,\n        alias: \"keyword\"\n    },\n    delimiter: {\n        pattern: /^\\{[{%]-?|-?[%}]\\}$/,\n        alias: \"punctuation\"\n    },\n    string: {\n        pattern: /(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n        inside: {\n            punctuation: /^['\"]|['\"]$/\n        }\n    },\n    keyword: /\\b(?:even|if|odd)\\b/,\n    boolean: /\\b(?:false|null|true)\\b/,\n    number: /\\b0x[\\dA-Fa-f]+|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[Ee][-+]?\\d+)?/,\n    operator: [\n        {\n            pattern: /(\\s)(?:and|b-and|b-or|b-xor|ends with|in|is|matches|not|or|same as|starts with)(?=\\s)/,\n            lookbehind: !0\n        },\n        /[=<>]=?|!=|\\*\\*?|\\/\\/?|\\?:?|[-+~%|]/\n    ],\n    punctuation: /[()\\[\\]{}:.,]/\n}, Prism.hooks.add(\"before-tokenize\", function(e) {\n    \"twig\" === e.language && Prism.languages[\"markup-templating\"].buildPlaceholders(e, \"twig\", /\\{(?:#[\\s\\S]*?#|%[\\s\\S]*?%|\\{[\\s\\S]*?\\})\\}/g);\n}), Prism.hooks.add(\"after-tokenize\", function(e) {\n    Prism.languages[\"markup-templating\"].tokenizePlaceholders(e, \"twig\");\n});\n!function(E) {\n    var n = /\\b(?:ACT|ACTIFSUB|CARRAY|CASE|CLEARGIF|COA|COA_INT|CONSTANTS|CONTENT|CUR|EDITPANEL|EFFECT|EXT|FILE|FLUIDTEMPLATE|FORM|FRAME|FRAMESET|GIFBUILDER|GMENU|GMENU_FOLDOUT|GMENU_LAYERS|GP|HMENU|HRULER|HTML|IENV|IFSUB|IMAGE|IMGMENU|IMGMENUITEM|IMGTEXT|IMG_RESOURCE|INCLUDE_TYPOSCRIPT|JSMENU|JSMENUITEM|LLL|LOAD_REGISTER|NO|PAGE|RECORDS|RESTORE_REGISTER|TEMPLATE|TEXT|TMENU|TMENUITEM|TMENU_LAYERS|USER|USER_INT|_GIFBUILDER|global|globalString|globalVar)\\b/;\n    E.languages.typoscript = {\n        comment: [\n            {\n                pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n                lookbehind: !0\n            },\n            {\n                pattern: /(^|[^\\\\:= \\t]|(?:^|[^= \\t])[ \\t]+)\\/\\/.*/,\n                lookbehind: !0,\n                greedy: !0\n            },\n            {\n                pattern: /(^|[^\"'])#.*/,\n                lookbehind: !0,\n                greedy: !0\n            }\n        ],\n        function: [\n            {\n                pattern: /<INCLUDE_TYPOSCRIPT:\\s*source\\s*=\\s*(?:\"[^\"\\r\\n]*\"|'[^'\\r\\n]*')\\s*>/,\n                inside: {\n                    string: {\n                        pattern: /\"[^\"\\r\\n]*\"|'[^'\\r\\n]*'/,\n                        inside: {\n                            keyword: n\n                        }\n                    },\n                    keyword: {\n                        pattern: /INCLUDE_TYPOSCRIPT/\n                    }\n                }\n            },\n            {\n                pattern: /@import\\s*(?:\"[^\"\\r\\n]*\"|'[^'\\r\\n]*')/,\n                inside: {\n                    string: /\"[^\"\\r\\n]*\"|'[^'\\r\\n]*'/\n                }\n            }\n        ],\n        string: {\n            pattern: /^([^=]*=[< ]?)(?:(?!\\]\\n).)*/,\n            lookbehind: !0,\n            inside: {\n                function: /\\{\\$.*\\}/,\n                keyword: n,\n                number: /^\\d+$/,\n                punctuation: /[,|:]/\n            }\n        },\n        keyword: n,\n        number: {\n            pattern: /\\b\\d+\\s*[.{=]/,\n            inside: {\n                operator: /[.{=]/\n            }\n        },\n        tag: {\n            pattern: /\\.?[-\\w\\\\]+\\.?/,\n            inside: {\n                punctuation: /\\./\n            }\n        },\n        punctuation: /[{}[\\];(),.:|]/,\n        operator: /[<>]=?|[!=]=?=?|--?|\\+\\+?|&&?|\\|\\|?|[?*/~^%]/\n    }, E.languages.tsconfig = E.languages.typoscript;\n}(Prism);\nPrism.languages.unrealscript = {\n    comment: /\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\//,\n    string: {\n        pattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n        greedy: !0\n    },\n    category: {\n        pattern: /(\\b(?:(?:autoexpand|hide|show)categories|var)\\s*\\()[^()]+(?=\\))/,\n        lookbehind: !0,\n        greedy: !0,\n        alias: \"property\"\n    },\n    metadata: {\n        pattern: /(\\w\\s*)<\\s*\\w+\\s*=[^<>|=\\r\\n]+(?:\\|\\s*\\w+\\s*=[^<>|=\\r\\n]+)*>/,\n        lookbehind: !0,\n        greedy: !0,\n        inside: {\n            property: /\\b\\w+(?=\\s*=)/,\n            operator: /=/,\n            punctuation: /[<>|]/\n        }\n    },\n    macro: {\n        pattern: /`\\w+/,\n        alias: \"property\"\n    },\n    \"class-name\": {\n        pattern: /(\\b(?:class|enum|extends|interface|state(?:\\(\\))?|struct|within)\\s+)\\w+/,\n        lookbehind: !0\n    },\n    keyword: /\\b(?:abstract|actor|array|auto|autoexpandcategories|bool|break|byte|case|class|classgroup|client|coerce|collapsecategories|config|const|continue|default|defaultproperties|delegate|dependson|deprecated|do|dontcollapsecategories|editconst|editinlinenew|else|enum|event|exec|export|extends|final|float|for|forcescriptorder|foreach|function|goto|guid|hidecategories|hidedropdown|if|ignores|implements|inherits|input|int|interface|iterator|latent|local|material|name|native|nativereplication|noexport|nontransient|noteditinlinenew|notplaceable|operator|optional|out|pawn|perobjectconfig|perobjectlocalized|placeable|postoperator|preoperator|private|protected|reliable|replication|return|server|showcategories|simulated|singular|state|static|string|struct|structdefault|structdefaultproperties|switch|texture|transient|travel|unreliable|until|var|vector|while|within)\\b/,\n    function: /\\b[a-z_]\\w*(?=\\s*\\()/i,\n    boolean: /\\b(?:false|true)\\b/,\n    number: /\\b0x[\\da-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,\n    operator: />>|<<|--|\\+\\+|\\*\\*|[-+*/~!=<>$@]=?|&&?|\\|\\|?|\\^\\^?|[?:%]|\\b(?:ClockwiseFrom|Cross|Dot)\\b/,\n    punctuation: /[()[\\]{};,.]/\n}, Prism.languages.uc = Prism.languages.uscript = Prism.languages.unrealscript;\nPrism.languages.uorazor = {\n    \"comment-hash\": {\n        pattern: /#.*/,\n        alias: \"comment\",\n        greedy: !0\n    },\n    \"comment-slash\": {\n        pattern: /\\/\\/.*/,\n        alias: \"comment\",\n        greedy: !0\n    },\n    string: {\n        pattern: /(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n        inside: {\n            punctuation: /^['\"]|['\"]$/\n        },\n        greedy: !0\n    },\n    \"source-layers\": {\n        pattern: /\\b(?:arms|backpack|blue|bracelet|cancel|clear|cloak|criminal|earrings|enemy|facialhair|friend|friendly|gloves|gray|grey|ground|hair|head|innerlegs|innertorso|innocent|lefthand|middletorso|murderer|neck|nonfriendly|onehandedsecondary|outerlegs|outertorso|pants|red|righthand|ring|self|shirt|shoes|talisman|waist)\\b/i,\n        alias: \"function\"\n    },\n    \"source-commands\": {\n        pattern: /\\b(?:alliance|attack|cast|clearall|clearignore|clearjournal|clearlist|clearsysmsg|createlist|createtimer|dclick|dclicktype|dclickvar|dress|dressconfig|drop|droprelloc|emote|getlabel|guild|gumpclose|gumpresponse|hotkey|ignore|lasttarget|lift|lifttype|menu|menuresponse|msg|org|organize|organizer|overhead|pause|poplist|potion|promptresponse|pushlist|removelist|removetimer|rename|restock|say|scav|scavenger|script|setability|setlasttarget|setskill|settimer|setvar|sysmsg|target|targetloc|targetrelloc|targettype|undress|unignore|unsetvar|useobject|useonce|useskill|usetype|virtue|wait|waitforgump|waitformenu|waitforprompt|waitforstat|waitforsysmsg|waitfortarget|walk|wfsysmsg|wft|whisper|yell)\\b/,\n        alias: \"function\"\n    },\n    \"tag-name\": {\n        pattern: /(^\\{%-?\\s*)\\w+/,\n        lookbehind: !0,\n        alias: \"keyword\"\n    },\n    delimiter: {\n        pattern: /^\\{[{%]-?|-?[%}]\\}$/,\n        alias: \"punctuation\"\n    },\n    function: /\\b(?:atlist|close|closest|count|counter|counttype|dead|dex|diffhits|diffmana|diffstam|diffweight|find|findbuff|finddebuff|findlayer|findtype|findtypelist|followers|gumpexists|hidden|hits|hp|hue|human|humanoid|ingump|inlist|insysmessage|insysmsg|int|invul|lhandempty|list|listexists|mana|maxhits|maxhp|maxmana|maxstam|maxweight|monster|mounted|name|next|noto|paralyzed|poisoned|position|prev|previous|queued|rand|random|rhandempty|skill|stam|str|targetexists|timer|timerexists|varexist|warmode|weight)\\b/,\n    keyword: /\\b(?:and|as|break|continue|else|elseif|endfor|endif|endwhile|for|if|loop|not|or|replay|stop|while)\\b/,\n    boolean: /\\b(?:false|null|true)\\b/,\n    number: /\\b0x[\\dA-Fa-f]+|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[Ee][-+]?\\d+)?/,\n    operator: [\n        {\n            pattern: /(\\s)(?:and|b-and|b-or|b-xor|ends with|in|is|matches|not|or|same as|starts with)(?=\\s)/,\n            lookbehind: !0\n        },\n        /[=<>]=?|!=|\\*\\*?|\\/\\/?|\\?:?|[-+~%|]/\n    ],\n    punctuation: /[()\\[\\]{}:.,]/\n};\nPrism.languages.uri = {\n    scheme: {\n        pattern: /^[a-z][a-z0-9+.-]*:/im,\n        greedy: !0,\n        inside: {\n            \"scheme-delimiter\": /:$/\n        }\n    },\n    fragment: {\n        pattern: /#[\\w\\-.~!$&'()*+,;=%:@/?]*/,\n        inside: {\n            \"fragment-delimiter\": /^#/\n        }\n    },\n    query: {\n        pattern: /\\?[\\w\\-.~!$&'()*+,;=%:@/?]*/,\n        inside: {\n            \"query-delimiter\": {\n                pattern: /^\\?/,\n                greedy: !0\n            },\n            \"pair-delimiter\": /[&;]/,\n            pair: {\n                pattern: /^[^=][\\s\\S]*/,\n                inside: {\n                    key: /^[^=]+/,\n                    value: {\n                        pattern: /(^=)[\\s\\S]+/,\n                        lookbehind: !0\n                    }\n                }\n            }\n        }\n    },\n    authority: {\n        pattern: RegExp(\"^//(?:[\\\\w\\\\-.~!$&'()*+,;=%:]*@)?(?:\\\\[(?:[0-9a-fA-F:.]{2,48}|v[0-9a-fA-F]+\\\\.[\\\\w\\\\-.~!$&'()*+,;=]+)\\\\]|[\\\\w\\\\-.~!$&'()*+,;=%]*)(?::\\\\d*)?\", \"m\"),\n        inside: {\n            \"authority-delimiter\": /^\\/\\//,\n            \"user-info-segment\": {\n                pattern: /^[\\w\\-.~!$&'()*+,;=%:]*@/,\n                inside: {\n                    \"user-info-delimiter\": /@$/,\n                    \"user-info\": /^[\\w\\-.~!$&'()*+,;=%:]+/\n                }\n            },\n            \"port-segment\": {\n                pattern: /:\\d*$/,\n                inside: {\n                    \"port-delimiter\": /^:/,\n                    port: /^\\d+/\n                }\n            },\n            host: {\n                pattern: /[\\s\\S]+/,\n                inside: {\n                    \"ip-literal\": {\n                        pattern: /^\\[[\\s\\S]+\\]$/,\n                        inside: {\n                            \"ip-literal-delimiter\": /^\\[|\\]$/,\n                            \"ipv-future\": /^v[\\s\\S]+/,\n                            \"ipv6-address\": /^[\\s\\S]+/\n                        }\n                    },\n                    \"ipv4-address\": /^(?:(?:[03-9]\\d?|[12]\\d{0,2})\\.){3}(?:[03-9]\\d?|[12]\\d{0,2})$/\n                }\n            }\n        }\n    },\n    path: {\n        pattern: /^[\\w\\-.~!$&'()*+,;=%:@/]+/m,\n        inside: {\n            \"path-separator\": /\\//\n        }\n    }\n}, Prism.languages.url = Prism.languages.uri;\n!function(e) {\n    var n = {\n        pattern: /[\\s\\S]+/,\n        inside: null\n    };\n    e.languages.v = e.languages.extend(\"clike\", {\n        string: {\n            pattern: /r?([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n            alias: \"quoted-string\",\n            greedy: !0,\n            inside: {\n                interpolation: {\n                    pattern: /((?:^|[^\\\\])(?:\\\\{2})*)\\$(?:\\{[^{}]*\\}|\\w+(?:\\.\\w+(?:\\([^\\(\\)]*\\))?|\\[[^\\[\\]]+\\])*)/,\n                    lookbehind: !0,\n                    inside: {\n                        \"interpolation-variable\": {\n                            pattern: /^\\$\\w[\\s\\S]*$/,\n                            alias: \"variable\"\n                        },\n                        \"interpolation-punctuation\": {\n                            pattern: /^\\$\\{|\\}$/,\n                            alias: \"punctuation\"\n                        },\n                        \"interpolation-expression\": n\n                    }\n                }\n            }\n        },\n        \"class-name\": {\n            pattern: /(\\b(?:enum|interface|struct|type)\\s+)(?:C\\.)?\\w+/,\n            lookbehind: !0\n        },\n        keyword: /(?:\\b(?:__global|as|asm|assert|atomic|break|chan|const|continue|defer|else|embed|enum|fn|for|go(?:to)?|if|import|in|interface|is|lock|match|module|mut|none|or|pub|return|rlock|select|shared|sizeof|static|struct|type(?:of)?|union|unsafe)|\\$(?:else|for|if)|#(?:flag|include))\\b/,\n        number: /\\b(?:0x[a-f\\d]+(?:_[a-f\\d]+)*|0b[01]+(?:_[01]+)*|0o[0-7]+(?:_[0-7]+)*|\\d+(?:_\\d+)*(?:\\.\\d+(?:_\\d+)*)?)\\b/i,\n        operator: /~|\\?|[*\\/%^!=]=?|\\+[=+]?|-[=-]?|\\|[=|]?|&(?:=|&|\\^=?)?|>(?:>=?|=)?|<(?:<=?|=|-)?|:=|\\.\\.\\.?/,\n        builtin: /\\b(?:any(?:_float|_int)?|bool|byte(?:ptr)?|charptr|f(?:32|64)|i(?:8|16|64|128|nt)|rune|size_t|string|u(?:16|32|64|128)|voidptr)\\b/\n    }), n.inside = e.languages.v, e.languages.insertBefore(\"v\", \"string\", {\n        char: {\n            pattern: /`(?:\\\\`|\\\\?[^`]{1,2})`/,\n            alias: \"rune\"\n        }\n    }), e.languages.insertBefore(\"v\", \"operator\", {\n        attribute: {\n            pattern: /(^[\\t ]*)\\[(?:deprecated|direct_array_access|flag|inline|live|ref_only|typedef|unsafe_fn|windows_stdcall)\\]/m,\n            lookbehind: !0,\n            alias: \"annotation\",\n            inside: {\n                punctuation: /[\\[\\]]/,\n                keyword: /\\w+/\n            }\n        },\n        generic: {\n            pattern: /<\\w+>(?=\\s*[\\)\\{])/,\n            inside: {\n                punctuation: /[<>]/,\n                \"class-name\": /\\w+/\n            }\n        }\n    }), e.languages.insertBefore(\"v\", \"function\", {\n        \"generic-function\": {\n            pattern: /\\b\\w+\\s*<\\w+>(?=\\()/,\n            inside: {\n                function: /^\\w+/,\n                generic: {\n                    pattern: /<\\w+>/,\n                    inside: e.languages.v.generic.inside\n                }\n            }\n        }\n    });\n}(Prism);\nPrism.languages.vala = Prism.languages.extend(\"clike\", {\n    \"class-name\": [\n        {\n            pattern: /\\b[A-Z]\\w*(?:\\.\\w+)*\\b(?=(?:\\?\\s+|\\*?\\s+\\*?)\\w)/,\n            inside: {\n                punctuation: /\\./\n            }\n        },\n        {\n            pattern: /(\\[)[A-Z]\\w*(?:\\.\\w+)*\\b/,\n            lookbehind: !0,\n            inside: {\n                punctuation: /\\./\n            }\n        },\n        {\n            pattern: /(\\b(?:class|interface)\\s+[A-Z]\\w*(?:\\.\\w+)*\\s*:\\s*)[A-Z]\\w*(?:\\.\\w+)*\\b/,\n            lookbehind: !0,\n            inside: {\n                punctuation: /\\./\n            }\n        },\n        {\n            pattern: /((?:\\b(?:class|enum|interface|new|struct)\\s+)|(?:catch\\s+\\())[A-Z]\\w*(?:\\.\\w+)*\\b/,\n            lookbehind: !0,\n            inside: {\n                punctuation: /\\./\n            }\n        }\n    ],\n    keyword: /\\b(?:abstract|as|assert|async|base|bool|break|case|catch|char|class|const|construct|continue|default|delegate|delete|do|double|dynamic|else|ensures|enum|errordomain|extern|finally|float|for|foreach|get|if|in|inline|int|int16|int32|int64|int8|interface|internal|is|lock|long|namespace|new|null|out|override|owned|params|private|protected|public|ref|requires|return|set|short|signal|sizeof|size_t|ssize_t|static|string|struct|switch|this|throw|throws|try|typeof|uchar|uint|uint16|uint32|uint64|uint8|ulong|unichar|unowned|ushort|using|value|var|virtual|void|volatile|weak|while|yield)\\b/i,\n    function: /\\b\\w+(?=\\s*\\()/,\n    number: /(?:\\b0x[\\da-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?)(?:f|u?l?)?/i,\n    operator: /\\+\\+|--|&&|\\|\\||<<=?|>>=?|=>|->|~|[+\\-*\\/%&^|=!<>]=?|\\?\\??|\\.\\.\\./,\n    punctuation: /[{}[\\];(),.:]/,\n    constant: /\\b[A-Z0-9_]+\\b/\n}), Prism.languages.insertBefore(\"vala\", \"string\", {\n    \"raw-string\": {\n        pattern: /\"\"\"[\\s\\S]*?\"\"\"/,\n        greedy: !0,\n        alias: \"string\"\n    },\n    \"template-string\": {\n        pattern: /@\"[\\s\\S]*?\"/,\n        greedy: !0,\n        inside: {\n            interpolation: {\n                pattern: /\\$(?:\\([^)]*\\)|[a-zA-Z]\\w*)/,\n                inside: {\n                    delimiter: {\n                        pattern: /^\\$\\(?|\\)$/,\n                        alias: \"punctuation\"\n                    },\n                    rest: Prism.languages.vala\n                }\n            },\n            string: /[\\s\\S]+/\n        }\n    }\n}), Prism.languages.insertBefore(\"vala\", \"keyword\", {\n    regex: {\n        pattern: /\\/(?:\\[(?:[^\\]\\\\\\r\\n]|\\\\.)*\\]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[imsx]{0,4}(?=\\s*(?:$|[\\r\\n,.;})\\]]))/,\n        greedy: !0,\n        inside: {\n            \"regex-source\": {\n                pattern: /^(\\/)[\\s\\S]+(?=\\/[a-z]*$)/,\n                lookbehind: !0,\n                alias: \"language-regex\",\n                inside: Prism.languages.regex\n            },\n            \"regex-delimiter\": /^\\//,\n            \"regex-flags\": /^[a-z]+$/\n        }\n    }\n});\n!function(e) {\n    e.languages.velocity = e.languages.extend(\"markup\", {});\n    var n = {\n        variable: {\n            pattern: /(^|[^\\\\](?:\\\\\\\\)*)\\$!?(?:[a-z][\\w-]*(?:\\([^)]*\\))?(?:\\.[a-z][\\w-]*(?:\\([^)]*\\))?|\\[[^\\]]+\\])*|\\{[^}]+\\})/i,\n            lookbehind: !0,\n            inside: {}\n        },\n        string: {\n            pattern: /\"[^\"]*\"|'[^']*'/,\n            greedy: !0\n        },\n        number: /\\b\\d+\\b/,\n        boolean: /\\b(?:false|true)\\b/,\n        operator: /[=!<>]=?|[+*/%-]|&&|\\|\\||\\.\\.|\\b(?:eq|g[et]|l[et]|n(?:e|ot))\\b/,\n        punctuation: /[(){}[\\]:,.]/\n    };\n    n.variable.inside = {\n        string: n.string,\n        function: {\n            pattern: /([^\\w-])[a-z][\\w-]*(?=\\()/,\n            lookbehind: !0\n        },\n        number: n.number,\n        boolean: n.boolean,\n        punctuation: n.punctuation\n    }, e.languages.insertBefore(\"velocity\", \"comment\", {\n        unparsed: {\n            pattern: /(^|[^\\\\])#\\[\\[[\\s\\S]*?\\]\\]#/,\n            lookbehind: !0,\n            greedy: !0,\n            inside: {\n                punctuation: /^#\\[\\[|\\]\\]#$/\n            }\n        },\n        \"velocity-comment\": [\n            {\n                pattern: /(^|[^\\\\])#\\*[\\s\\S]*?\\*#/,\n                lookbehind: !0,\n                greedy: !0,\n                alias: \"comment\"\n            },\n            {\n                pattern: /(^|[^\\\\])##.*/,\n                lookbehind: !0,\n                greedy: !0,\n                alias: \"comment\"\n            }\n        ],\n        directive: {\n            pattern: /(^|[^\\\\](?:\\\\\\\\)*)#@?(?:[a-z][\\w-]*|\\{[a-z][\\w-]*\\})(?:\\s*\\((?:[^()]|\\([^()]*\\))*\\))?/i,\n            lookbehind: !0,\n            inside: {\n                keyword: {\n                    pattern: /^#@?(?:[a-z][\\w-]*|\\{[a-z][\\w-]*\\})|\\bin\\b/,\n                    inside: {\n                        punctuation: /[{}]/\n                    }\n                },\n                rest: n\n            }\n        },\n        variable: n.variable\n    }), e.languages.velocity.tag.inside[\"attr-value\"].inside.rest = e.languages.velocity;\n}(Prism);\nPrism.languages.verilog = {\n    comment: {\n        pattern: /\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\//,\n        greedy: !0\n    },\n    string: {\n        pattern: /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"/,\n        greedy: !0\n    },\n    \"kernel-function\": {\n        pattern: /\\B\\$\\w+\\b/,\n        alias: \"property\"\n    },\n    constant: /\\B`\\w+\\b/,\n    function: /\\b\\w+(?=\\()/,\n    keyword: /\\b(?:alias|and|assert|assign|assume|automatic|before|begin|bind|bins|binsof|bit|break|buf|bufif0|bufif1|byte|case|casex|casez|cell|chandle|class|clocking|cmos|config|const|constraint|context|continue|cover|covergroup|coverpoint|cross|deassign|default|defparam|design|disable|dist|do|edge|else|end|endcase|endclass|endclocking|endconfig|endfunction|endgenerate|endgroup|endinterface|endmodule|endpackage|endprimitive|endprogram|endproperty|endsequence|endspecify|endtable|endtask|enum|event|expect|export|extends|extern|final|first_match|for|force|foreach|forever|fork|forkjoin|function|generate|genvar|highz0|highz1|if|iff|ifnone|ignore_bins|illegal_bins|import|incdir|include|initial|inout|input|inside|instance|int|integer|interface|intersect|join|join_any|join_none|large|liblist|library|local|localparam|logic|longint|macromodule|matches|medium|modport|module|nand|negedge|new|nmos|nor|noshowcancelled|not|notif0|notif1|null|or|output|package|packed|parameter|pmos|posedge|primitive|priority|program|property|protected|pull0|pull1|pulldown|pullup|pulsestyle_ondetect|pulsestyle_onevent|pure|rand|randc|randcase|randsequence|rcmos|real|realtime|ref|reg|release|repeat|return|rnmos|rpmos|rtran|rtranif0|rtranif1|scalared|sequence|shortint|shortreal|showcancelled|signed|small|solve|specify|specparam|static|string|strong0|strong1|struct|super|supply0|supply1|table|tagged|task|this|throughout|time|timeprecision|timeunit|tran|tranif0|tranif1|tri|tri0|tri1|triand|trior|trireg|type|typedef|union|unique|unsigned|use|uwire|var|vectored|virtual|void|wait|wait_order|wand|weak0|weak1|while|wildcard|wire|with|within|wor|xnor|xor)\\b/,\n    important: /\\b(?:always|always_comb|always_ff|always_latch)\\b(?: *@)?/,\n    number: /\\B##?\\d+|(?:\\b\\d+)?'[odbh] ?[\\da-fzx_?]+|\\b(?:\\d*[._])?\\d+(?:e[-+]?\\d+)?/i,\n    operator: /[-+{}^~%*\\/?=!<>&|]+/,\n    punctuation: /[[\\];(),.:]/\n};\nPrism.languages.vhdl = {\n    comment: /--.+/,\n    \"vhdl-vectors\": {\n        pattern: /\\b[oxb]\"[\\da-f_]+\"|\"[01uxzwlh-]+\"/i,\n        alias: \"number\"\n    },\n    \"quoted-function\": {\n        pattern: /\"\\S+?\"(?=\\()/,\n        alias: \"function\"\n    },\n    string: /\"(?:[^\\\\\"\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*\"/,\n    attribute: {\n        pattern: /\\b'\\w+/,\n        alias: \"attr-name\"\n    },\n    keyword: /\\b(?:access|after|alias|all|architecture|array|assert|attribute|begin|block|body|buffer|bus|case|component|configuration|constant|disconnect|downto|else|elsif|end|entity|exit|file|for|function|generate|generic|group|guarded|if|impure|in|inertial|inout|is|label|library|linkage|literal|loop|map|new|next|null|of|on|open|others|out|package|port|postponed|private|procedure|process|pure|range|record|register|reject|report|return|select|severity|shared|signal|subtype|then|to|transport|type|unaffected|units|until|use|variable|view|wait|when|while|with)\\b/i,\n    boolean: /\\b(?:false|true)\\b/i,\n    function: /\\w+(?=\\()/,\n    number: /'[01uxzwlh-]'|\\b(?:\\d+#[\\da-f_.]+#|\\d[\\d_.]*)(?:e[-+]?\\d+)?/i,\n    operator: /[<>]=?|:=|[-+*/&=]|\\b(?:abs|and|mod|nand|nor|not|or|rem|rol|ror|sla|sll|sra|srl|xnor|xor)\\b/i,\n    punctuation: /[{}[\\];(),.:]/\n};\nPrism.languages.vim = {\n    string: /\"(?:[^\"\\\\\\r\\n]|\\\\.)*\"|'(?:[^'\\r\\n]|'')*'/,\n    comment: /\".*/,\n    function: /\\b\\w+(?=\\()/,\n    keyword: /\\b(?:N|Next|P|Print|X|XMLent|XMLns|ab|abbreviate|abc|abclear|abo|aboveleft|al|all|ar|arga|argadd|argd|argdelete|argdo|arge|argedit|argg|argglobal|argl|arglocal|args|argu|argument|as|ascii|b|bN|bNext|ba|bad|badd|ball|bd|bdelete|be|bel|belowright|bf|bfirst|bl|blast|bm|bmodified|bn|bnext|bo|botright|bp|bprevious|br|brea|break|breaka|breakadd|breakd|breakdel|breakl|breaklist|brewind|bro|browse|bufdo|buffer|buffers|bun|bunload|bw|bwipeout|c|cN|cNext|cNfcNfile|ca|cabbrev|cabc|cabclear|cad|caddb|caddbuffer|caddexpr|caddf|caddfile|cal|call|cat|catch|cb|cbuffer|cc|ccl|cclose|cd|ce|center|cex|cexpr|cf|cfile|cfir|cfirst|cg|cgetb|cgetbuffer|cgete|cgetexpr|cgetfile|change|changes|chd|chdir|che|checkpath|checkt|checktime|cl|cla|clast|clist|clo|close|cmapc|cmapclear|cn|cnew|cnewer|cnext|cnf|cnfile|cnorea|cnoreabbrev|co|col|colder|colo|colorscheme|comc|comclear|comp|compiler|con|conf|confirm|continue|cope|copen|copy|cp|cpf|cpfile|cprevious|cq|cquit|cr|crewind|cu|cuna|cunabbrev|cunmap|cw|cwindow|d|debugg|debuggreedy|delc|delcommand|delete|delf|delfunction|delm|delmarks|di|diffg|diffget|diffoff|diffpatch|diffpu|diffput|diffsplit|diffthis|diffu|diffupdate|dig|digraphs|display|dj|djump|dl|dlist|dr|drop|ds|dsearch|dsp|dsplit|e|earlier|echoe|echoerr|echom|echomsg|echon|edit|el|else|elsei|elseif|em|emenu|en|endf|endfo|endfor|endfun|endfunction|endif|endt|endtry|endw|endwhile|ene|enew|ex|exi|exit|exu|exusage|f|file|files|filetype|fin|fina|finally|find|fini|finish|fir|first|fix|fixdel|fo|fold|foldc|foldclose|foldd|folddoc|folddoclosed|folddoopen|foldo|foldopen|for|fu|fun|function|go|goto|gr|grep|grepa|grepadd|h|ha|hardcopy|help|helpf|helpfind|helpg|helpgrep|helpt|helptags|hid|hide|his|history|ia|iabbrev|iabc|iabclear|if|ij|ijump|il|ilist|imapc|imapclear|in|inorea|inoreabbrev|isearch|isp|isplit|iu|iuna|iunabbrev|iunmap|j|join|ju|jumps|k|kee|keepalt|keepj|keepjumps|keepmarks|l|lN|lNext|lNf|lNfile|la|lad|laddb|laddbuffer|laddexpr|laddf|laddfile|lan|language|last|later|lb|lbuffer|lc|lcd|lch|lchdir|lcl|lclose|left|lefta|leftabove|let|lex|lexpr|lf|lfile|lfir|lfirst|lg|lgetb|lgetbuffer|lgete|lgetexpr|lgetfile|lgr|lgrep|lgrepa|lgrepadd|lh|lhelpgrep|list|ll|lla|llast|lli|llist|lm|lmak|lmake|lmap|lmapc|lmapclear|ln|lne|lnew|lnewer|lnext|lnf|lnfile|lnoremap|lo|loadview|loc|lockmarks|lockv|lockvar|lol|lolder|lop|lopen|lp|lpf|lpfile|lprevious|lr|lrewind|ls|lt|ltag|lu|lunmap|lv|lvimgrep|lvimgrepa|lvimgrepadd|lw|lwindow|m|ma|mak|make|mark|marks|mat|match|menut|menutranslate|mk|mkexrc|mks|mksession|mksp|mkspell|mkv|mkvie|mkview|mkvimrc|mod|mode|move|mz|mzf|mzfile|mzscheme|n|nbkey|new|next|nmapc|nmapclear|noh|nohlsearch|norea|noreabbrev|nu|number|nun|nunmap|o|omapc|omapclear|on|only|open|opt|options|ou|ounmap|p|pc|pclose|pe|ped|pedit|perl|perld|perldo|po|pop|popu|popup|pp|ppop|pre|preserve|prev|previous|print|prof|profd|profdel|profile|promptf|promptfind|promptr|promptrepl|ps|psearch|ptN|ptNext|pta|ptag|ptf|ptfirst|ptj|ptjump|ptl|ptlast|ptn|ptnext|ptp|ptprevious|ptr|ptrewind|pts|ptselect|pu|put|pw|pwd|py|pyf|pyfile|python|q|qa|qall|quit|quita|quitall|r|read|rec|recover|red|redi|redir|redo|redr|redraw|redraws|redrawstatus|reg|registers|res|resize|ret|retab|retu|return|rew|rewind|ri|right|rightb|rightbelow|ru|rub|ruby|rubyd|rubydo|rubyf|rubyfile|runtime|rv|rviminfo|sN|sNext|sa|sal|sall|san|sandbox|sargument|sav|saveas|sb|sbN|sbNext|sba|sball|sbf|sbfirst|sbl|sblast|sbm|sbmodified|sbn|sbnext|sbp|sbprevious|sbr|sbrewind|sbuffer|scrip|scripte|scriptencoding|scriptnames|se|set|setf|setfiletype|setg|setglobal|setl|setlocal|sf|sfind|sfir|sfirst|sh|shell|sign|sil|silent|sim|simalt|sl|sla|slast|sleep|sm|smagic|smap|smapc|smapclear|sme|smenu|sn|snext|sni|sniff|sno|snomagic|snor|snoremap|snoreme|snoremenu|so|sor|sort|source|sp|spe|spelld|spelldump|spellgood|spelli|spellinfo|spellr|spellrepall|spellu|spellundo|spellw|spellwrong|split|spr|sprevious|sre|srewind|st|sta|stag|star|startg|startgreplace|startinsert|startr|startreplace|stj|stjump|stop|stopi|stopinsert|sts|stselect|sun|sunhide|sunm|sunmap|sus|suspend|sv|sview|syncbind|t|tN|tNext|ta|tab|tabN|tabNext|tabc|tabclose|tabd|tabdo|tabe|tabedit|tabf|tabfind|tabfir|tabfirst|tabl|tablast|tabm|tabmove|tabn|tabnew|tabnext|tabo|tabonly|tabp|tabprevious|tabr|tabrewind|tabs|tag|tags|tc|tcl|tcld|tcldo|tclf|tclfile|te|tearoff|tf|tfirst|th|throw|tj|tjump|tl|tlast|tm|tmenu|tn|tnext|to|topleft|tp|tprevious|tr|trewind|try|ts|tselect|tu|tunmenu|u|una|unabbreviate|undo|undoj|undojoin|undol|undolist|unh|unhide|unlet|unlo|unlockvar|unm|unmap|up|update|ve|verb|verbose|version|vert|vertical|vi|vie|view|vim|vimgrep|vimgrepa|vimgrepadd|visual|viu|viusage|vmapc|vmapclear|vne|vnew|vs|vsplit|vu|vunmap|w|wN|wNext|wa|wall|wh|while|win|winc|wincmd|windo|winp|winpos|winsize|wn|wnext|wp|wprevious|wq|wqa|wqall|write|ws|wsverb|wv|wviminfo|x|xa|xall|xit|xm|xmap|xmapc|xmapclear|xme|xmenu|xn|xnoremap|xnoreme|xnoremenu|xu|xunmap|y|yank)\\b/,\n    builtin: /\\b(?:acd|ai|akm|aleph|allowrevins|altkeymap|ambiwidth|ambw|anti|antialias|arab|arabic|arabicshape|ari|arshape|autochdir|autocmd|autoindent|autoread|autowrite|autowriteall|aw|awa|background|backspace|backup|backupcopy|backupdir|backupext|backupskip|balloondelay|ballooneval|balloonexpr|bdir|bdlay|beval|bex|bexpr|bg|bh|bin|binary|biosk|bioskey|bk|bkc|bomb|breakat|brk|browsedir|bs|bsdir|bsk|bt|bufhidden|buflisted|buftype|casemap|ccv|cdpath|cedit|cfu|ch|charconvert|ci|cin|cindent|cink|cinkeys|cino|cinoptions|cinw|cinwords|clipboard|cmdheight|cmdwinheight|cmp|cms|columns|com|comments|commentstring|compatible|complete|completefunc|completeopt|consk|conskey|copyindent|cot|cpo|cpoptions|cpt|cscopepathcomp|cscopeprg|cscopequickfix|cscopetag|cscopetagorder|cscopeverbose|cspc|csprg|csqf|cst|csto|csverb|cuc|cul|cursorcolumn|cursorline|cwh|debug|deco|def|define|delcombine|dex|dg|dict|dictionary|diff|diffexpr|diffopt|digraph|dip|dir|directory|dy|ea|ead|eadirection|eb|ed|edcompatible|ef|efm|ei|ek|enc|encoding|endofline|eol|ep|equalalways|equalprg|errorbells|errorfile|errorformat|esckeys|et|eventignore|expandtab|exrc|fcl|fcs|fdc|fde|fdi|fdl|fdls|fdm|fdn|fdo|fdt|fen|fenc|fencs|fex|ff|ffs|fileencoding|fileencodings|fileformat|fileformats|fillchars|fk|fkmap|flp|fml|fmr|foldcolumn|foldenable|foldexpr|foldignore|foldlevel|foldlevelstart|foldmarker|foldmethod|foldminlines|foldnestmax|foldtext|formatexpr|formatlistpat|formatoptions|formatprg|fp|fs|fsync|ft|gcr|gd|gdefault|gfm|gfn|gfs|gfw|ghr|gp|grepformat|grepprg|gtl|gtt|guicursor|guifont|guifontset|guifontwide|guiheadroom|guioptions|guipty|guitablabel|guitabtooltip|helpfile|helpheight|helplang|hf|hh|hi|hidden|highlight|hk|hkmap|hkmapp|hkp|hl|hlg|hls|hlsearch|ic|icon|iconstring|ignorecase|im|imactivatekey|imak|imc|imcmdline|imd|imdisable|imi|iminsert|ims|imsearch|inc|include|includeexpr|incsearch|inde|indentexpr|indentkeys|indk|inex|inf|infercase|insertmode|invacd|invai|invakm|invallowrevins|invaltkeymap|invanti|invantialias|invar|invarab|invarabic|invarabicshape|invari|invarshape|invautochdir|invautoindent|invautoread|invautowrite|invautowriteall|invaw|invawa|invbackup|invballooneval|invbeval|invbin|invbinary|invbiosk|invbioskey|invbk|invbl|invbomb|invbuflisted|invcf|invci|invcin|invcindent|invcompatible|invconfirm|invconsk|invconskey|invcopyindent|invcp|invcscopetag|invcscopeverbose|invcst|invcsverb|invcuc|invcul|invcursorcolumn|invcursorline|invdeco|invdelcombine|invdg|invdiff|invdigraph|invdisable|invea|inveb|inved|invedcompatible|invek|invendofline|inveol|invequalalways|inverrorbells|invesckeys|invet|invex|invexpandtab|invexrc|invfen|invfk|invfkmap|invfoldenable|invgd|invgdefault|invguipty|invhid|invhidden|invhk|invhkmap|invhkmapp|invhkp|invhls|invhlsearch|invic|invicon|invignorecase|invim|invimc|invimcmdline|invimd|invincsearch|invinf|invinfercase|invinsertmode|invis|invjoinspaces|invjs|invlazyredraw|invlbr|invlinebreak|invlisp|invlist|invloadplugins|invlpl|invlz|invma|invmacatsui|invmagic|invmh|invml|invmod|invmodeline|invmodifiable|invmodified|invmore|invmousef|invmousefocus|invmousehide|invnu|invnumber|invodev|invopendevice|invpaste|invpi|invpreserveindent|invpreviewwindow|invprompt|invpvw|invreadonly|invremap|invrestorescreen|invrevins|invri|invrightleft|invrightleftcmd|invrl|invrlc|invro|invrs|invru|invruler|invsb|invsc|invscb|invscrollbind|invscs|invsecure|invsft|invshellslash|invshelltemp|invshiftround|invshortname|invshowcmd|invshowfulltag|invshowmatch|invshowmode|invsi|invsm|invsmartcase|invsmartindent|invsmarttab|invsmd|invsn|invsol|invspell|invsplitbelow|invsplitright|invspr|invsr|invssl|invsta|invstartofline|invstmp|invswapfile|invswf|invta|invtagbsearch|invtagrelative|invtagstack|invtbi|invtbidi|invtbs|invtermbidi|invterse|invtextauto|invtextmode|invtf|invtgst|invtildeop|invtimeout|invtitle|invto|invtop|invtr|invttimeout|invttybuiltin|invttyfast|invtx|invvb|invvisualbell|invwa|invwarn|invwb|invweirdinvert|invwfh|invwfw|invwildmenu|invwinfixheight|invwinfixwidth|invwiv|invwmnu|invwrap|invwrapscan|invwrite|invwriteany|invwritebackup|invws|isf|isfname|isi|isident|isk|iskeyword|isprint|joinspaces|js|key|keymap|keymodel|keywordprg|km|kmp|kp|langmap|langmenu|laststatus|lazyredraw|lbr|lcs|linebreak|lines|linespace|lisp|lispwords|listchars|loadplugins|lpl|lsp|lz|macatsui|magic|makeef|makeprg|matchpairs|matchtime|maxcombine|maxfuncdepth|maxmapdepth|maxmem|maxmempattern|maxmemtot|mco|mef|menuitems|mfd|mh|mis|mkspellmem|ml|mls|mm|mmd|mmp|mmt|modeline|modelines|modifiable|modified|more|mouse|mousef|mousefocus|mousehide|mousem|mousemodel|mouses|mouseshape|mouset|mousetime|mp|mps|msm|mzq|mzquantum|nf|noacd|noai|noakm|noallowrevins|noaltkeymap|noanti|noantialias|noar|noarab|noarabic|noarabicshape|noari|noarshape|noautochdir|noautoindent|noautoread|noautowrite|noautowriteall|noaw|noawa|nobackup|noballooneval|nobeval|nobin|nobinary|nobiosk|nobioskey|nobk|nobl|nobomb|nobuflisted|nocf|noci|nocin|nocindent|nocompatible|noconfirm|noconsk|noconskey|nocopyindent|nocp|nocscopetag|nocscopeverbose|nocst|nocsverb|nocuc|nocul|nocursorcolumn|nocursorline|nodeco|nodelcombine|nodg|nodiff|nodigraph|nodisable|noea|noeb|noed|noedcompatible|noek|noendofline|noeol|noequalalways|noerrorbells|noesckeys|noet|noex|noexpandtab|noexrc|nofen|nofk|nofkmap|nofoldenable|nogd|nogdefault|noguipty|nohid|nohidden|nohk|nohkmap|nohkmapp|nohkp|nohls|noic|noicon|noignorecase|noim|noimc|noimcmdline|noimd|noincsearch|noinf|noinfercase|noinsertmode|nois|nojoinspaces|nojs|nolazyredraw|nolbr|nolinebreak|nolisp|nolist|noloadplugins|nolpl|nolz|noma|nomacatsui|nomagic|nomh|noml|nomod|nomodeline|nomodifiable|nomodified|nomore|nomousef|nomousefocus|nomousehide|nonu|nonumber|noodev|noopendevice|nopaste|nopi|nopreserveindent|nopreviewwindow|noprompt|nopvw|noreadonly|noremap|norestorescreen|norevins|nori|norightleft|norightleftcmd|norl|norlc|noro|nors|noru|noruler|nosb|nosc|noscb|noscrollbind|noscs|nosecure|nosft|noshellslash|noshelltemp|noshiftround|noshortname|noshowcmd|noshowfulltag|noshowmatch|noshowmode|nosi|nosm|nosmartcase|nosmartindent|nosmarttab|nosmd|nosn|nosol|nospell|nosplitbelow|nosplitright|nospr|nosr|nossl|nosta|nostartofline|nostmp|noswapfile|noswf|nota|notagbsearch|notagrelative|notagstack|notbi|notbidi|notbs|notermbidi|noterse|notextauto|notextmode|notf|notgst|notildeop|notimeout|notitle|noto|notop|notr|nottimeout|nottybuiltin|nottyfast|notx|novb|novisualbell|nowa|nowarn|nowb|noweirdinvert|nowfh|nowfw|nowildmenu|nowinfixheight|nowinfixwidth|nowiv|nowmnu|nowrap|nowrapscan|nowrite|nowriteany|nowritebackup|nows|nrformats|numberwidth|nuw|odev|oft|ofu|omnifunc|opendevice|operatorfunc|opfunc|osfiletype|pa|para|paragraphs|paste|pastetoggle|patchexpr|patchmode|path|pdev|penc|pex|pexpr|pfn|ph|pheader|pi|pm|pmbcs|pmbfn|popt|preserveindent|previewheight|previewwindow|printdevice|printencoding|printexpr|printfont|printheader|printmbcharset|printmbfont|printoptions|prompt|pt|pumheight|pvh|pvw|qe|quoteescape|readonly|remap|report|restorescreen|revins|rightleft|rightleftcmd|rl|rlc|ro|rs|rtp|ruf|ruler|rulerformat|runtimepath|sbo|sc|scb|scr|scroll|scrollbind|scrolljump|scrolloff|scrollopt|scs|sect|sections|secure|sel|selection|selectmode|sessionoptions|sft|shcf|shellcmdflag|shellpipe|shellquote|shellredir|shellslash|shelltemp|shelltype|shellxquote|shiftround|shiftwidth|shm|shortmess|shortname|showbreak|showcmd|showfulltag|showmatch|showmode|showtabline|shq|si|sidescroll|sidescrolloff|siso|sj|slm|smartcase|smartindent|smarttab|smc|smd|softtabstop|sol|spc|spell|spellcapcheck|spellfile|spelllang|spellsuggest|spf|spl|splitbelow|splitright|sps|sr|srr|ss|ssl|ssop|stal|startofline|statusline|stl|stmp|su|sua|suffixes|suffixesadd|sw|swapfile|swapsync|swb|swf|switchbuf|sws|sxq|syn|synmaxcol|syntax|t_AB|t_AF|t_AL|t_CS|t_CV|t_Ce|t_Co|t_Cs|t_DL|t_EI|t_F1|t_F2|t_F3|t_F4|t_F5|t_F6|t_F7|t_F8|t_F9|t_IE|t_IS|t_K1|t_K3|t_K4|t_K5|t_K6|t_K7|t_K8|t_K9|t_KA|t_KB|t_KC|t_KD|t_KE|t_KF|t_KG|t_KH|t_KI|t_KJ|t_KK|t_KL|t_RI|t_RV|t_SI|t_Sb|t_Sf|t_WP|t_WS|t_ZH|t_ZR|t_al|t_bc|t_cd|t_ce|t_cl|t_cm|t_cs|t_da|t_db|t_dl|t_fs|t_k1|t_k2|t_k3|t_k4|t_k5|t_k6|t_k7|t_k8|t_k9|t_kB|t_kD|t_kI|t_kN|t_kP|t_kb|t_kd|t_ke|t_kh|t_kl|t_kr|t_ks|t_ku|t_le|t_mb|t_md|t_me|t_mr|t_ms|t_nd|t_op|t_se|t_so|t_sr|t_te|t_ti|t_ts|t_ue|t_us|t_ut|t_vb|t_ve|t_vi|t_vs|t_xs|tabline|tabpagemax|tabstop|tagbsearch|taglength|tagrelative|tagstack|tal|tb|tbi|tbidi|tbis|tbs|tenc|term|termbidi|termencoding|terse|textauto|textmode|textwidth|tgst|thesaurus|tildeop|timeout|timeoutlen|title|titlelen|titleold|titlestring|toolbar|toolbariconsize|top|tpm|tsl|tsr|ttimeout|ttimeoutlen|ttm|tty|ttybuiltin|ttyfast|ttym|ttymouse|ttyscroll|ttytype|tw|tx|uc|ul|undolevels|updatecount|updatetime|ut|vb|vbs|vdir|verbosefile|vfile|viewdir|viewoptions|viminfo|virtualedit|visualbell|vop|wak|warn|wb|wc|wcm|wd|weirdinvert|wfh|wfw|whichwrap|wi|wig|wildchar|wildcharm|wildignore|wildmenu|wildmode|wildoptions|wim|winaltkeys|window|winfixheight|winfixwidth|winheight|winminheight|winminwidth|winwidth|wiv|wiw|wm|wmh|wmnu|wmw|wop|wrap|wrapmargin|wrapscan|writeany|writebackup|writedelay|ww)\\b/,\n    number: /\\b(?:0x[\\da-f]+|\\d+(?:\\.\\d+)?)\\b/i,\n    operator: /\\|\\||&&|[-+.]=?|[=!](?:[=~][#?]?)?|[<>]=?[#?]?|[*\\/%?]|\\b(?:is(?:not)?)\\b/,\n    punctuation: /[{}[\\](),;:]/\n};\nPrism.languages[\"visual-basic\"] = {\n    comment: {\n        pattern: /(?:['‘’]|REM\\b)(?:[^\\r\\n_]|_(?:\\r\\n?|\\n)?)*/i,\n        inside: {\n            keyword: /^REM/i\n        }\n    },\n    directive: {\n        pattern: /#(?:Const|Else|ElseIf|End|ExternalChecksum|ExternalSource|If|Region)(?:\\b_[ \\t]*(?:\\r\\n?|\\n)|.)+/i,\n        alias: \"property\",\n        greedy: !0\n    },\n    string: {\n        pattern: /\\$?[\"“”](?:[\"“”]{2}|[^\"“”])*[\"“”]C?/i,\n        greedy: !0\n    },\n    date: {\n        pattern: /#[ \\t]*(?:\\d+([/-])\\d+\\1\\d+(?:[ \\t]+(?:\\d+[ \\t]*(?:AM|PM)|\\d+:\\d+(?::\\d+)?(?:[ \\t]*(?:AM|PM))?))?|\\d+[ \\t]*(?:AM|PM)|\\d+:\\d+(?::\\d+)?(?:[ \\t]*(?:AM|PM))?)[ \\t]*#/i,\n        alias: \"number\"\n    },\n    number: /(?:(?:\\b\\d+(?:\\.\\d+)?|\\.\\d+)(?:E[+-]?\\d+)?|&[HO][\\dA-F]+)(?:[FRD]|U?[ILS])?/i,\n    boolean: /\\b(?:False|Nothing|True)\\b/i,\n    keyword: /\\b(?:AddHandler|AddressOf|Alias|And(?:Also)?|As|Boolean|ByRef|Byte|ByVal|Call|Case|Catch|C(?:Bool|Byte|Char|Date|Dbl|Dec|Int|Lng|Obj|SByte|Short|Sng|Str|Type|UInt|ULng|UShort)|Char|Class|Const|Continue|Currency|Date|Decimal|Declare|Default|Delegate|Dim|DirectCast|Do|Double|Each|Else(?:If)?|End(?:If)?|Enum|Erase|Error|Event|Exit|Finally|For|Friend|Function|Get(?:Type|XMLNamespace)?|Global|GoSub|GoTo|Handles|If|Implements|Imports|In|Inherits|Integer|Interface|Is|IsNot|Let|Lib|Like|Long|Loop|Me|Mod|Module|Must(?:Inherit|Override)|My(?:Base|Class)|Namespace|Narrowing|New|Next|Not(?:Inheritable|Overridable)?|Object|Of|On|Operator|Option(?:al)?|Or(?:Else)?|Out|Overloads|Overridable|Overrides|ParamArray|Partial|Private|Property|Protected|Public|RaiseEvent|ReadOnly|ReDim|RemoveHandler|Resume|Return|SByte|Select|Set|Shadows|Shared|short|Single|Static|Step|Stop|String|Structure|Sub|SyncLock|Then|Throw|To|Try|TryCast|Type|TypeOf|U(?:Integer|Long|Short)|Until|Using|Variant|Wend|When|While|Widening|With(?:Events)?|WriteOnly|Xor)\\b/i,\n    operator: /[+\\-*/\\\\^<=>&#@$%!]|\\b_(?=[ \\t]*[\\r\\n])/,\n    punctuation: /[{}().,:?]/\n}, Prism.languages.vb = Prism.languages[\"visual-basic\"], Prism.languages.vba = Prism.languages[\"visual-basic\"];\nPrism.languages.warpscript = {\n    comment: /#.*|\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\//,\n    string: {\n        pattern: /\"(?:[^\"\\\\\\r\\n]|\\\\.)*\"|'(?:[^'\\\\\\r\\n]|\\\\.)*'|<'(?:[^\\\\']|'(?!>)|\\\\.)*'>/,\n        greedy: !0\n    },\n    variable: /\\$\\S+/,\n    macro: {\n        pattern: /@\\S+/,\n        alias: \"property\"\n    },\n    keyword: /\\b(?:BREAK|CHECKMACRO|CONTINUE|CUDF|DEFINED|DEFINEDMACRO|EVAL|FAIL|FOR|FOREACH|FORSTEP|IFT|IFTE|MSGFAIL|NRETURN|RETHROW|RETURN|SWITCH|TRY|UDF|UNTIL|WHILE)\\b/,\n    number: /[+-]?\\b(?:NaN|Infinity|\\d+(?:\\.\\d*)?(?:[Ee][+-]?\\d+)?|0x[\\da-fA-F]+|0b[01]+)\\b/,\n    boolean: /\\b(?:F|T|false|true)\\b/,\n    punctuation: /<%|%>|[{}[\\]()]/,\n    operator: /==|&&?|\\|\\|?|\\*\\*?|>>>?|<<|[<>!~]=?|[-/%^]|\\+!?|\\b(?:AND|NOT|OR)\\b/\n};\nPrism.languages.wasm = {\n    comment: [\n        /\\(;[\\s\\S]*?;\\)/,\n        {\n            pattern: /;;.*/,\n            greedy: !0\n        }\n    ],\n    string: {\n        pattern: /\"(?:\\\\[\\s\\S]|[^\"\\\\])*\"/,\n        greedy: !0\n    },\n    keyword: [\n        {\n            pattern: /\\b(?:align|offset)=/,\n            inside: {\n                operator: /=/\n            }\n        },\n        {\n            pattern: /\\b(?:(?:f32|f64|i32|i64)(?:\\.(?:abs|add|and|ceil|clz|const|convert_[su]\\/i(?:32|64)|copysign|ctz|demote\\/f64|div(?:_[su])?|eqz?|extend_[su]\\/i32|floor|ge(?:_[su])?|gt(?:_[su])?|le(?:_[su])?|load(?:(?:8|16|32)_[su])?|lt(?:_[su])?|max|min|mul|neg?|nearest|or|popcnt|promote\\/f32|reinterpret\\/[fi](?:32|64)|rem_[su]|rot[lr]|shl|shr_[su]|sqrt|store(?:8|16|32)?|sub|trunc(?:_[su]\\/f(?:32|64))?|wrap\\/i64|xor))?|memory\\.(?:grow|size))\\b/,\n            inside: {\n                punctuation: /\\./\n            }\n        },\n        /\\b(?:anyfunc|block|br(?:_if|_table)?|call(?:_indirect)?|data|drop|elem|else|end|export|func|get_(?:global|local)|global|if|import|local|loop|memory|module|mut|nop|offset|param|result|return|select|set_(?:global|local)|start|table|tee_local|then|type|unreachable)\\b/\n    ],\n    variable: /\\$[\\w!#$%&'*+\\-./:<=>?@\\\\^`|~]+/,\n    number: /[+-]?\\b(?:\\d(?:_?\\d)*(?:\\.\\d(?:_?\\d)*)?(?:[eE][+-]?\\d(?:_?\\d)*)?|0x[\\da-fA-F](?:_?[\\da-fA-F])*(?:\\.[\\da-fA-F](?:_?[\\da-fA-D])*)?(?:[pP][+-]?\\d(?:_?\\d)*)?)\\b|\\binf\\b|\\bnan(?::0x[\\da-fA-F](?:_?[\\da-fA-D])*)?\\b/,\n    punctuation: /[()]/\n};\n!function(e) {\n    var n = \"(?:\\\\B-|\\\\b_|\\\\b)[A-Za-z][\\\\w-]*(?![\\\\w-])\", t = \"(?:\\\\b(?:unsigned\\\\s+)?long\\\\s+long(?![\\\\w-])|\\\\b(?:unrestricted|unsigned)\\\\s+[a-z]+(?![\\\\w-])|(?!(?:unrestricted|unsigned)\\\\b)\" + n + \"(?:\\\\s*<(?:[^<>]|<[^<>]*>)*>)?)(?:\\\\s*\\\\?)?\", i = {};\n    for(var r in e.languages[\"web-idl\"] = {\n        comment: {\n            pattern: /\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\//,\n            greedy: !0\n        },\n        string: {\n            pattern: /\"[^\"]*\"/,\n            greedy: !0\n        },\n        namespace: {\n            pattern: RegExp(\"(\\\\bnamespace\\\\s+)\" + n),\n            lookbehind: !0\n        },\n        \"class-name\": [\n            {\n                pattern: /(^|[^\\w-])(?:iterable|maplike|setlike)\\s*<(?:[^<>]|<[^<>]*>)*>/,\n                lookbehind: !0,\n                inside: i\n            },\n            {\n                pattern: RegExp(\"(\\\\b(?:attribute|const|deleter|getter|optional|setter)\\\\s+)\" + t),\n                lookbehind: !0,\n                inside: i\n            },\n            {\n                pattern: RegExp(\"(\\\\bcallback\\\\s+\" + n + \"\\\\s*=\\\\s*)\" + t),\n                lookbehind: !0,\n                inside: i\n            },\n            {\n                pattern: RegExp(\"(\\\\btypedef\\\\b\\\\s*)\" + t),\n                lookbehind: !0,\n                inside: i\n            },\n            {\n                pattern: RegExp(\"(\\\\b(?:callback|dictionary|enum|interface(?:\\\\s+mixin)?)\\\\s+)(?!(?:interface|mixin)\\\\b)\" + n),\n                lookbehind: !0\n            },\n            {\n                pattern: RegExp(\"(:\\\\s*)\" + n),\n                lookbehind: !0\n            },\n            RegExp(n + \"(?=\\\\s+(?:implements|includes)\\\\b)\"),\n            {\n                pattern: RegExp(\"(\\\\b(?:implements|includes)\\\\s+)\" + n),\n                lookbehind: !0\n            },\n            {\n                pattern: RegExp(t + \"(?=\\\\s*(?:\\\\.{3}\\\\s*)?\" + n + \"\\\\s*[(),;=])\"),\n                inside: i\n            }\n        ],\n        builtin: /\\b(?:ArrayBuffer|BigInt64Array|BigUint64Array|ByteString|DOMString|DataView|Float32Array|Float64Array|FrozenArray|Int16Array|Int32Array|Int8Array|ObservableArray|Promise|USVString|Uint16Array|Uint32Array|Uint8Array|Uint8ClampedArray)\\b/,\n        keyword: [\n            /\\b(?:async|attribute|callback|const|constructor|deleter|dictionary|enum|getter|implements|includes|inherit|interface|mixin|namespace|null|optional|or|partial|readonly|required|setter|static|stringifier|typedef|unrestricted)\\b/,\n            /\\b(?:any|bigint|boolean|byte|double|float|iterable|long|maplike|object|octet|record|sequence|setlike|short|symbol|undefined|unsigned|void)\\b/\n        ],\n        boolean: /\\b(?:false|true)\\b/,\n        number: {\n            pattern: /(^|[^\\w-])-?(?:0x[0-9a-f]+|(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?|NaN|Infinity)(?![\\w-])/i,\n            lookbehind: !0\n        },\n        operator: /\\.{3}|[=:?<>-]/,\n        punctuation: /[(){}[\\].,;]/\n    }, e.languages[\"web-idl\"])\"class-name\" !== r && (i[r] = e.languages[\"web-idl\"][r]);\n    e.languages.webidl = e.languages[\"web-idl\"];\n}(Prism);\nPrism.languages.wgsl = {\n    comment: {\n        pattern: /\\/\\/.*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n        greedy: !0\n    },\n    \"builtin-attribute\": {\n        pattern: /(@)builtin\\(.*?\\)/,\n        lookbehind: !0,\n        inside: {\n            attribute: {\n                pattern: /^builtin/,\n                alias: \"attr-name\"\n            },\n            punctuation: /[(),]/,\n            \"built-in-values\": {\n                pattern: /\\b(?:frag_depth|front_facing|global_invocation_id|instance_index|local_invocation_id|local_invocation_index|num_workgroups|position|sample_index|sample_mask|vertex_index|workgroup_id)\\b/,\n                alias: \"attr-value\"\n            }\n        }\n    },\n    attributes: {\n        pattern: /(@)(?:align|binding|compute|const|fragment|group|id|interpolate|invariant|location|size|vertex|workgroup_size)/i,\n        lookbehind: !0,\n        alias: \"attr-name\"\n    },\n    functions: {\n        pattern: /\\b(fn\\s+)[_a-zA-Z]\\w*(?=[(<])/,\n        lookbehind: !0,\n        alias: \"function\"\n    },\n    keyword: /\\b(?:bitcast|break|case|const|continue|continuing|default|discard|else|enable|fallthrough|fn|for|function|if|let|loop|private|return|storage|struct|switch|type|uniform|var|while|workgroup)\\b/,\n    builtin: /\\b(?:abs|acos|acosh|all|any|array|asin|asinh|atan|atan2|atanh|atomic|atomicAdd|atomicAnd|atomicCompareExchangeWeak|atomicExchange|atomicLoad|atomicMax|atomicMin|atomicOr|atomicStore|atomicSub|atomicXor|bool|ceil|clamp|cos|cosh|countLeadingZeros|countOneBits|countTrailingZeros|cross|degrees|determinant|distance|dot|dpdx|dpdxCoarse|dpdxFine|dpdy|dpdyCoarse|dpdyFine|exp|exp2|extractBits|f32|f64|faceForward|firstLeadingBit|floor|fma|fract|frexp|fwidth|fwidthCoarse|fwidthFine|i32|i64|insertBits|inverseSqrt|ldexp|length|log|log2|mat[2-4]x[2-4]|max|min|mix|modf|normalize|override|pack2x16float|pack2x16snorm|pack2x16unorm|pack4x8snorm|pack4x8unorm|pow|ptr|quantizeToF16|radians|reflect|refract|reverseBits|round|sampler|sampler_comparison|select|shiftLeft|shiftRight|sign|sin|sinh|smoothstep|sqrt|staticAssert|step|storageBarrier|tan|tanh|textureDimensions|textureGather|textureGatherCompare|textureLoad|textureNumLayers|textureNumLevels|textureNumSamples|textureSample|textureSampleBias|textureSampleCompare|textureSampleCompareLevel|textureSampleGrad|textureSampleLevel|textureStore|texture_1d|texture_2d|texture_2d_array|texture_3d|texture_cube|texture_cube_array|texture_depth_2d|texture_depth_2d_array|texture_depth_cube|texture_depth_cube_array|texture_depth_multisampled_2d|texture_multisampled_2d|texture_storage_1d|texture_storage_2d|texture_storage_2d_array|texture_storage_3d|transpose|trunc|u32|u64|unpack2x16float|unpack2x16snorm|unpack2x16unorm|unpack4x8snorm|unpack4x8unorm|vec[2-4]|workgroupBarrier)\\b/,\n    \"function-calls\": {\n        pattern: /\\b[_a-z]\\w*(?=\\()/i,\n        alias: \"function\"\n    },\n    \"class-name\": /\\b(?:[A-Z][A-Za-z0-9]*)\\b/,\n    \"bool-literal\": {\n        pattern: /\\b(?:false|true)\\b/,\n        alias: \"boolean\"\n    },\n    \"hex-int-literal\": {\n        pattern: /\\b0[xX][0-9a-fA-F]+[iu]?\\b(?![.pP])/,\n        alias: \"number\"\n    },\n    \"hex-float-literal\": {\n        pattern: /\\b0[xX][0-9a-fA-F]*(?:\\.[0-9a-fA-F]*)?(?:[pP][+-]?\\d+[fh]?)?/,\n        alias: \"number\"\n    },\n    \"decimal-float-literal\": [\n        {\n            pattern: /\\d*\\.\\d+(?:[eE](?:\\+|-)?\\d+)?[fh]?/,\n            alias: \"number\"\n        },\n        {\n            pattern: /\\d+\\.\\d*(?:[eE](?:\\+|-)?\\d+)?[fh]?/,\n            alias: \"number\"\n        },\n        {\n            pattern: /\\d+[eE](?:\\+|-)?\\d+[fh]?/,\n            alias: \"number\"\n        },\n        {\n            pattern: /\\b\\d+[fh]\\b/,\n            alias: \"number\"\n        }\n    ],\n    \"int-literal\": {\n        pattern: /\\b\\d+[iu]?\\b/,\n        alias: \"number\"\n    },\n    operator: [\n        {\n            pattern: /(?:\\^|~|\\|(?!\\|)|\\|\\||&&|<<|>>|!)(?!=)/\n        },\n        {\n            pattern: /&(?![&=])/\n        },\n        {\n            pattern: /(?:\\+=|-=|\\*=|\\/=|%=|\\^=|&=|\\|=|<<=|>>=)/\n        },\n        {\n            pattern: /(^|[^<>=!])=(?![=>])/,\n            lookbehind: !0\n        },\n        {\n            pattern: /(?:==|!=|<=|\\+\\+|--|(^|[^=])>=)/,\n            lookbehind: !0\n        },\n        {\n            pattern: /(?:(?:[+%]|(?:\\*(?!\\w)))(?!=))|(?:-(?!>))|(?:\\/(?!\\/))/\n        },\n        {\n            pattern: /->/\n        }\n    ],\n    punctuation: /[@(){}[\\],;<>:.]/\n};\nPrism.languages.wiki = Prism.languages.extend(\"markup\", {\n    \"block-comment\": {\n        pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,\n        lookbehind: !0,\n        alias: \"comment\"\n    },\n    heading: {\n        pattern: /^(=+)[^=\\r\\n].*?\\1/m,\n        inside: {\n            punctuation: /^=+|=+$/,\n            important: /.+/\n        }\n    },\n    emphasis: {\n        pattern: /('{2,5}).+?\\1/,\n        inside: {\n            \"bold-italic\": {\n                pattern: /(''''').+?(?=\\1)/,\n                lookbehind: !0,\n                alias: [\n                    \"bold\",\n                    \"italic\"\n                ]\n            },\n            bold: {\n                pattern: /(''')[^'](?:.*?[^'])?(?=\\1)/,\n                lookbehind: !0\n            },\n            italic: {\n                pattern: /('')[^'](?:.*?[^'])?(?=\\1)/,\n                lookbehind: !0\n            },\n            punctuation: /^''+|''+$/\n        }\n    },\n    hr: {\n        pattern: /^-{4,}/m,\n        alias: \"punctuation\"\n    },\n    url: [\n        /ISBN +(?:97[89][ -]?)?(?:\\d[ -]?){9}[\\dx]\\b|(?:PMID|RFC) +\\d+/i,\n        /\\[\\[.+?\\]\\]|\\[.+?\\]/\n    ],\n    variable: [\n        /__[A-Z]+__/,\n        /\\{{3}.+?\\}{3}/,\n        /\\{\\{.+?\\}\\}/\n    ],\n    symbol: [\n        /^#redirect/im,\n        /~{3,5}/\n    ],\n    \"table-tag\": {\n        pattern: /((?:^|[|!])[|!])[^|\\r\\n]+\\|(?!\\|)/m,\n        lookbehind: !0,\n        inside: {\n            \"table-bar\": {\n                pattern: /\\|$/,\n                alias: \"punctuation\"\n            },\n            rest: Prism.languages.markup.tag.inside\n        }\n    },\n    punctuation: /^(?:\\{\\||\\|\\}|\\|-|[*#:;!|])|\\|\\||!!/m\n}), Prism.languages.insertBefore(\"wiki\", \"tag\", {\n    nowiki: {\n        pattern: /<(nowiki|pre|source)\\b[^>]*>[\\s\\S]*?<\\/\\1>/i,\n        inside: {\n            tag: {\n                pattern: /<(?:nowiki|pre|source)\\b[^>]*>|<\\/(?:nowiki|pre|source)>/i,\n                inside: Prism.languages.markup.tag.inside\n            }\n        }\n    }\n});\nPrism.languages.wolfram = {\n    comment: /\\(\\*(?:\\(\\*(?:[^*]|\\*(?!\\)))*\\*\\)|(?!\\(\\*)[\\s\\S])*?\\*\\)/,\n    string: {\n        pattern: /\"(?:\\\\.|[^\"\\\\\\r\\n])*\"/,\n        greedy: !0\n    },\n    keyword: /\\b(?:Abs|AbsArg|Accuracy|Block|Do|For|Function|If|Manipulate|Module|Nest|NestList|None|Return|Switch|Table|Which|While)\\b/,\n    context: {\n        pattern: /\\b\\w+`+\\w*/,\n        alias: \"class-name\"\n    },\n    blank: {\n        pattern: /\\b\\w+_\\b/,\n        alias: \"regex\"\n    },\n    \"global-variable\": {\n        pattern: /\\$\\w+/,\n        alias: \"variable\"\n    },\n    boolean: /\\b(?:False|True)\\b/,\n    number: /(?:\\b(?=\\d)|\\B(?=\\.))(?:0[bo])?(?:(?:\\d|0x[\\da-f])[\\da-f]*(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?j?\\b/i,\n    operator: /\\/\\.|;|=\\.|\\^=|\\^:=|:=|<<|>>|<\\||\\|>|:>|\\|->|->|<-|@@@|@@|@|\\/@|=!=|===|==|=|\\+|-|\\[\\/-+%=\\]=?|!=|\\*\\*?=?|\\/\\/?=?|<[<=>]?|>[=>]?|[&|^~]/,\n    punctuation: /[{}[\\];(),.:]/\n}, Prism.languages.mathematica = Prism.languages.wolfram, Prism.languages.wl = Prism.languages.wolfram, Prism.languages.nb = Prism.languages.wolfram;\nPrism.languages.wren = {\n    comment: [\n        {\n            pattern: /\\/\\*(?:[^*/]|\\*(?!\\/)|\\/(?!\\*)|\\/\\*(?:[^*/]|\\*(?!\\/)|\\/(?!\\*)|\\/\\*(?:[^*/]|\\*(?!\\/)|\\/(?!\\*))*\\*\\/)*\\*\\/)*\\*\\//,\n            greedy: !0\n        },\n        {\n            pattern: /(^|[^\\\\:])\\/\\/.*/,\n            lookbehind: !0,\n            greedy: !0\n        }\n    ],\n    \"triple-quoted-string\": {\n        pattern: /\"\"\"[\\s\\S]*?\"\"\"/,\n        greedy: !0,\n        alias: \"string\"\n    },\n    \"string-literal\": null,\n    hashbang: {\n        pattern: /^#!\\/.+/,\n        greedy: !0,\n        alias: \"comment\"\n    },\n    attribute: {\n        pattern: /#!?[ \\t\\u3000]*\\w+/,\n        alias: \"keyword\"\n    },\n    \"class-name\": [\n        {\n            pattern: /(\\bclass\\s+)\\w+/,\n            lookbehind: !0\n        },\n        /\\b[A-Z][a-z\\d_]*\\b/\n    ],\n    constant: /\\b[A-Z][A-Z\\d_]*\\b/,\n    null: {\n        pattern: /\\bnull\\b/,\n        alias: \"keyword\"\n    },\n    keyword: /\\b(?:as|break|class|construct|continue|else|for|foreign|if|import|in|is|return|static|super|this|var|while)\\b/,\n    boolean: /\\b(?:false|true)\\b/,\n    number: /\\b(?:0x[\\da-f]+|\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?)\\b/i,\n    function: /\\b[a-z_]\\w*(?=\\s*[({])/i,\n    operator: /<<|>>|[=!<>]=?|&&|\\|\\||[-+*/%~^&|?:]|\\.{2,3}/,\n    punctuation: /[\\[\\](){}.,;]/\n}, Prism.languages.wren[\"string-literal\"] = {\n    pattern: /(^|[^\\\\\"])\"(?:[^\\\\\"%]|\\\\[\\s\\S]|%(?!\\()|%\\((?:[^()]|\\((?:[^()]|\\([^)]*\\))*\\))*\\))*\"/,\n    lookbehind: !0,\n    greedy: !0,\n    inside: {\n        interpolation: {\n            pattern: /((?:^|[^\\\\])(?:\\\\{2})*)%\\((?:[^()]|\\((?:[^()]|\\([^)]*\\))*\\))*\\)/,\n            lookbehind: !0,\n            inside: {\n                expression: {\n                    pattern: /^(%\\()[\\s\\S]+(?=\\)$)/,\n                    lookbehind: !0,\n                    inside: Prism.languages.wren\n                },\n                \"interpolation-punctuation\": {\n                    pattern: /^%\\(|\\)$/,\n                    alias: \"punctuation\"\n                }\n            }\n        },\n        string: /[\\s\\S]+/\n    }\n};\n!function(n) {\n    n.languages.xeora = n.languages.extend(\"markup\", {\n        constant: {\n            pattern: /\\$(?:DomainContents|PageRenderDuration)\\$/,\n            inside: {\n                punctuation: {\n                    pattern: /\\$/\n                }\n            }\n        },\n        variable: {\n            pattern: /\\$@?(?:#+|[-+*~=^])?[\\w.]+\\$/,\n            inside: {\n                punctuation: {\n                    pattern: /[$.]/\n                },\n                operator: {\n                    pattern: /#+|[-+*~=^@]/\n                }\n            }\n        },\n        \"function-inline\": {\n            pattern: /\\$F:[-\\w.]+\\?[-\\w.]+(?:,(?:(?:@[-#]*\\w+\\.[\\w+.]\\.*)*\\|)*(?:(?:[\\w+]|[-#*.~^]+[\\w+]|=\\S)(?:[^$=]|=+[^=])*=*|(?:@[-#]*\\w+\\.[\\w+.]\\.*)+(?:(?:[\\w+]|[-#*~^][-#*.~^]*[\\w+]|=\\S)(?:[^$=]|=+[^=])*=*)?)?)?\\$/,\n            inside: {\n                variable: {\n                    pattern: /(?:[,|])@?(?:#+|[-+*~=^])?[\\w.]+/,\n                    inside: {\n                        punctuation: {\n                            pattern: /[,.|]/\n                        },\n                        operator: {\n                            pattern: /#+|[-+*~=^@]/\n                        }\n                    }\n                },\n                punctuation: {\n                    pattern: /\\$\\w:|[$:?.,|]/\n                }\n            },\n            alias: \"function\"\n        },\n        \"function-block\": {\n            pattern: /\\$XF:\\{[-\\w.]+\\?[-\\w.]+(?:,(?:(?:@[-#]*\\w+\\.[\\w+.]\\.*)*\\|)*(?:(?:[\\w+]|[-#*.~^]+[\\w+]|=\\S)(?:[^$=]|=+[^=])*=*|(?:@[-#]*\\w+\\.[\\w+.]\\.*)+(?:(?:[\\w+]|[-#*~^][-#*.~^]*[\\w+]|=\\S)(?:[^$=]|=+[^=])*=*)?)?)?\\}:XF\\$/,\n            inside: {\n                punctuation: {\n                    pattern: /[$:{}?.,|]/\n                }\n            },\n            alias: \"function\"\n        },\n        \"directive-inline\": {\n            pattern: /\\$\\w(?:#\\d+\\+?)?(?:\\[[-\\w.]+\\])?:[-\\/\\w.]+\\$/,\n            inside: {\n                punctuation: {\n                    pattern: /\\$(?:\\w:|C(?:\\[|#\\d))?|[:{[\\]]/,\n                    inside: {\n                        tag: {\n                            pattern: /#\\d/\n                        }\n                    }\n                }\n            },\n            alias: \"function\"\n        },\n        \"directive-block-open\": {\n            pattern: /\\$\\w+:\\{|\\$\\w(?:#\\d+\\+?)?(?:\\[[-\\w.]+\\])?:[-\\w.]+:\\{(?:![A-Z]+)?/,\n            inside: {\n                punctuation: {\n                    pattern: /\\$(?:\\w:|C(?:\\[|#\\d))?|[:{[\\]]/,\n                    inside: {\n                        tag: {\n                            pattern: /#\\d/\n                        }\n                    }\n                },\n                attribute: {\n                    pattern: /![A-Z]+$/,\n                    inside: {\n                        punctuation: {\n                            pattern: /!/\n                        }\n                    },\n                    alias: \"keyword\"\n                }\n            },\n            alias: \"function\"\n        },\n        \"directive-block-separator\": {\n            pattern: /\\}:[-\\w.]+:\\{/,\n            inside: {\n                punctuation: {\n                    pattern: /[:{}]/\n                }\n            },\n            alias: \"function\"\n        },\n        \"directive-block-close\": {\n            pattern: /\\}:[-\\w.]+\\$/,\n            inside: {\n                punctuation: {\n                    pattern: /[:{}$]/\n                }\n            },\n            alias: \"function\"\n        }\n    }), n.languages.insertBefore(\"inside\", \"punctuation\", {\n        variable: n.languages.xeora[\"function-inline\"].inside.variable\n    }, n.languages.xeora[\"function-block\"]), n.languages.xeoracube = n.languages.xeora;\n}(Prism);\n!function(a) {\n    function e(e, n) {\n        a.languages[e] && a.languages.insertBefore(e, \"comment\", {\n            \"doc-comment\": n\n        });\n    }\n    var n = a.languages.markup.tag, t = {\n        pattern: /\\/\\/\\/.*/,\n        greedy: !0,\n        alias: \"comment\",\n        inside: {\n            tag: n\n        }\n    }, g = {\n        pattern: /'''.*/,\n        greedy: !0,\n        alias: \"comment\",\n        inside: {\n            tag: n\n        }\n    };\n    e(\"csharp\", t), e(\"fsharp\", t), e(\"vbnet\", g);\n}(Prism);\nPrism.languages.xojo = {\n    comment: {\n        pattern: /(?:'|\\/\\/|Rem\\b).+/i,\n        greedy: !0\n    },\n    string: {\n        pattern: /\"(?:\"\"|[^\"])*\"/,\n        greedy: !0\n    },\n    number: [\n        /(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:E[+-]?\\d+)?/i,\n        /&[bchou][a-z\\d]+/i\n    ],\n    directive: {\n        pattern: /#(?:Else|ElseIf|Endif|If|Pragma)\\b/i,\n        alias: \"property\"\n    },\n    keyword: /\\b(?:AddHandler|App|Array|As(?:signs)?|Auto|Boolean|Break|By(?:Ref|Val)|Byte|Call|Case|Catch|CFStringRef|CGFloat|Class|Color|Const|Continue|CString|Currency|CurrentMethodName|Declare|Delegate|Dim|Do(?:uble|wnTo)?|Each|Else(?:If)?|End|Enumeration|Event|Exception|Exit|Extends|False|Finally|For|Function|Get|GetTypeInfo|Global|GOTO|If|Implements|In|Inherits|Int(?:8|16|32|64|eger|erface)?|Lib|Loop|Me|Module|Next|Nil|Object|Optional|OSType|ParamArray|Private|Property|Protected|PString|Ptr|Raise(?:Event)?|ReDim|RemoveHandler|Return|Select(?:or)?|Self|Set|Shared|Short|Single|Soft|Static|Step|String|Sub|Super|Text|Then|To|True|Try|Ubound|UInt(?:8|16|32|64|eger)?|Until|Using|Var(?:iant)?|Wend|While|WindowPtr|WString)\\b/i,\n    operator: /<[=>]?|>=?|[+\\-*\\/\\\\^=]|\\b(?:AddressOf|And|Ctype|IsA?|Mod|New|Not|Or|WeakAddressOf|Xor)\\b/i,\n    punctuation: /[.,;:()]/\n};\n!function(e) {\n    e.languages.xquery = e.languages.extend(\"markup\", {\n        \"xquery-comment\": {\n            pattern: /\\(:[\\s\\S]*?:\\)/,\n            greedy: !0,\n            alias: \"comment\"\n        },\n        string: {\n            pattern: /([\"'])(?:\\1\\1|(?!\\1)[\\s\\S])*\\1/,\n            greedy: !0\n        },\n        extension: {\n            pattern: /\\(#.+?#\\)/,\n            alias: \"symbol\"\n        },\n        variable: /\\$[-\\w:]+/,\n        axis: {\n            pattern: /(^|[^-])(?:ancestor(?:-or-self)?|attribute|child|descendant(?:-or-self)?|following(?:-sibling)?|parent|preceding(?:-sibling)?|self)(?=::)/,\n            lookbehind: !0,\n            alias: \"operator\"\n        },\n        \"keyword-operator\": {\n            pattern: /(^|[^:-])\\b(?:and|castable as|div|eq|except|ge|gt|idiv|instance of|intersect|is|le|lt|mod|ne|or|union)\\b(?=$|[^:-])/,\n            lookbehind: !0,\n            alias: \"operator\"\n        },\n        keyword: {\n            pattern: /(^|[^:-])\\b(?:as|ascending|at|base-uri|boundary-space|case|cast as|collation|construction|copy-namespaces|declare|default|descending|else|empty (?:greatest|least)|encoding|every|external|for|function|if|import|in|inherit|lax|let|map|module|namespace|no-inherit|no-preserve|option|order(?: by|ed|ing)?|preserve|return|satisfies|schema|some|stable|strict|strip|then|to|treat as|typeswitch|unordered|validate|variable|version|where|xquery)\\b(?=$|[^:-])/,\n            lookbehind: !0\n        },\n        function: /[\\w-]+(?::[\\w-]+)*(?=\\s*\\()/,\n        \"xquery-element\": {\n            pattern: /(element\\s+)[\\w-]+(?::[\\w-]+)*/,\n            lookbehind: !0,\n            alias: \"tag\"\n        },\n        \"xquery-attribute\": {\n            pattern: /(attribute\\s+)[\\w-]+(?::[\\w-]+)*/,\n            lookbehind: !0,\n            alias: \"attr-name\"\n        },\n        builtin: {\n            pattern: /(^|[^:-])\\b(?:attribute|comment|document|element|processing-instruction|text|xs:(?:ENTITIES|ENTITY|ID|IDREFS?|NCName|NMTOKENS?|NOTATION|Name|QName|anyAtomicType|anyType|anyURI|base64Binary|boolean|byte|date|dateTime|dayTimeDuration|decimal|double|duration|float|gDay|gMonth|gMonthDay|gYear|gYearMonth|hexBinary|int|integer|language|long|negativeInteger|nonNegativeInteger|nonPositiveInteger|normalizedString|positiveInteger|short|string|time|token|unsigned(?:Byte|Int|Long|Short)|untyped(?:Atomic)?|yearMonthDuration))\\b(?=$|[^:-])/,\n            lookbehind: !0\n        },\n        number: /\\b\\d+(?:\\.\\d+)?(?:E[+-]?\\d+)?/,\n        operator: [\n            /[+*=?|@]|\\.\\.?|:=|!=|<[=<]?|>[=>]?/,\n            {\n                pattern: /(\\s)-(?=\\s)/,\n                lookbehind: !0\n            }\n        ],\n        punctuation: /[[\\](){},;:/]/\n    }), e.languages.xquery.tag.pattern = /<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s+[^\\s>\\/=]+(?:=(?:(\"|')(?:\\\\[\\s\\S]|\\{(?!\\{)(?:\\{(?:\\{[^{}]*\\}|[^{}])*\\}|[^{}])+\\}|(?!\\1)[^\\\\])*\\1|[^\\s'\">=]+))?)*\\s*\\/?>/, e.languages.xquery.tag.inside[\"attr-value\"].pattern = /=(?:(\"|')(?:\\\\[\\s\\S]|\\{(?!\\{)(?:\\{(?:\\{[^{}]*\\}|[^{}])*\\}|[^{}])+\\}|(?!\\1)[^\\\\])*\\1|[^\\s'\">=]+)/, e.languages.xquery.tag.inside[\"attr-value\"].inside.punctuation = /^=\"|\"$/, e.languages.xquery.tag.inside[\"attr-value\"].inside.expression = {\n        pattern: /\\{(?!\\{)(?:\\{(?:\\{[^{}]*\\}|[^{}])*\\}|[^{}])+\\}/,\n        inside: e.languages.xquery,\n        alias: \"language-xquery\"\n    };\n    var t = function(e) {\n        return \"string\" == typeof e ? e : \"string\" == typeof e.content ? e.content : e.content.map(t).join(\"\");\n    }, n = function(a) {\n        for(var o = [], i = 0; i < a.length; i++){\n            var r = a[i], s = !1;\n            if (\"string\" != typeof r && (\"tag\" === r.type && r.content[0] && \"tag\" === r.content[0].type ? \"</\" === r.content[0].content[0].content ? o.length > 0 && o[o.length - 1].tagName === t(r.content[0].content[1]) && o.pop() : \"/>\" === r.content[r.content.length - 1].content || o.push({\n                tagName: t(r.content[0].content[1]),\n                openedBraces: 0\n            }) : !(o.length > 0 && \"punctuation\" === r.type && \"{\" === r.content) || a[i + 1] && \"punctuation\" === a[i + 1].type && \"{\" === a[i + 1].content || a[i - 1] && \"plain-text\" === a[i - 1].type && \"{\" === a[i - 1].content ? o.length > 0 && o[o.length - 1].openedBraces > 0 && \"punctuation\" === r.type && \"}\" === r.content ? o[o.length - 1].openedBraces-- : \"comment\" !== r.type && (s = !0) : o[o.length - 1].openedBraces++), (s || \"string\" == typeof r) && o.length > 0 && 0 === o[o.length - 1].openedBraces) {\n                var l = t(r);\n                i < a.length - 1 && (\"string\" == typeof a[i + 1] || \"plain-text\" === a[i + 1].type) && (l += t(a[i + 1]), a.splice(i + 1, 1)), i > 0 && (\"string\" == typeof a[i - 1] || \"plain-text\" === a[i - 1].type) && (l = t(a[i - 1]) + l, a.splice(i - 1, 1), i--), /^\\s+$/.test(l) ? a[i] = l : a[i] = new e.Token(\"plain-text\", l, null, l);\n            }\n            r.content && \"string\" != typeof r.content && n(r.content);\n        }\n    };\n    e.hooks.add(\"after-tokenize\", function(e) {\n        \"xquery\" === e.language && n(e.tokens);\n    });\n}(Prism);\nPrism.languages.yang = {\n    comment: /\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*/,\n    string: {\n        pattern: /\"(?:[^\\\\\"]|\\\\.)*\"|'[^']*'/,\n        greedy: !0\n    },\n    keyword: {\n        pattern: /(^|[{};\\r\\n][ \\t]*)[a-z_][\\w.-]*/i,\n        lookbehind: !0\n    },\n    namespace: {\n        pattern: /(\\s)[a-z_][\\w.-]*(?=:)/i,\n        lookbehind: !0\n    },\n    boolean: /\\b(?:false|true)\\b/,\n    operator: /\\+/,\n    punctuation: /[{};:]/\n};\n!function(e) {\n    function n(e) {\n        return function() {\n            return e;\n        };\n    }\n    var r = /\\b(?:align|allowzero|and|anyframe|anytype|asm|async|await|break|cancel|catch|comptime|const|continue|defer|else|enum|errdefer|error|export|extern|fn|for|if|inline|linksection|nakedcc|noalias|nosuspend|null|or|orelse|packed|promise|pub|resume|return|stdcallcc|struct|suspend|switch|test|threadlocal|try|undefined|union|unreachable|usingnamespace|var|volatile|while)\\b/, a = \"\\\\b(?!\" + r.source + \")(?!\\\\d)\\\\w+\\\\b\", o = \"align\\\\s*\\\\((?:[^()]|\\\\([^()]*\\\\))*\\\\)\", s = \"(?!\\\\s)(?:!?\\\\s*(?:\" + \"(?:\\\\?|\\\\bpromise->|(?:\\\\[[^[\\\\]]*\\\\]|\\\\*(?!\\\\*)|\\\\*\\\\*)(?:\\\\s*<ALIGN>|\\\\s*const\\\\b|\\\\s*volatile\\\\b|\\\\s*allowzero\\\\b)*)\".replace(/<ALIGN>/g, n(o)) + \"\\\\s*)*\" + \"(?:\\\\bpromise\\\\b|(?:\\\\berror\\\\.)?<ID>(?:\\\\.<ID>)*(?!\\\\s+<ID>))\".replace(/<ID>/g, n(a)) + \")+\";\n    e.languages.zig = {\n        comment: [\n            {\n                pattern: /\\/\\/[/!].*/,\n                alias: \"doc-comment\"\n            },\n            /\\/{2}.*/\n        ],\n        string: [\n            {\n                pattern: /(^|[^\\\\@])c?\"(?:[^\"\\\\\\r\\n]|\\\\.)*\"/,\n                lookbehind: !0,\n                greedy: !0\n            },\n            {\n                pattern: /([\\r\\n])([ \\t]+c?\\\\{2}).*(?:(?:\\r\\n?|\\n)\\2.*)*/,\n                lookbehind: !0,\n                greedy: !0\n            }\n        ],\n        char: {\n            pattern: /(^|[^\\\\])'(?:[^'\\\\\\r\\n]|[\\uD800-\\uDFFF]{2}|\\\\(?:.|x[a-fA-F\\d]{2}|u\\{[a-fA-F\\d]{1,6}\\}))'/,\n            lookbehind: !0,\n            greedy: !0\n        },\n        builtin: /\\B@(?!\\d)\\w+(?=\\s*\\()/,\n        label: {\n            pattern: /(\\b(?:break|continue)\\s*:\\s*)\\w+\\b|\\b(?!\\d)\\w+\\b(?=\\s*:\\s*(?:\\{|while\\b))/,\n            lookbehind: !0\n        },\n        \"class-name\": [\n            /\\b(?!\\d)\\w+(?=\\s*=\\s*(?:(?:extern|packed)\\s+)?(?:enum|struct|union)\\s*[({])/,\n            {\n                pattern: RegExp(\"(:\\\\s*)<TYPE>(?=\\\\s*(?:<ALIGN>\\\\s*)?[=;,)])|<TYPE>(?=\\\\s*(?:<ALIGN>\\\\s*)?\\\\{)\".replace(/<TYPE>/g, n(s)).replace(/<ALIGN>/g, n(o))),\n                lookbehind: !0,\n                inside: null\n            },\n            {\n                pattern: RegExp(\"(\\\\)\\\\s*)<TYPE>(?=\\\\s*(?:<ALIGN>\\\\s*)?;)\".replace(/<TYPE>/g, n(s)).replace(/<ALIGN>/g, n(o))),\n                lookbehind: !0,\n                inside: null\n            }\n        ],\n        \"builtin-type\": {\n            pattern: /\\b(?:anyerror|bool|c_u?(?:int|long|longlong|short)|c_longdouble|c_void|comptime_(?:float|int)|f(?:16|32|64|128)|[iu](?:8|16|32|64|128|size)|noreturn|type|void)\\b/,\n            alias: \"keyword\"\n        },\n        keyword: r,\n        function: /\\b(?!\\d)\\w+(?=\\s*\\()/,\n        number: /\\b(?:0b[01]+|0o[0-7]+|0x[a-fA-F\\d]+(?:\\.[a-fA-F\\d]*)?(?:[pP][+-]?[a-fA-F\\d]+)?|\\d+(?:\\.\\d*)?(?:[eE][+-]?\\d+)?)\\b/,\n        boolean: /\\b(?:false|true)\\b/,\n        operator: /\\.[*?]|\\.{2,3}|[-=]>|\\*\\*|\\+\\+|\\|\\||(?:<<|>>|[-+*]%|[-+*/%^&|<>!=])=?|[?~]/,\n        punctuation: /[.:,;(){}[\\]]/\n    }, e.languages.zig[\"class-name\"].forEach(function(n) {\n        null === n.inside && (n.inside = e.languages.zig);\n    });\n}(Prism);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./style/prism.js\n");

/***/ }),

/***/ "./node_modules/primeflex/primeflex.css":
/*!**********************************************!*\
  !*** ./node_modules/primeflex/primeflex.css ***!
  \**********************************************/
/***/ (() => {



/***/ }),

/***/ "./node_modules/primeicons/primeicons.css":
/*!************************************************!*\
  !*** ./node_modules/primeicons/primeicons.css ***!
  \************************************************/
/***/ (() => {



/***/ }),

/***/ "./style/main.scss":
/*!*************************!*\
  !*** ./style/main.scss ***!
  \*************************/
/***/ (() => {



/***/ }),

/***/ "./style/prism.css":
/*!*************************!*\
  !*** ./style/prism.css ***!
  \*************************/
/***/ (() => {



/***/ }),

/***/ "next/head":
/*!****************************!*\
  !*** external "next/head" ***!
  \****************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/head");

/***/ }),

/***/ "next/router":
/*!******************************!*\
  !*** external "next/router" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/router");

/***/ }),

/***/ "primereact/image":
/*!***********************************!*\
  !*** external "primereact/image" ***!
  \***********************************/
/***/ ((module) => {

"use strict";
module.exports = require("primereact/image");

/***/ }),

/***/ "react":
/*!************************!*\
  !*** external "react" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = require("react");

/***/ }),

/***/ "react/jsx-dev-runtime":
/*!****************************************!*\
  !*** external "react/jsx-dev-runtime" ***!
  \****************************************/
/***/ ((module) => {

"use strict";
module.exports = require("react/jsx-dev-runtime");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = (__webpack_exec__("./pages/_app.js"));
module.exports = __webpack_exports__;

})();