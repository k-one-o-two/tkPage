(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[720],{5079:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/img",function(){return n(9007)}])},8393:function(e,t,n){"use strict";n.d(t,{A:function(){return o}});var i=n(5893),s=n(1163);let o=e=>{let{href:t,children:n}=e,o=(0,s.useRouter)();return(0,i.jsx)("span",{onClick:()=>o.push(t),className:"link",children:n})}},9271:function(e,t,n){"use strict";n.d(t,{d:function(){return a}});var i=n(5893),s=n(9008),o=n.n(s);function a(e){let{title:t,html:n,art:s}=e;return(0,i.jsxs)("div",{className:"card",children:[(0,i.jsx)("div",{children:(0,i.jsx)("pre",{children:s})}),(0,i.jsx)(o(),{children:(0,i.jsx)("title",{children:t})}),(0,i.jsx)("h1",{children:t}),n]})}},1697:function(e,t,n){"use strict";n.d(t,{z:function(){return a}});var i=n(5893),s=n(5675),o=n.n(s);function a(e){let{src:t}=e;return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)("div",{style:{position:"relative",height:"400px",cursor:"pointer"},children:(0,i.jsx)("button",{popovertarget:"pop_".concat(t),children:(0,i.jsx)(o(),{src:t,alt:"Image",fill:!0,style:{objectFit:"contain"}})})}),(0,i.jsxs)("div",{id:"pop_".concat(t),className:"img-dialog",popover:"auto",children:[(0,i.jsxs)("div",{className:"dlg-header",children:[(0,i.jsx)("p",{style:{color:"white"},children:t}),(0,i.jsx)("button",{className:"close-btn",popovertarget:"pop_".concat(t),popovertargetaction:"hide",children:"close"})]}),(0,i.jsx)("div",{className:"img-container",style:{background:"url(".concat(t,") no-repeat 50% 50%"),backgroundSize:"contain"}})]})]})}},9007:function(e,t,n){"use strict";n.r(t),n.d(t,{note:function(){return r}});var i=n(5893),s=n(1697),o=n(9271),a=n(8393);let r={title:"Image editing in node.js",art:"\n████████████████████\n█▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓█\n█▓▓▓▓..           ▓█\n█▓▓▓▓..           ▓█\n█▓▓▓▓       ...   ▓█\n█▓▓▓▓...........  ▓█\n█▓▓▓▓.............▓█\n█▓▓▓▓.............▓█\n█▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓█\n████████████████████",html:(0,i.jsxs)("div",{children:[(0,i.jsx)("h3",{children:"Why"}),(0,i.jsxs)("p",{children:["This is also related to the bot, I have described"," ",(0,i.jsx)(a.A,{href:"/bot",children:"here"}),". Since then, I have found another api that allows reading message history and counting likes on each."]}),(0,i.jsx)("p",{children:"So, I've had an idea to select the best one for each month."}),(0,i.jsxs)("p",{children:["It is not that interesting: you just have to use the"," ",(0,i.jsx)("a",{href:"https://gram.js.org/",children:"telegram"})," npm package and follow the docs."]}),(0,i.jsx)("p",{children:'The channel I\'m talking about is called "Postcards from Finland", therefore I wanted to make those best-liked images look like postcards.'}),(0,i.jsx)("p",{children:"Programmatically, of course."}),(0,i.jsx)("p",{children:"This is my type of fun."}),(0,i.jsx)("h3",{children:"How"}),(0,i.jsx)("p",{children:"There are several npm packages that provide image manipulation possibilities, but the majority of them require 3rd party stuff like Imagemagick, which I didn't want to use - my code should be running on a free tier Oracle VM, so I wanted to keep things as simple as possible."}),(0,i.jsxs)("p",{children:["So, I came across The JavaScript Image Manipulation Program,"," ",(0,i.jsx)("a",{href:"http://jimp-dev.github.io/jimp/",children:"Jimp"}),". Just check out their logo!"]}),(0,i.jsx)("p",{children:"I wanted to achieve a Polaroid-like look, put a postal stamp on and do some writing. The end result should be like that:"}),(0,i.jsx)(s.z,{src:"/6/1.jpg"}),(0,i.jsx)("p",{children:"This, obviously, is not something from the channel, this is my middle finger after I've hurt myself a while ago. Anyway."}),(0,i.jsx)("h4",{children:"Loading an image"}),(0,i.jsx)("p",{children:"First, we'll load an image and get it's dimensions:"}),(0,i.jsx)("pre",{className:"crt",children:(0,i.jsx)("code",{className:"language-javascript",children:"\nconst image = await Jimp.read('output.jpg');\nconst { width, height } = image.bitmap;\n        "})}),(0,i.jsx)("p",{children:"Now let's add borders. Either I'm dumb, or there's no built-in way of doing it, so I'm gonna create white rectangles and slap them onto the image:"}),(0,i.jsx)("pre",{className:"crt",children:(0,i.jsx)("code",{className:"language-javascript",children:"\nconst border = 20;\n\nconst borderH = new Jimp({ width, height: border, color: 0xffffffff });\nimage.composite(borderH, 0, 0);\n\nconst borderV = new Jimp({ width: border, height, color: 0xffffffff });\nimage.composite(borderV, width - border, 0);\nimage.composite(borderV, 0, 0);\n\nconst borderB = new Jimp({ width, height: border * 4, color: 0xffffffff });\nimage.composite(borderB, 0, height - border * 4);\n        "})}),(0,i.jsx)("p",{children:"This is for the vertical image - the bottom border is 4 times wider."}),(0,i.jsx)("p",{children:"Next, I'll add a black overlay, to make the image look more printed."}),(0,i.jsx)("pre",{className:"crt",children:(0,i.jsx)("code",{className:"language-javascript",children:"\nconst overlay = new Jimp({\n    width,\n    height: height - border * 3,\n    color: 0x000000ff,\n  });\noverlay.opacity(0.1);\n\nimage.composite(overlay, 0, 0);\n        "})}),(0,i.jsx)("p",{children:'Adding a stamp is pretty much the same - you load another image and then place it using the "image.composite" method.'}),(0,i.jsx)("h4",{children:"Text"}),(0,i.jsx)("p",{children:"So, the only thing that is missing is the text. It should be easy, right?"}),(0,i.jsx)("p",{children:"Right?"}),(0,i.jsx)("p",{children:'So, I\'ve found some ".ttf" font which I liked and downloaded it. First issue I\'ve encountered is that Jimp docs are outdated and "Jimp.loadFont" doesn\'t seem to exist, it should be imported separately.'}),(0,i.jsx)("p",{children:"The next issue was this:"}),(0,i.jsx)("pre",{className:"crt",children:(0,i.jsx)("code",{className:"language-javascript",children:"\nconst font = await loadFont('.my_font.ttf');\n        "})}),(0,i.jsx)("p",{children:"has failed with an error, that I honestly did not even understand. But it was clear, that Jimp is unhappy with this font format. I've looked into it's GitHub and realized that it uses \".fnt\" fonts."}),(0,i.jsx)("p",{children:'At this point I\'ve tried using different libs, like "node-canvas", which, according to the documentation, should be able to use my font.'}),(0,i.jsxs)("p",{children:["It did not. After making several efforts, I've realized I'm not the only one who has a problem and there's an"," ",(0,i.jsx)("a",{href:"https://github.com/Automattic/node-canvas/issues/2255",children:"open GitHub issue"}),"."]}),(0,i.jsx)("p",{children:"So, I've decided to try and convert the font."}),(0,i.jsxs)("p",{children:["Surprisingly, there are different tools for that and some of them just don't work. ",(0,i.jsx)("a",{href:"https://ttf2fnt.com/",children:"This one"})," does."]}),(0,i.jsx)("p",{children:'A ".fnt" is actually just a bitmap, so this tool has generated an image'}),(0,i.jsx)(s.z,{src:"/6/2.png"}),(0,i.jsx)("p",{children:"and a file that describes which part of this image corresponds to which letter"}),(0,i.jsx)(s.z,{src:"/6/3.png"}),(0,i.jsx)("p",{children:"Now, we're one step closer!"}),(0,i.jsx)("pre",{className:"crt",children:(0,i.jsx)("code",{className:"language-javascript",children:"\nconst font = await loadFont('.my_font.fnt');\n        "})}),(0,i.jsx)("p",{children:"This works as expected."}),(0,i.jsx)("p",{children:"There's one more thing though: some (well, most of them actually) images are landscape, so the text should go vertical. I have spent more time than I'm willing to admit looking for a way to do that. I have even decided to ask wise people on StackOverflow."}),(0,i.jsx)("p",{children:"But than I've had an idea both dumb and brilliant: rotate an image, print text, rotate back."}),(0,i.jsx)("pre",{className:"crt",children:(0,i.jsx)("code",{className:"language-javascript",children:"\n  image.rotate(90);\n\n  image.print({\n    font,\n    x: border,\n    y: width - 50,\n    text: 'tome text goes here',\n  });\n\n  image.rotate(-90);\n        "})}),(0,i.jsx)("h3",{children:"Done"}),(0,i.jsxs)("p",{children:["That's it, the code is"," ",(0,i.jsx)("a",{href:"https://github.com/k-one-o-two/img-bot",children:"on Github."})]}),(0,i.jsxs)("p",{children:["I've learned how to ",(0,i.jsx)("s",{children:"mutilate"}),"manipulate images in node.js, and surely had some specific fun while doing it."]})]})};t.default=function(){return(0,i.jsx)(o.d,{art:r.art,title:r.title,html:r.html})}}},function(e){e.O(0,[675,774,888,179],function(){return e(e.s=5079)}),_N_E=e.O()}]);